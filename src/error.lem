open import List
open import Num

type error 'a
	= Success of 'a
	| Fail of string

val return : forall 'a. 'a -> error 'a
let return r = Success r

val (>>=) : forall 'a 'b. error 'a -> ('a -> error 'b) -> error 'b
let (>>=) x f =
	match x with
		| Success s -> f s
		| Fail err  -> Fail err
	end

val repeatM : forall 'a. nat -> error 'a -> error (list 'a)
let rec repeatM count action =
	match count with
		| 0 -> return []
		| m ->
				action >>= fun head ->
				repeatM (m - 1) action >>= fun tail ->
				return (head::tail)
	end

val repeatM' : forall 'a 'b. nat -> 'b -> ('b -> error ('a * 'b)) -> error ((list 'a) * 'b)
let rec repeatM' count seed action =
	match count with
		| 0 -> return ([], seed)
		| m ->
				action seed >>= fun (head, seed) ->
				repeatM' (m - 1) seed action >>= fun (tail, seed) ->
				return (head::tail, seed)
	end
