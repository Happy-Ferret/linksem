open import Basic_classes
open import Bool
open import List
open import Maybe

open import Bitstring
open import Error
open import Elf_types

(** Special section indices. *)

(** [shn_undef]: marks an undefined, missing or irrelevant section reference.
  *)
let shn_undef : nat = 0
;;

(** [shn_loreserve]: this specifies the lower bound of the range of reserved
  * indices.
  *)
let shn_loreserve : nat = 65280 (* 0xff00 *)
;;

(** [shn_loproc]: start of the range reserved for processor-specific semantics.
  *)
let shn_loproc : nat = 65280 (* 0xff00 *)
;;

(** [shn_hiproc]: end of the range reserved for processor-specific semantics.
  *)
let shn_hiproc : nat = 65311 (* 0xff1f *)
;;

(** [shn_loos]: start of the range reserved for operating system-specific
  * semantics.
  *)
let shn_loos : nat = 65312 (* 0xff20 *)
;;

(** [shn_hios]: end of the range reserved for operating system-specific
  * semantics.
  *)
let shn_hios : nat = 65343 (* 0xff3f *)
;;

(** [shn_abs]: specifies the absolute values for the corresponding reference.
  * Symbols defined relative to section number [shn_abs] have absolute values
  * and are not affected by relocation.
  *)
let shn_abs : nat = 65521 (* 0xfff1 *)
;;

(** [shn_common]: symbols defined relative to this index are common symbols,
  * such as unallocated C external variables.
  *)
let shn_common : nat = 65522 (* 0xfff2 *)
;;

(** [shn_xindex]: an escape value.  It indicates the actual section header index
  * is too large to fit in the containing field and is located in another
  * location (specific to the structure where it appears).
  *)
let shn_xindex : nat = 65535 (* 0xffff *)
;;

(** [shn_hireserve]: specifies the upper-bound of reserved values.
  *)
let shn_hireserve : nat = 65535 (* 0xffff *)
;;

(** Section types. *)

let sht_null : nat = 0
;;

let sht_progbits : nat = 1
;;

let sht_symtab : nat = 2
;;

let sht_strtab : nat = 3
;;

let sht_rela : nat = 4
;;

let sht_hash : nat = 5
;;

let sht_dynamic : nat = 6
;;

let sht_note : nat = 7
;;

let sht_nobits : nat = 8
;;

let sht_rel : nat = 9
;;

let sht_shlib : nat = 10
;;

let sht_dynsym : nat = 11
;;

let sht_init_array : nat = 14
;;

let sht_fini_array : nat = 15
;;

let sht_preinit_array : nat = 16
;;

let sht_group : nat = 17
;;

let sht_symtab_shndx : nat = 18
;;

(* XXX: constants too big for Lem to parse, apparently!
let sht_loos : nat = 1610612736 (* 0x60000000 *)
;;

let sht_hios : nat = 1879048191 (* 0x6fffffff *)
;;

let sht_loproc : nat = 1879048192 (* 0x70000000 *)
;;

let sht_hiproc : nat = 2147483647 (* 0x7fffffff *)
;;

let sht_louser : nat = 2147483648 (* 0x80000000 *)
;;

let sht_hiuser : nat = 2415919103 (* 0x8fffffff *)
;;
*)

(** Section header table entry type. *)

type elf32_section_header_table_entry =
  <| elf32_sh_name      : elf32_word
   ; elf32_sh_type      : elf32_word
   ; elf32_sh_addr      : elf32_addr
   ; elf32_sh_offset    : elf32_off
   ; elf32_sh_size      : elf32_word
   ; elf32_sh_link      : elf32_word
   ; elf32_sh_info      : elf32_word
   ; elf32_sh_addralign : elf32_word
   ; elf32_sh_entsize   : elf32_word
   |>

let read_elf32_section_header_table_entry (bs : bitstring) =
	read_elf32_word bs >>= fun (sh_name, bs) ->
	read_elf32_word bs >>= fun (sh_type, bs) ->
	read_elf32_addr bs >>= fun (sh_addr, bs) ->
	read_elf32_off bs >>= fun (sh_offset, bs) ->
	read_elf32_word bs >>= fun (sh_size, bs) ->
	read_elf32_word bs >>= fun (sh_link, bs) ->
	read_elf32_word bs >>= fun (sh_info, bs) ->
	read_elf32_word bs >>= fun (sh_addralign, bs) ->
	read_elf32_word bs >>= fun (sh_entsize, bs) ->
		return
			<| elf32_sh_name = sh_name
			 ; elf32_sh_type = sh_type
			 ; elf32_sh_addr = sh_addr
			 ; elf32_sh_offset = sh_offset
			 ; elf32_sh_size = sh_size
			 ; elf32_sh_link = sh_link
			 ; elf32_sh_info = sh_info
			 ; elf32_sh_addralign = sh_addralign
			 ; elf32_sh_entsize = sh_entsize
			 |>
;;

(** Section header table type. *)

type elf32_section_header_table = list elf32_shdr
;;

let rec read_elf32_section_header_table' bitstream =
  if length bitstream = 0 then
    return []
  else
    let (eat, rest) = partition entry_size bitstream in
      read_elf32_section_header_table_entry eat >>= fun sect ->
      read_elf32_section_header_table' rest     >>= fun tail ->
      return (sect::tail)

let read_elf32_section_header_table size entry_size offset bitstream : Error elf32_section_header_table =
	let (prefix, relevant) = partition offset bitstream in
  let (eat, rest) = partition (size * entry_size) relevant in
  	read_elf32_section_header_table' eat >>= fun entries ->
    return (entries, rest)
;;

val elf32_size_correct : elf32_shdr -> elf32_section_header_table -> bool
let elf32_size_correct hdr tbl =
  match hdr.elf32_sh_size with
    | 0 -> true
    | m -> m = length tbl
  end
;;

val is_valid_elf32_section_header_table : elf32_section_header_table -> bool
let is_valid_elf32_section_header_table tbl =
  match tbl with
    | []    -> false
    | x::xs ->
        x.e32_sh_name = 0 &&
        x.e32_sh_type = sht_null &&
        x.e32_sh_flags = 0 &&
        x.e32_sh_addr = 0 &&
        x.e32_sh_offset = 0 &&
        x.e32_sh_info = 0 &&
        x.e32_sh_addralign = 0 &&
        x.e32_sh_entsize = 0 &&
        size_correct x tbl &&
        link_correct x
  end
;;
