(*Generated by Lem from show.lem.*)
open Lem_function
open Lem_list
open Lem_num
open Lem_string

open Missing_pervasives

type 'a show_class={
	show_method : 'a -> string
}

(*val boolShow : bool -> string*)
let boolShow b =	
((match b with
		| true -> "true"
		| false -> "false"
	))

let instance_Show_Show_bool_dict =({

  show_method = boolShow})

let instance_Show_Show_string_dict =({

  show_method = id})

(*val pairShow : forall 'a 'b. Show 'a, Show 'b => ('a * 'b) -> string*)
let pairShow dict_Show_Show_a dict_Show_Show_b (left, right) = ("(" ^ (
  dict_Show_Show_a.show_method left ^ (", " ^ (dict_Show_Show_b.show_method right ^ ")"))))

let instance_Show_Show_tup2_dict dict_Show_Show_a dict_Show_Show_b =({

  show_method = 
  (pairShow dict_Show_Show_a dict_Show_Show_b)})

(*val listShow : forall 'a. Show 'a => list 'a -> string*)
let listShow dict_Show_Show_a l =	
(let result = (intercalate "; " (List.map  
  dict_Show_Show_a.show_method l)) in
	let folded = (List.fold_right (^) result "") in
		"[" ^ (folded ^ "]"))

let instance_Show_Show_list_dict dict_Show_Show_a =({

  show_method = 
  (listShow dict_Show_Show_a)})

(*val natShow : nat -> string*)
let natShow = string_of_int

let instance_Show_Show_nat_dict =({

  show_method = natShow})
