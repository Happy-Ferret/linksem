(*Generated by Lem from missing_pervasives.lem.*)
open Lem_basic_classes
open Lem_bool
open Lem_list
open Lem_maybe
open Lem_num
open Lem_string

(*type ordering
  = Equal
  | Less
  | Greater*)

(*val natural_ordering : natural -> natural -> ordering*)
(*let natural_ordering left right =
  if (Instance_Basic_classes_Eq_Num_natural.=) left right then
    Equal
  else if (Instance_Basic_classes_Ord_Num_natural.<) left right then
    Less
  else
    Greater*)

(*val sort_by : forall 'a. ('a -> 'a -> ordering) -> list 'a -> list 'a*)

(** [intercalate sep xs] places [sep] between all elements of [xs]. *)
(*val intercalate : forall 'a. 'a -> list 'a -> list 'a*)
let rec intercalate sep xs =	
((match xs with
		| []    -> []
		| [x]   -> [x]
		| x::xs -> x::(sep::intercalate sep xs)
	))

(** [mapMaybei f xs] maps a function expecting an index (the position in the list
  * [xs] that it is currently viewing) and producing a [maybe] type across a list.
  * Elements that produce [Nothing] under [f] are discarded in the output, whilst
  * those producing [Just e] for some [e] are kept.
  *)
(*val mapMaybei' : forall 'a 'b. (natural -> 'a -> maybe 'b) -> natural -> list 'a -> list 'b*)
let rec mapMaybei' f idx xs =  
((match xs with
  | []    -> []
  | x::xs ->
      (match f idx x with
      | None -> mapMaybei' f ( Big_int.add_big_int(Big_int.big_int_of_int 1) idx) xs
      | Some e  -> e :: mapMaybei' f ( Big_int.add_big_int(Big_int.big_int_of_int 1) idx) xs
      )
  ))

(*val mapMaybei : forall 'a 'b. (natural -> 'a -> maybe 'b) -> list 'a -> list 'b*)
    
let mapMaybei f xs =  
(mapMaybei' f(Big_int.big_int_of_int 0) xs)

(** [unlines xs] concatenates a list of strings [xs], placing each entry
  * on a new line.
  *)
(*val unlines : list string -> string*)
let unlines xs =  
(List.fold_right (^) (intercalate "\n" xs) "")

(** [bracket xs] concatenates a list of strings [xs], separating each entry with a
  * space, and bracketing the resulting string.
  *)
(*val bracket : list string -> string*)
let bracket xs =  
("(" ^ (List.fold_right (^) (intercalate " " xs) "" ^ ")"))

(** [null_char] is the null character. *)
(*val null_char : char*)

(** [split_string_on_char s c] splits a string [s] into a list of substrings
  * on character [c], otherwise returning the singleton list containing [s]
  * if [c] is not found in [s].
  *)
(*val split_string_on_char : string -> char -> list string*)

(** [print s] prints [s] to stdout. *)
(*val print : string -> unit*)

(** [string_of_nat m] produces a string representation of natural number [m]. *)
(*val string_of_nat : nat -> string*)

(** [string_suffix i s] chops [i] characters off [s], returning a new string.
  * Fails if the index is negative, or beyond the end of the string.
  *)
(*val string_suffix : natural -> string -> maybe string*)

(*val index : forall 'a. natural -> list 'a -> maybe 'a*)