open import Elf_header
open import Elf_section_header
open import Elf_types

open import Bitstring
open import Error
open import Missing_pervasives

open import Basic_classes
open import List
open import Maybe
open import Num
open import String
open import Show

let get_strings_of_string_table bs =
	let strings = string_of_bitstring bs in
	  split_string_on_char strings null_char

let read_elf32_string_table hdr sections bs : error (list string) =
	match sections with
		| Nothing -> return []
		| Just sections ->
	    let idx = nat_of_elf32_half hdr.elf32_shstrndx in
			let string_table  = List.index sections idx in
				match string_table with
					| Nothing -> Fail "read_elf32_string_table: string table index too large"
					| Just string_table ->
         			let offset        = nat_of_elf32_off string_table.elf32_sh_offset in
			        let size          = nat_of_elf32_word string_table.elf32_sh_size in
			        let (_, initial)  = Bitstring.partition (offset * 8) bs in
			        let (relevant, _) = Bitstring.partition (size * 8) initial in
				        return (get_strings_of_string_table relevant)
				end
	end
	
let rec read_elf32_string_tables' offset_sizes (bs : bitstring) : list (list string) =
	match offset_sizes with
		| []    -> []
		| x::xs ->
			let (offset, size) = x in
			let (_, relevant)  = Bitstring.partition offset bs in
			let (cut, _)       = Bitstring.partition size relevant in
			let strings        = get_strings_of_string_table cut in
			let tail           = read_elf32_string_tables' xs bs in
				strings::tail
	end
	
let read_elf32_string_tables sections bs : list string =
	match sections with
		| Nothing -> []
		| Just sections ->
			let offsets_sizes = List.concat (List.map (fun sect ->
				if nat_of_elf32_word sect.elf32_sh_type = sht_strtab then
					let offset = (nat_of_elf32_off sect.elf32_sh_offset) * 8 in
					let size   =
						let _ = Missing_pervasives.print ("YYY size: " ^ show (nat_of_elf32_word sect.elf32_sh_size * 8)) in
							nat_of_elf32_word sect.elf32_sh_size * 8
					in
						[(offset, size)]
				else
					[]
				) sections)
			in
				read_elf32_string_tables' offsets_sizes bs
	end
	
let string_of_elf32_string_table tbl =
  "String table contents:" ^ "\n\t" ^
    foldr (^) "" tbl ^ "\n\n"
    
let string_of_elf32_dynamic_string_table tbl =
  "Dynamic string table contents:" ^ "\n\t" ^
    foldr (^) "" tbl ^ "\n\n"
