(*Generated by Lem from error.lem.*)
open Lem_list
open Lem_num
open Lem_string

open Show

type 'a error
	= Success of 'a
	| Fail of string

(*val return : forall 'a. 'a -> error 'a*)
let return r = (Success r)

(*val >>= : forall 'a 'b. error 'a -> ('a -> error 'b) -> error 'b*)
let (>>=) x f =	
((match x with
		| Success s -> f s
		| Fail err  -> Fail err
	))

(*val repeatM : forall 'a. nat -> error 'a -> error (list 'a)*)
let rec repeatM count action =	
((match count with
		| 0 -> return []
		| m ->
				action >>= (fun head ->
				repeatM ( Nat_num.nat_monus m( 1)) action >>= (fun tail ->
				return (head::tail)))
	))

(*val repeatM' : forall 'a 'b. nat -> 'b -> ('b -> error ('a * 'b)) -> error ((list 'a) * 'b)*)
let rec repeatM' count seed action =	
((match count with
		| 0 -> return ([], seed)
		| m ->
				action seed >>= (fun (head, seed) ->
				repeatM' ( Nat_num.nat_monus m( 1)) seed action >>= (fun (tail, seed) ->
				return ((head::tail), seed)))
	))
	
(*val errorShow : forall 'a. Show 'a => error 'a -> string*)
let errorShow dict_Show_Show_a e =	
((match e with
		| Fail err -> "Fail: " ^ err
		| Success s -> dict_Show_Show_a.show_method s
	))

let instance_Show_Show_Error_error_dict dict_Show_Show_a =({

  show_method = 
  (errorShow dict_Show_Show_a)})
