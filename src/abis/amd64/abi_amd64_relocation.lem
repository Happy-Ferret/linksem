(** [abi_amd64_relocation] contains types and definitions relating to ABI
  * specific relocation functionality for the AMD64 ABI.
  *)

open import Basic_classes
open import Num
open import String
open import Map
open import Maybe
open import Missing_pervasives

open import Error

open import Elf_types_native_uint
open import Elf_file
open import Elf_header
open import Elf_relocation
open import Elf_symbol_table

(** x86-64 relocation types. *)

let r_x86_64_none : natural = 0
let r_x86_64_64 : natural = 1
let r_x86_64_pc32 : natural = 2
let r_x86_64_got32 : natural = 3
let r_x86_64_plt32 : natural = 4
let r_x86_64_copy : natural = 5
let r_x86_64_glob_dat : natural = 6
let r_x86_64_jump_slot : natural = 7
let r_x86_64_relative : natural = 8
let r_x86_64_gotpcrel : natural = 9
let r_x86_64_32 : natural = 10
let r_x86_64_32s : natural = 11
let r_x86_64_16 : natural = 12
let r_x86_64_pc16 : natural = 13
let r_x86_64_8 : natural = 14
let r_x86_64_pc8 : natural = 15
let r_x86_64_dtpmod64 : natural = 16
let r_x86_64_dtpoff64 : natural = 17
let r_x86_64_tpoff64 : natural = 18
let r_x86_64_tlsgd : natural = 19
let r_x86_64_tlsld : natural = 20
let r_x86_64_dtpoff32 : natural = 21
let r_x86_64_gottpoff : natural = 22
let r_x86_64_tpoff32 : natural = 23
let r_x86_64_pc64 : natural = 24
let r_x86_64_gotoff64 : natural = 25
let r_x86_64_gotpc32 : natural = 26
let r_x86_64_size32 : natural = 32
let r_x86_64_size64 : natural = 33
let r_x86_64_gotpc32_tlsdesc : natural = 34
let r_x86_64_tlsdesc_call : natural = 35
let r_x86_64_tlsdesc : natural = 36
let r_x86_64_irelative : natural = 37

(** [string_of_x86_64_relocation_type m] produces a string representation of the
  * relocation type [m].
  *)
val string_of_x86_64_relocation_type : natural -> string
let string_of_x86_64_relocation_type rel_type =
  if rel_type = r_x86_64_none then
    "r_x86_64_none"
  else if rel_type = r_x86_64_64 then
    "r_x86_64_64"
  else if rel_type = r_x86_64_pc32 then
    "r_x86_64_pc32"
  else if rel_type = r_x86_64_got32 then
    "r_x86_64_got32"
  else if rel_type = r_x86_64_plt32 then
    "r_x86_64_plt32"
  else if rel_type = r_x86_64_copy then
    "r_x86_64_copy"
  else if rel_type = r_x86_64_glob_dat then
    "r_x86_64_glob_dat"
  else if rel_type = r_x86_64_jump_slot then
    "r_x86_64_jumpslot"
  else if rel_type = r_x86_64_relative then
    "r_x86_64_relative"
  else if rel_type = r_x86_64_gotpcrel then
    "r_x86_64_gotpcrel"
  else if rel_type = r_x86_64_32 then
    "r_x86_64_32"
  else if rel_type = r_x86_64_32s then
    "r_x86_64_32s"
  else if rel_type = r_x86_64_16 then
    "r_x86_64_16"
  else if rel_type = r_x86_64_pc16 then
    "r_x86_64_pc16"
  else if rel_type = r_x86_64_8 then
    "r_x86_64_8"
  else if rel_type = r_x86_64_pc8 then
    "r_x86_64_pc8"
  else if rel_type = r_x86_64_dtpmod64 then
    "r_x86_64_dtpmod64"
  else if rel_type = r_x86_64_dtpoff64 then
    "r_x86_64_dtpoff64"
  else if rel_type = r_x86_64_tpoff64 then
    "r_x86_64_tpoff64"
  else if rel_type = r_x86_64_tlsgd then
    "r_x86_64_tlsgd"
  else if rel_type = r_x86_64_tlsld then
    "r_x86_64_tlsld"
  else if rel_type = r_x86_64_dtpoff32 then
    "r_x86_64_dtpoff32"
  else if rel_type = r_x86_64_gottpoff then
    "r_x86_64_gottpoff"
  else if rel_type = r_x86_64_tpoff32 then
    "r_x86_64_tpoff32"
  else if rel_type = r_x86_64_pc64 then
    "r_x86_64_pc64"
  else if rel_type = r_x86_64_gotoff64 then
    "r_x86_64_gotoff64"
  else if rel_type = r_x86_64_gotpc32 then
    "r_x86_64_gotpc32"
  else if rel_type = r_x86_64_size32 then
    "r_x86_64_size32"
  else if rel_type = r_x86_64_size64 then
    "r_x86_64_size64"
  else if rel_type = r_x86_64_gotpc32_tlsdesc then
    "r_x86_64_gotpc32_tlsdesc"
  else if rel_type = r_x86_64_tlsdesc_call then
    "r_x86_64_tlsdesc_call"
  else if rel_type = r_x86_64_tlsdesc then
    "r_x86_64_tlsdesc"
  else if rel_type = r_x86_64_irelative then
    "r_x86_64_irelative"
  else
    "Invalid x86-64 relocation type"

(** [width_of_x86_64_relocation m s] yields the width in bytes of the relocatable field, 
  * when resolving to a defined maybe symbol [s] (or Nothing, if weak).
  *)
val width_of_x86_64_relocation : natural -> maybe elf64_symbol_table_entry -> natural
let width_of_x86_64_relocation rel_type s =
  if rel_type = r_x86_64_none then 0
  else if rel_type = r_x86_64_64 then 8
  else if rel_type = r_x86_64_pc32 then 4
  else if rel_type = r_x86_64_got32 then 4
  else if rel_type = r_x86_64_plt32 then 4
  else if rel_type = r_x86_64_copy then match s with Nothing -> 0 | Just s -> natural_of_elf64_xword s.elf64_st_size end
  else if rel_type = r_x86_64_glob_dat then match s with Nothing -> 0 | Just s -> natural_of_elf64_xword s.elf64_st_size end (* CHECK *)
  else if rel_type = r_x86_64_jump_slot then 4 (* CHECK *)
  else if rel_type = r_x86_64_relative then 8 (* CHECK *)
  else if rel_type = r_x86_64_gotpcrel then 8 (* CHECK *)
  else if rel_type = r_x86_64_32 then 4
  else if rel_type = r_x86_64_32s then 4
  else if rel_type = r_x86_64_16 then 2
  else if rel_type = r_x86_64_pc16 then 2
  else if rel_type = r_x86_64_8 then 1
  else if rel_type = r_x86_64_pc8 then 1
  else if rel_type = r_x86_64_dtpmod64 then 8 (* CHECK *)
  else if rel_type = r_x86_64_dtpoff64 then 8 (* CHECK *)
  else if rel_type = r_x86_64_tpoff64 then 8 (* CHECK *)
  else if rel_type = r_x86_64_tlsgd then 8 (* CHECK *)
  else if rel_type = r_x86_64_tlsld then 8 (* CHECK *)
  else if rel_type = r_x86_64_dtpoff32 then 4 (* CHECK *)
  else if rel_type = r_x86_64_gottpoff then 8 (* CHECK *)
  else if rel_type = r_x86_64_tpoff32 then 4 (* CHECK *)
  else if rel_type = r_x86_64_pc64 then 8
  else if rel_type = r_x86_64_gotoff64 then 8
  else if rel_type = r_x86_64_gotpc32 then 4
  else if rel_type = r_x86_64_size32 then 4
  else if rel_type = r_x86_64_size64 then 8
  else if rel_type = r_x86_64_gotpc32_tlsdesc then 4 (* CHECK *)
  else if rel_type = r_x86_64_tlsdesc_call then 4 (* CHECK *)
  else if rel_type = r_x86_64_tlsdesc then 8 (* CHECK *)
  else if rel_type = r_x86_64_irelative then 8 (* CHECK *)
  else 0 (* invalid *)

(** [integer_bit_width] represents potential integer bit-widths of interest to
  * the relocation machinery below.
  *)
type integer_bit_width
  = I8
  | I16
  | I32
  | I64
  | I64X2 (** For use with the R_X86_64_TLSDESC relocation *)

(** [abi_amd64_apply_relocation rel b_val g_val got_val l_val p_val s_val z_val ef]
  * calculates the effect of a relocation of type [rel] using relevant addresses,
  * offsets and fields represented by [b_va], [g_val], [got_val], [l_val], [p_val],
  * [s_val] and [z_val], which are:
  *
  *    - B  : Base address at which a shared-object has been loaded into memory
  *           during execution.
  *    - G  : Represents the offset into the GOT at which the relocation's entry
  *           will reside during execution.
  *    - GOT: Address of the GOT.
  *    - L  : Represents the address or offset of the PLT entry for a symbol.
  *    - P  : Represents the address or offset of the storage unit being
  *           relocated.
  *    - S  : Represents the value of the symbol whose index resides in the
  *           relocation entry.
  *    - Z  : Represents the size of the symbol whose index resides in the
  *           relocation entry.
  *
  * More details of the above can be found in the AMD64 ABI document's chapter
  * on relocations.
  *
  * The [abi_amd64_apply_relocation] function returns a finite map of addresses
  * being relocated and their computed integer value.  A tag describing the
  * bitwidth of this integer is also included as many relocations feature the
  * same calculation but differ in how wide the result should be truncated or
  * extended.
  *)
val abi_amd64_apply_relocation : elf64_relocation_a -> integer -> integer ->
  integer -> integer -> integer -> integer -> integer -> elf64_file ->
  error (Map.map elf64_addr (integer * integer_bit_width))
let abi_amd64_apply_relocation rel b_val g_val got_val l_val p_val s_val z_val ef =
  if is_elf64_relocatable_file ef.elf64_file_header then
    let rel_type = elf64_relocation_r_type rel.elf64_ra_info in
    let a_val    = integer_of_elf64_sxword rel.elf64_ra_addend in
      (** No width, No calculation *)
      if rel_type = r_x86_64_none then
        return Map.empty
      (** Width: 64 Calculation: S + A *)
      else if rel_type = r_x86_64_64 then
      	let result = s_val + a_val in
      	let addr   = rel.elf64_ra_offset in
      		return (Map.singleton addr (result, I64))
      (** Width: 32 Calculation: S + A - P *)
      else if rel_type = r_x86_64_pc32 then
      	let result = (s_val + a_val) - p_val in
      	let addr   = rel.elf64_ra_offset in
      		return (Map.singleton addr (result, I32))
      (** Width: 32 Calculation: G + A *)
  		else if rel_type = r_x86_64_got32 then
      	let result = g_val + a_val in
      	let addr   = rel.elf64_ra_offset in
      		return (Map.singleton addr (result, I32))
      (** Width: 32 Calculation: L + A - P *)
  		else if rel_type = r_x86_64_plt32 then
    		fail "abi_amd64_apply_relocation: r_x86_64_plt32 not implemented"
    	(** No width, No calculation *)
		  else if rel_type = r_x86_64_copy then
		    fail "abi_amd64_apply_relocation: r_x86_64_copy not implemented"
		  (** Width: 64 Calculation: S *)
		  else if rel_type = r_x86_64_glob_dat then
      	let result = s_val in
      	let addr   = rel.elf64_ra_offset in
      		return (Map.singleton addr (result, I64))
		  (** Width: 64 Calculation: S *)
		  else if rel_type = r_x86_64_jump_slot then
      	let result = s_val in
      	let addr   = rel.elf64_ra_offset in
      		return (Map.singleton addr (result, I64))
		  (** Width: 64 Calculation: B + A *)
		  else if rel_type = r_x86_64_relative then
      	let result = b_val + a_val in
      	let addr   = rel.elf64_ra_offset in
      		return (Map.singleton addr (result, I64))
		  (** Width: 32 Calculation: G + GOT + A - P *)
		  else if rel_type = r_x86_64_gotpcrel then
      	let result = (g_val + got_val + a_val) - p_val in
      	let addr   = rel.elf64_ra_offset in
      		return (Map.singleton addr (result, I32))
		  (** Width: 32 Calculation: S + A *)
		  else if rel_type = r_x86_64_32 then
      	let result = s_val + a_val in
      	let addr   = rel.elf64_ra_offset in
      		return (Map.singleton addr (result, I32))
		  (** Width: 32 Calculation: S + A *)
		  else if rel_type = r_x86_64_32s then
      	let result = s_val + a_val in
      	let addr   = rel.elf64_ra_offset in
      		return (Map.singleton addr (result, I32))
		  (** Width: 16 Calculation: S + A *)
		  else if rel_type = r_x86_64_16 then
      	let result = s_val + a_val in
      	let addr   = rel.elf64_ra_offset in
      		return (Map.singleton addr (result, I16))
		  (** Width: 16 Calculation: S + A - P *)
		  else if rel_type = r_x86_64_pc16 then
      	let result = (s_val + a_val) - p_val in
      	let addr   = rel.elf64_ra_offset in
      		return (Map.singleton addr (result, I16))
		  (** Width: 8 Calculation: S + A *)
		  else if rel_type = r_x86_64_8 then
      	let result = s_val + a_val in
      	let addr   = rel.elf64_ra_offset in
      		return (Map.singleton addr (result, I8))
      (** Width 8: Calculation: S + A - P *)
		  else if rel_type = r_x86_64_pc8 then
      	let result = (s_val + a_val) - p_val in
      	let addr   = rel.elf64_ra_offset in
      		return (Map.singleton addr (result, I8))
      (** Width: 64 *)
		  else if rel_type = r_x86_64_dtpmod64 then
		    fail "abi_amd64_apply_relocation: r_x86_64_dtpmod64 not implemented"
      (** Width: 64 *)
		  else if rel_type = r_x86_64_dtpoff64 then
		    fail "abi_amd64_apply_relocation: r_x86_64_dtpoff64 not implemented"
      (** Width: 64 *)
		  else if rel_type = r_x86_64_tpoff64 then
		    fail "abi_amd64_apply_relocation: r_x86_64_tpoff64 not implemented"
      (** Width: 32 *)
		  else if rel_type = r_x86_64_tlsgd then
		    fail "abi_amd64_apply_relocation: r_x86_64_tlsgd not implemented"
      (** Width: 32 *)
		  else if rel_type = r_x86_64_tlsld then
		    fail "abi_amd64_apply_relocation: r_x86_64_tlsld not implemented"
      (** Width: 32 *)
		  else if rel_type = r_x86_64_dtpoff32 then
		    fail "abi_amd64_apply_relocation: r_x86_64_dtpoff32 not implemented"
      (** Width: 32 *)
		  else if rel_type = r_x86_64_gottpoff then
		    fail "abi_amd64_apply_relocation: r_x86_64_gottpoff not implemented"
      (** Width: 32 *)
		  else if rel_type = r_x86_64_tpoff32 then
		    fail "abi_amd64_apply_relocation: r_x86_64_tpoff32 not implemented"
		  (** Width: 64 Calculation: S + A - P *)
		  else if rel_type = r_x86_64_pc64 then
      	let result = (s_val + a_val) - p_val in
      	let addr   = rel.elf64_ra_offset in
      		return (Map.singleton addr (result, I64))
		  (** Width: 64 Calculation: S + A - GOT *)
		  else if rel_type = r_x86_64_gotoff64 then
      	let result = (s_val + a_val) - got_val in
      	let addr   = rel.elf64_ra_offset in
      		return (Map.singleton addr (result, I64))
		  (** Width: 32 Calculation: GOT + A - P *)
		  else if rel_type = r_x86_64_gotpc32 then
      	let result = (got_val + a_val) - p_val in
      	let addr   = rel.elf64_ra_offset in
      		return (Map.singleton addr (result, I32))
		  (** Width: 32 Calculation: Z + A *)
		  else if rel_type = r_x86_64_size32 then
      	let result = z_val + a_val in
      	let addr   = rel.elf64_ra_offset in
      		return (Map.singleton addr (result, I32))
		  (** Width: 64 Calculation: Z + A *)
		  else if rel_type = r_x86_64_size64 then
      	let result = z_val + a_val in
      	let addr   = rel.elf64_ra_offset in
      		return (Map.singleton addr (result, I64))
      (** Width: 32 *)
		  else if rel_type = r_x86_64_gotpc32_tlsdesc then
		    fail "abi_amd64_apply_relocation: r_x86_64_gotpc32_tlsdesc not implemented"
      (** No width *)
		  else if rel_type = r_x86_64_tlsdesc_call then
		    fail "abi_amd64_apply_relocation: r_x86_64_tlsdesc_call not implemented"
		  (** Width: 64X2 *)
		  else if rel_type = r_x86_64_tlsdesc then
		    fail "abi_amd64_apply_relocation: r_x86_64_tlsdesc not implemented"
		  (** Calculation: irelative(B + A) *)
		  else if rel_type = r_x86_64_irelative then
		    fail "abi_amd64_apply_relocation: r_x86_64_irelative not implemented"
		  else
		  	fail "abi_amd64_apply_relocation: invalid relocation type"
  else
  	fail "abi_amd64_apply_relocation: not a relocatable file"
