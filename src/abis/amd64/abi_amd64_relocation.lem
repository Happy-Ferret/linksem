(** [abi_amd64_relocation] contains types and definitions relating to ABI
  * specific relocation functionality for the AMD64 ABI.
  *)

open import Basic_classes
open import Num
open import String
open import Maybe
open import Missing_pervasives

open import Error

open import Elf_types
open import Elf_file
open import Elf_header
open import Elf_relocation
open import Elf_symbol_table

(** x86-64 relocation types. *)

let r_x86_64_none : natural = 0
let r_x86_64_64 : natural = 1
let r_x86_64_pc32 : natural = 2
let r_x86_64_got32 : natural = 3
let r_x86_64_plt32 : natural = 4
let r_x86_64_copy : natural = 5
let r_x86_64_glob_dat : natural = 6
let r_x86_64_jump_slot : natural = 7
let r_x86_64_relative : natural = 8
let r_x86_64_gotpcrel : natural = 9
let r_x86_64_32 : natural = 10
let r_x86_64_32s : natural = 11
let r_x86_64_16 : natural = 12
let r_x86_64_pc16 : natural = 13
let r_x86_64_8 : natural = 14
let r_x86_64_pc8 : natural = 15
let r_x86_64_dtpmod64 : natural = 16
let r_x86_64_dtpoff64 : natural = 17
let r_x86_64_tpoff64 : natural = 18
let r_x86_64_tlsgd : natural = 19
let r_x86_64_tlsld : natural = 20
let r_x86_64_dtpoff32 : natural = 21
let r_x86_64_gottpoff : natural = 22
let r_x86_64_tpoff32 : natural = 23
let r_x86_64_pc64 : natural = 24
let r_x86_64_gotoff64 : natural = 25
let r_x86_64_gotpc32 : natural = 26
let r_x86_64_size32 : natural = 32
let r_x86_64_size64 : natural = 33
let r_x86_64_gotpc32_tlsdesc : natural = 34
let r_x86_64_tlsdesc_call : natural = 35
let r_x86_64_tlsdesc : natural = 36
let r_x86_64_irelative : natural = 37

(** [string_of_x86_64_relocation_type m] produces a string representation of the
  * relocation type [m].
  *)
val string_of_x86_64_relocation_type : natural -> string
let string_of_x86_64_relocation_type m =
  if m = r_x86_64_none then
    "r_x86_64_none"
  else if m = r_x86_64_64 then
    "r_x86_64_64"
  else if m = r_x86_64_pc32 then
    "r_x86_64_pc32"
  else if m = r_x86_64_got32 then
    "r_x86_64_got32"
  else if m = r_x86_64_plt32 then
    "r_x86_64_plt32"
  else if m = r_x86_64_copy then
    "r_x86_64_copy"
  else if m = r_x86_64_glob_dat then
    "r_x86_64_glob_dat"
  else if m = r_x86_64_jump_slot then
    "r_x86_64_jumpslot"
  else if m = r_x86_64_relative then
    "r_x86_64_relative"
  else if m = r_x86_64_gotpcrel then
    "r_x86_64_gotpcrel"
  else if m = r_x86_64_32 then
    "r_x86_64_32"
  else if m = r_x86_64_32s then
    "r_x86_64_32s"
  else if m = r_x86_64_16 then
    "r_x86_64_16"
  else if m = r_x86_64_pc16 then
    "r_x86_64_pc16"
  else if m = r_x86_64_8 then
    "r_x86_64_8"
  else if m = r_x86_64_pc8 then
    "r_x86_64_pc8"
  else if m = r_x86_64_dtpmod64 then
    "r_x86_64_dtpmod64"
  else if m = r_x86_64_dtpoff64 then
    "r_x86_64_dtpoff64"
  else if m = r_x86_64_tpoff64 then
    "r_x86_64_tpoff64"
  else if m = r_x86_64_tlsgd then
    "r_x86_64_tlsgd"
  else if m = r_x86_64_tlsld then
    "r_x86_64_tlsld"
  else if m = r_x86_64_dtpoff32 then
    "r_x86_64_dtpoff32"
  else if m = r_x86_64_gottpoff then
    "r_x86_64_gottpoff"
  else if m = r_x86_64_tpoff32 then
    "r_x86_64_tpoff32"
  else if m = r_x86_64_pc64 then
    "r_x86_64_pc64"
  else if m = r_x86_64_gotoff64 then
    "r_x86_64_gotoff64"
  else if m = r_x86_64_gotpc32 then
    "r_x86_64_gotpc32"
  else if m = r_x86_64_size32 then
    "r_x86_64_size32"
  else if m = r_x86_64_size64 then
    "r_x86_64_size64"
  else if m = r_x86_64_gotpc32_tlsdesc then
    "r_x86_64_gotpc32_tlsdesc"
  else if m = r_x86_64_tlsdesc_call then
    "r_x86_64_tlsdesc_call"
  else if m = r_x86_64_tlsdesc then
    "r_x86_64_tlsdesc"
  else if m = r_x86_64_irelative then
    "r_x86_64_irelative"
  else
    "Invalid x86-64 relocation type"

(** [width_of_x86_64_relocation m s] yields the width in bytes of the relocatable field, 
  * when resolving to a defined maybe symbol [s] (or Nothing, if weak).
  *)
val width_of_x86_64_relocation : natural -> maybe elf64_symbol_table_entry -> natural
let width_of_x86_64_relocation m s =
  if m = r_x86_64_none then 0
  else if m = r_x86_64_64 then 8
  else if m = r_x86_64_pc32 then 4
  else if m = r_x86_64_got32 then 4
  else if m = r_x86_64_plt32 then 4
  else if m = r_x86_64_copy then match s with Nothing -> 0 | Just s -> natural_of_elf64_xword s.elf64_st_size end
  else if m = r_x86_64_glob_dat then match s with Nothing -> 0 | Just s -> natural_of_elf64_xword s.elf64_st_size end (* CHECK *)
  else if m = r_x86_64_jump_slot then 4 (* CHECK *)
  else if m = r_x86_64_relative then 8 (* CHECK *)
  else if m = r_x86_64_gotpcrel then 8 (* CHECK *)
  else if m = r_x86_64_32 then 4
  else if m = r_x86_64_32s then 4
  else if m = r_x86_64_16 then 2
  else if m = r_x86_64_pc16 then 2
  else if m = r_x86_64_8 then 1
  else if m = r_x86_64_pc8 then 1
  else if m = r_x86_64_dtpmod64 then 8 (* CHECK *)
  else if m = r_x86_64_dtpoff64 then 8 (* CHECK *)
  else if m = r_x86_64_tpoff64 then 8 (* CHECK *)
  else if m = r_x86_64_tlsgd then 8 (* CHECK *)
  else if m = r_x86_64_tlsld then 8 (* CHECK *)
  else if m = r_x86_64_dtpoff32 then 4 (* CHECK *)
  else if m = r_x86_64_gottpoff then 8 (* CHECK *)
  else if m = r_x86_64_tpoff32 then 4 (* CHECK *)
  else if m = r_x86_64_pc64 then 8
  else if m = r_x86_64_gotoff64 then 8
  else if m = r_x86_64_gotpc32 then 4
  else if m = r_x86_64_size32 then 4
  else if m = r_x86_64_size64 then 8
  else if m = r_x86_64_gotpc32_tlsdesc then 8 (* CHECK *)
  else if m = r_x86_64_tlsdesc_call then 4 (* CHECK *)
  else if m = r_x86_64_tlsdesc then 8 (* CHECK *)
  else if m = r_x86_64_irelative then 8 (* CHECK *)
  else 0 (* invalid *)

val abi_amd64_apply_relocation : elf64_relocation_a -> elf64_file ->
  error elf64_executable_process_image
let abi_amd64_apply_relocation rel ef =
  if is_elf64_executable_file ef.elf64_file_header then
    get_elf64_executable_image ef >>= fun img ->
    let rel_type = elf64_relocation_r_type rel.elf64_ra_info in
      if rel_type = r_x86_64_none then
        return img
      else if rel_type = r_x86_64_64 then
        fail ""
      else if rel_type = r_x86_64_pc32 then
        fail ""
      else if rel_type = r_x86_64_got32 then
        fail ""
      else fail "abi_amd64_apply_relocation: relocation not yet implemented"
  else
    fail "abi_amd64_apply_relocation: not an executable ELF file"
