open import Basic_classes
open import Bool
open import Num
open import List
open import Assert_extra

open import Memory_image
open import Abi_amd64
open import Abi_aarch64_le

val all_abis : forall 'abifeature. list (abi 'abifeature)
let all_abis = [sysv_amd64_std_abi; sysv_aarch64_le_std_abi(* ; null_abi *)]

type null_abi_feature = unit

type any_abi_feature = Amd64AbiFeature of amd64_abi_feature
                     | Aarch64LeAbiFeature of aarch64_le_abi_feature

(*
val amd64AbiFeatureConstructorToNaturalList : amd64_abi_feature -> list natural
val aarch64AbiFeatureConstructorToNaturalList : aarch64_le_abi_feature -> list natural
*)

val anyAbiFeatureConstructorToNaturalList : any_abi_feature -> list natural
let anyAbiFeatureConstructorToNaturalList af = match af with
    Amd64AbiFeature(aaf) -> 0 :: (amd64AbiFeatureConstructorToNaturalList aaf)
    | Aarch64LeAbiFeature(aaf) -> 1 :: (aarch64LeAbiFeatureConstructorToNaturalList aaf)
end

let anyAbiFeatureCompare f1 f2 = 
    match ((anyAbiFeatureConstructorToNaturalList f1), (anyAbiFeatureConstructorToNaturalList f2)) with
        ([], []) -> failwith "impossible: elf file feature has empty natural list (case 0)"
    |   (_, [])  -> failwith "impossible: elf file feature has empty natural list (case 1)"
    |   ([], _)  -> failwith "impossible: elf file feature has empty natural list (case 2)"
    |   ((hd1 :: tl1), (hd2 :: tl2)) -> 
            if hd1 < hd2 then LT else if hd1 > hd2 then GT else
                match (f1, f2) with
                    (Amd64AbiFeature(x1), Amd64AbiFeature(x2)) -> compare x1 x2
                    | (Aarch64LeAbiFeature(x1), Aarch64LeAbiFeature(x2)) -> compare x1 x2
                    | _ -> failwith "impossible: tag constructors not equal but natural list heads were equal"
                end
    end

instance (Ord any_abi_feature)
    let compare = anyAbiFeatureCompare
    let (<) = fun f1 -> (fun f2 -> (anyAbiFeatureCompare f1 f2 = LT))
    let (<=) = fun f1 -> (fun f2 -> Set.member (anyAbiFeatureCompare f1 f2) {LT; EQ})
    let (>) = fun f1 -> (fun f2 -> (anyAbiFeatureCompare f1 f2 = GT))
    let (>=) = fun f1 -> (fun f2 -> Set.member (anyAbiFeatureCompare f1 f2) {GT; EQ})
end

let anyAbiFeatureToNaturalList af = match af with 
    Amd64AbiFeature(aaf) -> amd64AbiFeatureConstructorToNaturalList aaf
    |  Aarch64LeAbiFeature(aaf) -> aarch64LeAbiFeatureConstructorToNaturalList aaf
end

instance (ToNaturalList any_abi_feature)
    let toNaturalList = anyAbiFeatureToNaturalList
end
