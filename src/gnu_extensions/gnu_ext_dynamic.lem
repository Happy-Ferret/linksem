open import Basic_classes
open import Bool
open import Num

open import Error

open import Elf_dynamic

(** Additional dynamic entries, see LSB section 11.3.2.2.
  * All values taken from elf.c from binutils and GLIBC as the LSB does not
  * specify them.
  *
  *  98 #define OLD_DT_LOOS     0x60000000
  *  99 #define DT_LOOS         0x6000000d
  * 100 #define DT_HIOS         0x6ffff000
  * 101 #define DT_VALRNGLO     0x6ffffd00
  * 102 #define DT_VALRNGHI     0x6ffffdff
  * 103 #define DT_ADDRRNGLO    0x6ffffe00
  * 104 #define DT_ADDRRNGHI    0x6ffffeff
  * 105 #define DT_VERSYM       0x6ffffff0
  * 106 #define DT_RELACOUNT    0x6ffffff9
  * 107 #define DT_RELCOUNT     0x6ffffffa
  * 108 #define DT_FLAGS_1      0x6ffffffb
  * 109 #define DT_VERDEF       0x6ffffffc
  * 110 #define DT_VERDEFNUM    0x6ffffffd
  * 111 #define DT_VERNEED      0x6ffffffe
  * 112 #define DT_VERNEEDNUM   0x6fffffff
  * 113 #define OLD_DT_HIOS     0x6fffffff
  * 114 #define DT_LOPROC       0x70000000
  * 115 #define DT_HIPROC       0x7fffffff
  *)

let elf_dt_gnu_addrrnghi  : natural = (939523967 * 2) + 1  (*0x6ffffeff*)
let elf_dt_gnu_addrrnglo  : natural = 939523840 * 2        (*0x6ffffe00*)
let elf_dt_gnu_auxiliary  : natural = (1073741822 * 2) + 1 (*0x7ffffffd*)
let elf_dt_gnu_filter     : natural = (1073741823 * 2) + 1 (*0x7fffffff*)
(** The following is "specified" in the LSB document but is not present in the
  * elf.c file so taken from elf.h from GLIBC:
  *)
let elf_dt_gnu_num        : natural = 32 (** ??? This should match something *)
let elf_dt_gnu_posflag_1  : natural = (939523838 * 2) + 1 (*0x6ffffdfd*)
let elf_dt_gnu_relcount   : natural = 939524093 * 2       (*0x6ffffffa*)
let elf_dt_gnu_relacount  : natural = (939524092 * 2) + 1 (*0x6FFFFFF9*)
let elf_dt_gnu_syminent   : natural = (939523839 * 2) + 1 (*0x6ffffdff*)
let elf_dt_gnu_syminfo    : natural = (939523967 * 2) + 1 (*0x6ffffeff*)
let elf_dt_gnu_syminsz    : natural = 939523839 * 2       (*0x6ffffdfe*)
let elf_dt_gnu_valrnghi   : natural = (939523839 * 2) + 1 (*0x6ffffdff*)
let elf_dt_gnu_valrnglo   : natural = (939523712 * 2)     (*0x6ffffd00*)
let elf_dt_gnu_verdef     : natural = 939524094 * 2       (*0x6ffffffc*)
let elf_dt_gnu_verdefnum  : natural = (939524094 * 2) + 1 (*0x6ffffffd*)
let elf_dt_gnu_verneed    : natural = 939524095 * 2       (*0x6ffffffe*)
let elf_dt_gnu_verneednum : natural = (939524095 * 2) + 1 (*0x6fffffff*)
let elf_dt_gnu_versym     : natural = 939524088 * 2       (*0x6ffffff0*)

(** Not present in the LSB but turns up in "real" ELF files... *)

let elf_dt_gnu_hash    : natural = (939523962 * 2) + 1  (*0x6ffffef5*)
let elf_dt_gnu_flags_1 : natural = (939524093 * 2) + 1  (*0x6ffffffb*)

val gnu_ext_os_ranges : natural -> bool
let gnu_ext_os_ranges m =
  m = 

val gnu_ext_os_additional_ranges : natural -> bool
let gnu_ext_os_additional_ranges m =
  if m >= elf_dt_gnu_addrrnglo && m <= elf_dt_gnu_addrrnghi then
    true
  else (* ad hoc extensions go here... *)
    m = elf_dt_gnu_verneed ||
    m = elf_dt_gnu_verneednum ||
    m = elf_dt_gnu_versym ||
    m = elf_dt_gnu_flags_1 ||
    m = elf_dt_gnu_relcount ||
    m = elf_dt_gnu_relacount

val gnu_ext_tag_correspondence_of_tag0 : natural -> error tag_correspondence
let gnu_ext_tag_correspondence_of_tag0 m =
  if m = elf_dt_gnu_hash then
    return C_Ptr
  else if m = elf_dt_gnu_flags_1 then
    return C_Val
  else if m = elf_dt_gnu_versym then
    return C_Ptr
  else if m = elf_dt_gnu_verneednum then
    return C_Val
  else if m = elf_dt_gnu_verneed then
    return C_Ptr
  else if m = elf_dt_gnu_relcount then
    return C_Val
  else if m = elf_dt_gnu_relacount then
    return C_Val
  else
    fail "gnu_ext_tag_correspondence_of_tag0: invalid dynamic tag"

val gnu_ext_tag_correspondence_of_tag : natural -> (natural -> bool) -> (natural -> error tag_correspondence) -> error tag_correspondence
let gnu_ext_tag_correspondence_of_tag m os_additional_ranges arch =
  if m >= elf_dt_gnu_addrrnglo && m <= elf_dt_gnu_addrrnghi then
    arch m
  else if m >= elf_dt_gnu_valrnglo && m <= elf_dt_gnu_valrnghi then
    return C_Val
  else if os_additional_ranges m then
    arch m
  else if m = elf_dt_gnu_verdefnum then
    return C_Val
  else if m = elf_dt_gnu_verdef then
    return C_Ptr
  else if m = elf_dt_gnu_syminsz then
    return C_Val (** unsure *)
  else if m = elf_dt_gnu_syminfo then
    return C_Ptr (** unsure *)
  else if m = elf_dt_gnu_syminent then
    return C_Val (** unsure *)
  else if m = elf_dt_gnu_posflag_1 then
    return C_Val (** unsure *)
  else if m = elf_dt_gnu_num then
    return C_Ignored
  else if m = elf_dt_gnu_filter then
    return C_Val (** unsure *)
  else if m = elf_dt_gnu_auxiliary then
    return C_Val (** unsure *)
  else
    fail "gnu_ext_tag_correspondence_of_tag: unrecognised GNU dynamic tag"
    
val gnu_ext_elf32_value_of_elf32_dyn : elf32_dyn -> string_table -> error elf32_dyn_value
let gnu_ext_elf32_value_of_elf32_dyn dyn stab =
  let tag = naturalFromInteger (integer_of_elf32_sword dyn.elf32_dyn_tag) in
    if tag = 
    
val string_of_gnu_ext_dynamic_tag0 : natural -> string
let {ocaml} string_of_gnu_ext_dynamic_tag0 m =
  if m = elf_dt_gnu_hash then
    "GNU_HASH"
  else if m = elf_dt_gnu_flags_1 then
    "FLAGS_1"
  else if m = elf_dt_gnu_versym then
    "VERSYM"
  else if m = elf_dt_gnu_verneednum then
    "VERNEEDNUM"
  else if m = elf_dt_gnu_verneed then
    "VERNEED"
  else if m = elf_dt_gnu_relcount then
    "RELCOUNT"
  else if m = elf_dt_gnu_relacount then
    "RELACOUNT"
  else
    "Invalid dynamic tag"
    
val string_of_gnu_ext_dynamic_tag : natural -> (natural -> bool) -> (natural -> string) -> string
let {ocaml} string_of_gnu_ext_dynamic_tag m os_additional_ranges arch =
  if m >= elf_dt_gnu_addrrnglo && m <= elf_dt_gnu_addrrnghi then
    arch m
  else if m >= elf_dt_gnu_valrnglo && m <= elf_dt_gnu_valrnghi then
    arch m
  else if os_additional_ranges m then
    arch m
  else if m = elf_dt_gnu_verdefnum then
    "VERDEFNUM"
  else if m = elf_dt_gnu_verdef then
    "VERDEF"
  else if m = elf_dt_gnu_syminsz then
    "SYMINSZ"
  else if m = elf_dt_gnu_syminfo then
    "SYMINFO"
  else if m = elf_dt_gnu_syminent then
    "SYMINENT"
  else if m = elf_dt_gnu_posflag_1 then
    "POSFLAG_1"
  else if m = elf_dt_gnu_num then
    "NUM"
  else if m = elf_dt_gnu_filter then
    "FILTER"
  else if m = elf_dt_gnu_auxiliary then
    "AUXILIARY"
  else
    "Invalid dynamic tag"
