open import Function
open import String
open import Tuple

open import Byte_sequence
open import Default_printing
open import Error
open import Missing_pervasives
open import Show

open import Elf_header
open import Elf_file1
open import Elf_executable_file2
open import Elf_executable_file3
open import Elf_linking_file2
open import Elf_linking_file3

open import Sail_interface

let default_hdr_bdl =
  (default_os_specific_print, default_proc_specific_print)

let default_pht_bdl =
  (default_os_specific_print, default_proc_specific_print)

let default_sht_bdl =
  (default_os_specific_print, default_proc_specific_print, default_user_specific_print)

let _ =
  let res =
    Byte_sequence.acquire "test/a.out" >>= fun bs0 ->
    let _ = Missing_pervasives.print (show bs0) in
    Elf_file1.read_elf32_file1 bs0 >>= fun f1 ->
    let _ = Missing_pervasives.print (Elf_file1.string_of_elf32_file1 default_hdr_bdl f1) in
    let bytes = Elf_header.bytes_of_elf32_header f1.elf32_file1_header in
    Byte_sequence.serialise "test/usr-bin-ld.out" bytes >>= fun res ->
    return res
  in
    match res with
      | Fail err  -> Missing_pervasives.print ("[!]: " ^ err)
      | Success e -> Missing_pervasives.print ("Success..." ^ show e)
    end
