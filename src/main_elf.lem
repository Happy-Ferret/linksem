open import Function
open import String
open import Tuple

open import Bitstring
open import Default_printing
open import Error
open import Missing_pervasives
open import Show

open import Elf_header
open import Elf_file1
open import Elf_executable_file2
open import Elf_executable_file3
open import Elf_linking_file2
open import Elf_linking_file3

open import Sail_interface

let default_hdr_bdl =
  (default_os_specific_print, default_proc_specific_print)

let default_pht_bdl =
  (default_os_specific_print, default_proc_specific_print)

let default_sht_bdl =
  (default_os_specific_print, default_proc_specific_print, default_user_specific_print)

let _ =
  let res =
    Bitstring.acquire "test/a.out" >>= fun bs0 ->
    Elf_executable_file3.read_elf32_executable_file3 bs0 >>= fun f1 ->
    if Elf_program_header_table.get_elf32_static_linked f1.elf32_executable_file3_program_header_table then
      Elf_executable_file3.get_elf32_symbol_table f1 >>= fun symtab ->
      Elf_executable_file3.get_elf32_symbol_string_table f1 >>= fun strtab ->
      Elf_symbol_table.get_elf32_symbol_image_address symtab strtab >>= fun syms ->
      let _ = Missing_pervasives.print (show syms) in
      Elf_executable_file3.get_elf32_global_symbol_init f1 >>= fun init ->
      let _ = Missing_pervasives.print (show init) in
      return f1
    else
      fail "Not statically linked"
  in
    match res with
      | Fail err -> Missing_pervasives.print ("[!]: " ^ err)
      | Success _ -> Missing_pervasives.print "Success..."
    end
