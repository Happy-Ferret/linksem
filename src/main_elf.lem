open import Basic_classes
open import Function
open import Maybe
open import Num
open import String
open import Tuple

open import Byte_sequence
open import Default_printing
open import Error
open import Missing_pervasives
open import Show
open import Assert_extra

open import Endianness

open import Elf_header
open import Elf_file
open import Elf_program_header_table
open import Elf_types_native_uint

open import Harness_interface
open import Sail_interface

open import Abi_amd64_elf_header
open import Abi_amd64_serialisation

let default_hdr_bdl =
  (default_os_specific_print, default_proc_specific_print)

let default_pht_bdl =
  (default_os_specific_print, default_proc_specific_print)

let default_sht_bdl =
  (default_os_specific_print, default_proc_specific_print, default_user_specific_print)

let _ =
  let res =
    let (flag, arg) =
      match argv with
        | progname::flag::fname::more -> (flag, fname)
        | _                           -> failwith "usage: main_elf <flag> <fname>"
      end
    in
    Byte_sequence.acquire arg    >>= fun bs0 ->
    repeatM' Elf_header.ei_nident bs0 (read_unsigned_char Endianness.default_endianness) >>= fun (ident, bs) ->
    match List.index ident 4 with
      | Nothing -> failwith "ELF ident transcription error"
      | Just c  ->
        if natural_of_unsigned_char c = Elf_header.elf_class_32 then
          Elf_file.read_elf32_file bs0 >>= fun f1  ->
          get_elf32_file_section_header_string_table f1 >>= fun stbl ->
            let ret =
              if flag = "--file-header" then
                Harness_interface.harness_string_of_elf32_file_header f1.elf32_file_header
              else if flag = "--program-headers" then
                Harness_interface.harness_string_of_elf32_program_headers
                  (fun x -> (* XXX: GNU specific, move elsewhere *)
                    if x = 4 * 421345620 then
                      "GNU_EH_FRAME"
                    else if x = (4 * 421345620) + 1 then
                      "GNU_STACK"
                    else if x = (4 * 421345620) + 2 then
                      "GNU_RELRO"
                    else
                      show x)
                  (fun x ->
                    show x)
                  f1.elf32_file_header
                  f1.elf32_file_program_header_table
                  f1.elf32_file_section_header_table
                  stbl
                  bs0
              else if flag = "--section-headers" then
                Harness_interface.harness_string_of_elf32_section_headers
                  (fun x -> (* XXX: GNU specific, move elsewhere *)
                    if x = 2 * 939524091 then
                      "GNU_HASH"
                    else if x = 2 * 939524095 then
                      "VERNEED"
                    else if x = (2 * 939524095) + 1 then
                      "VERSYM"
                    else
                      show x)
                  (fun x -> show x)
                  (fun x -> show x)
                  f1.elf32_file_header
                  f1.elf32_file_section_header_table
                  stbl
              else
                failwith "Unrecognised flag"
            in
              return ret
        else if natural_of_unsigned_char c = Elf_header.elf_class_64 then
          Elf_file.read_elf64_file bs0 >>= fun f1  ->
          get_elf64_file_section_header_string_table f1 >>= fun stbl ->
            let ret =
              if flag = "--file-header" then
                Harness_interface.harness_string_of_elf64_file_header f1.elf64_file_header
              else if flag = "--program-headers" then
                Harness_interface.harness_string_of_elf64_program_headers
                  (fun x -> (* XXX: GNU specific, move elsewhere *)
                    if x = 4 * 421345620 then
                      "GNU_EH_FRAME"
                    else if x = (4 * 421345620) + 1 then
                      "GNU_STACK"
                    else if x = (4 * 421345620) + 2 then
                      "GNU_RELRO"
                    else
                      show x)
                  (fun x ->
                    show x)
                  f1.elf64_file_header
                  f1.elf64_file_program_header_table
                  f1.elf64_file_section_header_table
                  stbl
                  bs0
              else if flag = "--section-headers" then
                Harness_interface.harness_string_of_elf64_section_headers
                  (fun x -> (* XXX: GNU specific, move elsewhere *)
                    if x = 2 * 939524091 then
                      "GNU_HASH"
                    else if x = 2 * 939524095 then
                      "VERNEED"
                    else if x = (2 * 939524095) + 1 then
                      "VERSYM"
                    else
                      show x)
                  (fun x -> show x)
                  (fun x -> show x)
                  f1.elf64_file_header
                  f1.elf64_file_section_header_table
                  stbl
              else
                failwith "Unimplemented (for ELF64) or unrecognised flag"
            in
              return ret
        else
          failwith "ELF ident transcription error"
    end
  in
    match res with
      | Fail err  -> Missing_pervasives.println ("[!]: " ^ err)
      | Success e -> Missing_pervasives.println (show e)
    end
