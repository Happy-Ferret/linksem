open import Basic_classes
open import List
open import Maybe
open import Num

open import Elf_executable_file4
open import Elf_header
open import Elf_interpreted_segment
open import Elf_program_header_table
open import Elf_section_header_table
open import Elf_types
open import String_table

open import Bitstring
open import Error
open import Missing_pervasives
open import Show
open import String

type elf32_executable_file5 =
  <| elf32_executable_file5_header                      : elf32_header (** The ELF header (mandatory) *)
   ; elf32_executable_file5_program_header_table        : elf32_program_header_table (** The program header table (mandatory) *)
   ; elf32_executable_file5_section_header_table        : maybe elf32_section_header_table (** The section header table (optional) *)
   ; elf32_executable_file5_section_header_string_table : string_table (** The section header string table *)
   ; elf32_executable_file5_segments                    : list elf32_interpreted_segment (** The list of segments as described by the program header table *)
   ; elf32_executable_file5_body                        : bitstring (** Uninterpreted body *)
   |>

class (HasElf32ExecutableFile5 'a)
  val get_elf32_executable_file5 : 'a -> elf32_executable_file5
end

instance (HasElf32ExecutableFile5 elf32_executable_file5)
  let get_elf32_executable_file5 f5 = f5
end

instance (HasElf32ExecutableFile4 elf32_executable_file5)
  let get_elf32_executable_file4 f5 =
    <| elf32_executable_file4_header = f5.elf32_executable_file5_header;
         elf32_executable_file4_program_header_table = f5.elf32_executable_file5_program_header_table;
         elf32_executable_file4_section_header_table = f5.elf32_executable_file5_section_header_table;
         elf32_executable_file4_section_header_string_table = f5.elf32_executable_file5_section_header_string_table;
         elf32_executable_file4_body = f5.elf32_executable_file5_body |>
end

instance (HasElf32Header elf32_executable_file5)
  let get_elf32_header f5 = f5.elf32_executable_file5_header
end

instance (HasElf32ProgramHeaderTable elf32_executable_file5)
  let get_elf32_program_header_table f5 = Just (f5.elf32_executable_file5_program_header_table)
end

instance (HasElf32SectionHeaderTable elf32_executable_file5)
  let get_elf32_section_header_table f5 = f5.elf32_executable_file5_section_header_table
end

instance (HasElf32SectionHeaderStringTable elf32_executable_file5)
  let get_elf32_section_header_string_table f5 = f5.elf32_executable_file5_section_header_string_table
end

val refine_elf32_executable_file4 : elf32_executable_file4 -> error elf32_executable_file5
let refine_elf32_executable_file4 f4 =
  let pht  = f4.elf32_executable_file4_program_header_table in
  let bdy  = f4.elf32_executable_file4_body in
  let segs =
    List.map (fun ph ->
      let offset   = nat_of_elf32_off ph.elf32_p_offset  in
      let size     = nat_of_elf32_word ph.elf32_p_filesz in
      let relevant = Bitstring.offset_and_cut offset size bdy in
      let vaddr    = nat_of_elf32_addr ph.elf32_p_vaddr  in
      let memsz    = nat_of_elf32_word ph.elf32_p_memsz  in
      let typ      = nat_of_elf32_word ph.elf32_p_type   in
      let flags    = interpret_program_header_flags ph.elf32_p_flags in
        <| elf32_segment_body = relevant;
             elf32_segment_type = typ;
             elf32_segment_size = size;
             elf32_segment_memsz = memsz;
             elf32_segment_base  = vaddr;
             elf32_segment_flags = flags |>
    ) pht
  in
  let segs =
    mapM (fun sg ->
      if sg.elf32_segment_memsz < sg.elf32_segment_size then
        Fail "refine_elf32_executable_file4: memory size of segment cannot be less than file size"
      else
        return sg) segs
  in
    segs >>= fun segs ->
    return <|
      elf32_executable_file5_header = f4.elf32_executable_file4_header;
      elf32_executable_file5_program_header_table = f4.elf32_executable_file4_program_header_table;
      elf32_executable_file5_section_header_table = f4.elf32_executable_file4_section_header_table;
      elf32_executable_file5_section_header_string_table = f4.elf32_executable_file4_section_header_string_table;
      elf32_executable_file5_segments = segs;
      elf32_executable_file5_body = f4.elf32_executable_file4_body |>

val read_elf32_executable_file5 : bitstring -> error elf32_executable_file5
let read_elf32_executable_file5 bs0 =
  read_elf32_executable_file4 bs0 >>= refine_elf32_executable_file4