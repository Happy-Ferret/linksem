open import Function
open import List
open import Num
open import String

open import Missing_pervasives

class (Show 'a)
  val show : 'a -> string
end

let bool_show b =
  match b with
    | true  -> "true"
    | false -> "false"
  end

instance (Show bool)
  let show = bool_show
end

instance (Show string)
  let show = id
end

let pair_show (left, right) =
  "(" ^ show left ^ ", " ^ show right ^ ")"

instance forall 'a 'b. Show 'a, Show 'b => (Show ('a * 'b))
  let show = pair_show
end

let listShow l =
  let result = intercalate "; " (map show l) in
  let folded = foldr (^) "" result in
    "[" ^ folded ^ "]"

instance forall 'a. Show 'a => (Show (list 'a))
	let show = listShow
end

let nat_show =
  string_of_nat

instance (Show nat)
	let show = nat_show
end
