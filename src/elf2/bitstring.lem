open import Basic_classes
open import Bool
open import Num
open import Show

open import Error

type bitstring

declare ocaml target_rep type bitstring = `Bitstring.bitstring`

val empty : bitstring

declare ocaml target_rep function empty = `Bitstring.empty`

val acquire : string -> error bitstring

declare ocaml target_rep function acquire = `Ml_bindings.acquire_bitstring`

val length : bitstring -> nat

declare ocaml target_rep function length = `Bitstring.bitstring_length`

val partition : nat -> bitstring -> (bitstring * bitstring)

declare ocaml target_rep function partition = `Ml_bindings.partition_bitstring`

val equal : bitstring -> bitstring -> bool

declare ocaml target_rep function equal = unsafe_structural_equality

val string_of_bitstring : bitstring -> string

declare ocaml target_rep function string_of_bitstring = `Bitstring.string_of_bitstring`

instance (Eq bitstring)
  let (=) = equal
  let (<>) l r = not (equal l r)
end

instance (Show bitstring)
  let show = string_of_bitstring
end
