Beneath the surface, software usually depends on complex *linker behaviour* to work as intended.  Even linking hello_world.c is surprisingly involved, and systems software such as libc and operating system kernels rely on a host of linker features.  But linking is poorly understood by working programmers and has largely been neglected by language researchers.


In this paper we survey the many use-cases that linkers support and the poorly specified *linker speak* by which they are controlled: metadata in object files, command-line options, and linker-script language.  We provide the first validated formalisation of a realistic executable and linkable format (ELF), and capture aspects of the Application Binary Interfaces for four mainstream platforms (AArch64, AMD64, Power64, and x86).  Using these, we develop an executable specification of linking, covering (among other things) enough to link hello_world.c into a correctly running executable.  We provide our specification in Lem and Isabelle/HOL forms.  This is the first formal specification of mainstream linking. Our work should enable several novel strands of research, including linker-aware program analysis, verified compilation, and better languages for controlling linking.
