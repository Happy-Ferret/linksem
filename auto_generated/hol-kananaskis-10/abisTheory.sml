structure abisTheory :> abisTheory =
struct
  val _ = if !Globals.print_thy_loads then print "Loading abisTheory ... " else ()
  open Type Term Thm
  infixr -->

  fun C s t ty = mk_thy_const{Name=s,Thy=t,Ty=ty}
  fun T s t A = mk_thy_type{Tyop=s, Thy=t,Args=A}
  fun V s q = mk_var(s,q)
  val U     = mk_vartype
  (*  Parents *)
  local open abi_aarch64_leTheory abi_amd64Theory abi_power64Theory
             abi_power64_relocationTheory
  in end;
  val _ = Theory.link_parents
          ("abis",
          Arbnum.fromString "1445006464",
          Arbnum.fromString "783045")
          [("abi_power64_relocation",
           Arbnum.fromString "1445006411",
           Arbnum.fromString "830038"),
           ("abi_power64",
           Arbnum.fromString "1445006338",
           Arbnum.fromString "884666"),
           ("abi_amd64",
           Arbnum.fromString "1445006277",
           Arbnum.fromString "911206"),
           ("abi_aarch64_le",
           Arbnum.fromString "1445006177",
           Arbnum.fromString "723483")];
  val _ = Theory.incorporate_types "abis" [("any_abi_feature", 0)];

  val idvector = 
    let fun ID(thy,oth) = {Thy = thy, Other = oth}
    in Vector.fromList
  [ID("memory_image", "abi"), ID("abis", "any_abi_feature"),
   ID("min", "fun"), ID("elf_header", "elf64_header"), ID("num", "num"),
   ID("min", "bool"), ID("abi_utilities", "relocation_operator"),
   ID("abi_utilities", "relocation_operator2"),
   ID("memory_image", "ToNaturalList_class"),
   ID("lem_basic_classes", "Ord_class"),
   ID("abi_aarch64_le", "aarch64_le_abi_feature"),
   ID("abi_amd64", "amd64_abi_feature"), ID("list", "list"),
   ID("lem_basic_classes", "ordering"), ID("ind_type", "recspace"),
   ID("pair", "prod"), ID("memory_image", "annotated_memory_image"),
   ID("elf_interpreted_section", "elf64_interpreted_section"),
   ID("string", "char"), ID("bool", "!"), ID("arithmetic", "*"),
   ID("arithmetic", "+"), ID("pair", ","), ID("bool", "/\\"),
   ID("num", "0"), ID("prim_rec", "<"), ID("min", "="), ID("min", "==>"),
   ID("arithmetic", ">"), ID("bool", "?"), ID("bool", "ARB"),
   ID("abis", "Aarch64LeAbiFeature"), ID("abis", "Amd64AbiFeature"),
   ID("arithmetic", "BIT1"), ID("arithmetic", "BIT2"),
   ID("ind_type", "BOTTOM"), ID("string", "CHR"), ID("bool", "COND"),
   ID("list", "CONS"), ID("fcp", "cart"), ID("fcp", "bit0"),
   ID("one", "one"), ID("ind_type", "CONSTR"), ID("bool", "DATATYPE"),
   ID("pred_set", "EMPTY"), ID("lem_basic_classes", "EQ"), ID("bool", "F"),
   ID("lem_basic_classes", "GT"), ID("bool", "IN"),
   ID("pred_set", "INSERT"), ID("combin", "K"),
   ID("memory_image", "symbol_reference_and_reloc_site"),
   ID("lem_basic_classes", "LT"), ID("list", "NIL"),
   ID("arithmetic", "NUMERAL"),
   ID("lem_basic_classes", "Ord_class_compare_method_fupd"),
   ID("lem_basic_classes", "Ord_class_isGreaterEqual_method_fupd"),
   ID("lem_basic_classes", "Ord_class_isGreater_method_fupd"),
   ID("lem_basic_classes", "Ord_class_isLessEqual_method_fupd"),
   ID("lem_basic_classes", "Ord_class_isLess_method_fupd"),
   ID("num", "SUC"), ID("bool", "T"), ID("bool", "TYPE_DEFINITION"),
   ID("memory_image", "ToNaturalList_class_toNaturalList_method_fupd"),
   ID("arithmetic", "ZERO"), ID("bool", "\\/"),
   ID("abi_aarch64_le", "aarch64LeAbiFeatureConstructorToNaturalList"),
   ID("abi_aarch64_le", "aarch64_le_abi_feature_size"),
   ID("abi_aarch64_relocation", "aarch64_le_reloc"),
   ID("abi_aarch64_le", "abiFeatureCompare"),
   ID("abi_amd64", "abiFeatureCompare0"),
   ID("memory_image", "abi_commonpagesize_fupd"),
   ID("memory_image", "abi_is_valid_elf_header_fupd"),
   ID("memory_image", "abi_make_elf_header_fupd"),
   ID("memory_image", "abi_maxpagesize_fupd"),
   ID("memory_image", "abi_minpagesize_fupd"),
   ID("memory_image", "abi_reloc_fupd"),
   ID("memory_image", "abi_section_is_large_fupd"),
   ID("memory_image", "abi_section_is_special_fupd"),
   ID("memory_image", "abi_symbol_is_generated_by_linker_fupd"),
   ID("abis", "all_abis"),
   ID("abi_amd64", "amd64AbiFeatureConstructorToNaturalList"),
   ID("abi_amd64", "amd64_abi_feature_size"),
   ID("abi_amd64_relocation", "amd64_reloc"),
   ID("abis", "anyAbiFeatureCompare"),
   ID("abis", "anyAbiFeatureToNaturalList"),
   ID("abis", "any_abi_feature_CASE"), ID("abis", "any_abi_feature_size"),
   ID("elf_header", "elf64_header_elf64_ehsize_fupd"),
   ID("elf_header", "elf64_header_elf64_entry_fupd"),
   ID("elf_header", "elf64_header_elf64_flags_fupd"),
   ID("elf_header", "elf64_header_elf64_ident_fupd"),
   ID("elf_header", "elf64_header_elf64_machine_fupd"),
   ID("elf_header", "elf64_header_elf64_phentsize_fupd"),
   ID("elf_header", "elf64_header_elf64_phnum_fupd"),
   ID("elf_header", "elf64_header_elf64_phoff_fupd"),
   ID("elf_header", "elf64_header_elf64_shentsize_fupd"),
   ID("elf_header", "elf64_header_elf64_shnum_fupd"),
   ID("elf_header", "elf64_header_elf64_shoff_fupd"),
   ID("elf_header", "elf64_header_elf64_shstrndx_fupd"),
   ID("elf_header", "elf64_header_elf64_type_fupd"),
   ID("elf_header", "elf64_header_elf64_version_fupd"),
   ID("elf_interpreted_section", "elf64_interpreted_section_elf64_section_flags"),
   ID("elf_header", "elf_class_64"), ID("elf_header", "elf_data_2lsb"),
   ID("elf_header", "elf_ev_current"), ID("elf_header", "elf_ma_aarch64"),
   ID("elf_header", "elf_ma_none"), ID("elf_header", "elf_ma_x86_64"),
   ID("elf_header", "elf_mn_mag0"), ID("elf_header", "elf_mn_mag1"),
   ID("elf_header", "elf_mn_mag2"), ID("elf_header", "elf_mn_mag3"),
   ID("elf_header", "elf_osabi_none"),
   ID("memory_image", "elf_section_is_special"), ID("lem", "failwith"),
   ID("elf_file", "flag_is_set"),
   ID("abi_aarch64_le", "header_is_aarch64_le"),
   ID("abi_amd64", "header_is_amd64"),
   ID("abis", "instance_Basic_classes_Ord_Abis_any_abi_feature_dict"),
   ID("abis", "instance_Memory_image_ToNaturalList_Abis_any_abi_feature_dict"),
   ID("abis", "is_valid_abi_aarch64_relocation_operator"),
   ID("abis", "is_valid_abi_aarch64_relocation_operator2"),
   ID("abis", "is_valid_abi_amd64_relocation_operator"),
   ID("abis", "is_valid_abi_amd64_relocation_operator2"),
   ID("abis", "is_valid_abi_power64_relocation_operator"),
   ID("abis", "is_valid_abi_power64_relocation_operator2"),
   ID("elf_header", "is_valid_elf64_header"), ID("list", "list_CASE"),
   ID("abis", "make_elf64_header"), ID("words", "n2w"),
   ID("memory_image", "noop_reloc"), ID("abis", "null_abi"),
   ID("pair", "pair_CASE"),
   ID("abi_utilities", "relocation_operator_CASE"),
   ID("abi_aarch64_le", "section_is_special0"),
   ID("abi_amd64", "shf_x86_64_large"),
   ID("abis", "sysv_aarch64_le_std_abi"), ID("abis", "sysv_amd64_std_abi"),
   ID("bool", "~")]
  end;
  local open SharingTables
  in
  val tyvector = build_type_vector idvector
  [TYOP [1], TYOP [0, 0], TYV "'a", TYOP [0, 2], TYOP [3], TYOP [4],
   TYOP [2, 5, 4], TYOP [2, 5, 6], TYOP [2, 5, 7], TYOP [2, 5, 8],
   TYOP [2, 5, 9], TYOP [2, 2, 10], TYOP [2, 5, 11], TYOP [2, 5, 12],
   TYOP [2, 5, 13], TYOP [2, 5, 14], TYOP [2, 5, 15], TYOP [5],
   TYOP [2, 2, 17], TYOP [6], TYOP [2, 19, 17], TYOP [7], TYOP [2, 21, 17],
   TYOP [8, 0], TYOP [9, 0], TYOP [2, 0, 5], TYOP [10], TYOP [2, 26, 2],
   TYOP [2, 27, 2], TYOP [11], TYOP [2, 29, 2], TYOP [2, 30, 28],
   TYOP [2, 0, 31], TYOP [12, 5], TYOP [2, 0, 33], TYOP [13],
   TYOP [2, 0, 35], TYOP [2, 0, 36], TYOP [12, 1], TYOP [2, 29, 0],
   TYOP [2, 26, 0], TYOP [15, 29, 26], TYOP [14, 41], TYOP [2, 42, 17],
   TYOP [2, 0, 17], TYOP [16, 2], TYOP [2, 40, 17], TYOP [2, 39, 46],
   TYOP [17], TYOP [16, 0], TYOP [2, 0, 2], TYOP [2, 0, 42], TYOP [18],
   TYOP [12, 52], TYOP [2, 18, 17], TYOP [2, 26, 17], TYOP [2, 55, 17],
   TYOP [2, 29, 17], TYOP [2, 57, 17], TYOP [2, 44, 17], TYOP [2, 27, 17],
   TYOP [2, 60, 17], TYOP [2, 30, 17], TYOP [2, 62, 17], TYOP [2, 59, 17],
   TYOP [2, 43, 17], TYOP [2, 65, 17], TYOP [2, 5, 17], TYOP [2, 67, 17],
   TYOP [2, 20, 17], TYOP [2, 22, 17], TYOP [2, 5, 5], TYOP [2, 5, 71],
   TYOP [2, 26, 41], TYOP [2, 29, 73], TYOP [15, 0, 0], TYOP [2, 0, 75],
   TYOP [2, 0, 76], TYOP [15, 33, 33], TYOP [2, 33, 78], TYOP [2, 33, 79],
   TYOP [2, 17, 17], TYOP [2, 17, 81], TYOP [2, 5, 67], TYOP [2, 2, 18],
   TYOP [2, 24, 17], TYOP [2, 24, 85], TYOP [2, 23, 17], TYOP [2, 23, 87],
   TYOP [2, 26, 55], TYOP [2, 3, 17], TYOP [2, 3, 90], TYOP [2, 1, 17],
   TYOP [2, 1, 92], TYOP [2, 29, 57], TYOP [2, 0, 44], TYOP [2, 4, 17],
   TYOP [2, 4, 96], TYOP [2, 38, 17], TYOP [2, 38, 98], TYOP [2, 53, 17],
   TYOP [2, 53, 100], TYOP [2, 33, 17], TYOP [2, 33, 102],
   TYOP [2, 35, 17], TYOP [2, 35, 104], TYOP [2, 42, 43], TYOP [2, 50, 17],
   TYOP [2, 107, 17], TYOP [2, 51, 17], TYOP [2, 109, 17], TYOP [2, 5, 52],
   TYOP [2, 35, 35], TYOP [2, 35, 112], TYOP [2, 17, 113],
   TYOP [2, 38, 38], TYOP [2, 1, 115], TYOP [41], TYOP [40, 117],
   TYOP [40, 118], TYOP [40, 119], TYOP [39, 17, 120], TYOP [12, 121],
   TYOP [2, 122, 122], TYOP [2, 121, 123], TYOP [2, 53, 53],
   TYOP [2, 52, 125], TYOP [2, 33, 33], TYOP [2, 5, 127], TYOP [2, 5, 42],
   TYOP [2, 129, 42], TYOP [2, 41, 130], TYOP [2, 5, 131],
   TYOP [2, 104, 17], TYOP [2, 35, 133], TYOP [2, 104, 104],
   TYOP [2, 35, 135], TYOP [40, 120], TYOP [40, 137], TYOP [40, 138],
   TYOP [39, 17, 139], TYOP [2, 140, 140], TYOP [2, 140, 141],
   TYOP [39, 17, 138], TYOP [2, 143, 143], TYOP [2, 143, 144],
   TYOP [39, 17, 137], TYOP [2, 146, 146], TYOP [2, 146, 147],
   TYOP [2, 95, 95], TYOP [2, 95, 149], TYOP [2, 37, 37],
   TYOP [2, 37, 151], TYOP [2, 34, 34], TYOP [2, 34, 153],
   TYOP [2, 96, 96], TYOP [2, 96, 155], TYOP [2, 45, 17],
   TYOP [2, 48, 157], TYOP [2, 158, 158], TYOP [2, 158, 159],
   TYOP [2, 49, 17], TYOP [2, 48, 161], TYOP [2, 162, 162],
   TYOP [2, 162, 163], TYOP [2, 100, 100], TYOP [2, 100, 165],
   TYOP [2, 5, 10], TYOP [2, 5, 167], TYOP [2, 168, 168],
   TYOP [2, 168, 169], TYOP [2, 5, 72], TYOP [15, 5, 171], TYOP [51],
   TYOP [2, 173, 172], TYOP [2, 45, 174], TYOP [15, 17, 175],
   TYOP [2, 5, 176], TYOP [2, 177, 177], TYOP [2, 177, 178],
   TYOP [2, 49, 174], TYOP [15, 17, 180], TYOP [2, 5, 181],
   TYOP [2, 182, 182], TYOP [2, 182, 183], TYOP [2, 122, 123],
   TYOP [2, 24, 24], TYOP [2, 151, 186], TYOP [2, 149, 186],
   TYOP [2, 43, 109], TYOP [2, 23, 23], TYOP [2, 153, 190],
   TYOP [2, 26, 33], TYOP [2, 26, 5], TYOP [2, 26, 35], TYOP [2, 26, 194],
   TYOP [2, 29, 35], TYOP [2, 29, 196], TYOP [2, 3, 3], TYOP [2, 71, 198],
   TYOP [2, 1, 1], TYOP [2, 71, 200], TYOP [2, 155, 198],
   TYOP [2, 155, 200], TYOP [2, 169, 198], TYOP [2, 169, 200],
   TYOP [2, 178, 198], TYOP [2, 183, 200], TYOP [2, 159, 198],
   TYOP [2, 163, 200], TYOP [2, 165, 198], TYOP [2, 165, 200],
   TYOP [2, 29, 33], TYOP [2, 29, 5], TYOP [2, 23, 182], TYOP [2, 24, 214],
   TYOP [2, 192, 33], TYOP [2, 212, 216], TYOP [2, 0, 217],
   TYOP [2, 194, 35], TYOP [2, 196, 219], TYOP [2, 0, 220], TYOP [2, 4, 4],
   TYOP [2, 147, 222], TYOP [2, 141, 222], TYOP [2, 144, 222],
   TYOP [2, 123, 222], TYOP [2, 48, 5], TYOP [2, 53, 35], TYOP [2, 33, 35],
   TYOP [2, 5, 229], TYOP [2, 230, 35], TYOP [2, 35, 231],
   TYOP [2, 33, 232], TYOP [2, 5, 168], TYOP [2, 5, 234], TYOP [2, 5, 235],
   TYOP [2, 5, 236], TYOP [2, 5, 140], TYOP [2, 5, 143], TYOP [2, 5, 146],
   TYOP [2, 5, 121], TYOP [2, 37, 35], TYOP [2, 75, 242],
   TYOP [2, 33, 229], TYOP [2, 244, 35], TYOP [2, 78, 245],
   TYOP [2, 17, 82], TYOP [2, 17, 247], TYOP [2, 17, 248],
   TYOP [2, 17, 249], TYOP [2, 17, 250], TYOP [2, 17, 251],
   TYOP [2, 17, 252], TYOP [2, 17, 253], TYOP [2, 17, 254],
   TYOP [2, 17, 255], TYOP [2, 17, 256], TYOP [2, 17, 257],
   TYOP [2, 17, 258], TYOP [2, 17, 259], TYOP [2, 17, 260],
   TYOP [2, 17, 261], TYOP [2, 17, 262], TYOP [2, 17, 263],
   TYOP [2, 17, 264], TYOP [2, 19, 265]]
  end
  val _ = Theory.incorporate_consts "abis" tyvector
     [("sysv_amd64_std_abi", 1), ("sysv_aarch64_le_std_abi", 3),
      ("null_abi", 3), ("make_elf64_header", 16),
      ("is_valid_abi_power64_relocation_operator2", 18),
      ("is_valid_abi_power64_relocation_operator", 18),
      ("is_valid_abi_amd64_relocation_operator2", 18),
      ("is_valid_abi_amd64_relocation_operator", 20),
      ("is_valid_abi_aarch64_relocation_operator2", 22),
      ("is_valid_abi_aarch64_relocation_operator", 20),
      ("instance_Memory_image_ToNaturalList_Abis_any_abi_feature_dict", 23),
      ("instance_Basic_classes_Ord_Abis_any_abi_feature_dict", 24),
      ("any_abi_feature_size", 25), ("any_abi_feature_CASE", 32),
      ("anyAbiFeatureToNaturalList", 34), ("anyAbiFeatureCompare", 37),
      ("all_abis", 38), ("Amd64AbiFeature", 39),
      ("Aarch64LeAbiFeature", 40)];

  local open SharingTables
  in
  val tmvector = build_term_vector idvector tyvector
  [TMV("'any_abi_feature'", 43), TMV("M", 0), TMV("M'", 0), TMV("P", 44),
   TMV("a", 26), TMV("a", 29), TMV("a", 45), TMV("a", 0), TMV("a'", 26),
   TMV("a'", 29), TMV("a0", 42), TMV("aa", 0), TMV("abiv", 5),
   TMV("af", 29), TMV("af'", 26), TMV("af1", 29), TMV("af1'", 26),
   TMV("af2", 29), TMV("af2'", 26), TMV("any_abi_feature", 47),
   TMV("data", 5), TMV("e", 48), TMV("entry", 2), TMV("f", 45),
   TMV("f", 49), TMV("f", 0), TMV("f", 30), TMV("f'", 30), TMV("f0", 30),
   TMV("f1", 0), TMV("f1", 27), TMV("f1'", 27), TMV("f2", 0),
   TMV("fn", 50), TMV("hd1", 5), TMV("hd2", 5), TMV("ma", 5), TMV("n", 5),
   TMV("op", 2), TMV("op", 19), TMV("op", 21), TMV("osabi", 5),
   TMV("phnum", 5), TMV("phoff", 5), TMV("rep", 51), TMV("s", 48),
   TMV("shnum", 5), TMV("shoff", 5), TMV("shstrndx", 5),
   TMV("symname", 53), TMV("t", 5), TMV("tl1", 33), TMV("tl2", 33),
   TMV("v", 33), TMV("v1", 33), TMV("v11", 26), TMV("v14", 29),
   TMV("v2", 0), TMV("v3", 0), TMV("v8", 5), TMV("v9", 33), TMC(19, 54),
   TMC(19, 56), TMC(19, 58), TMC(19, 59), TMC(19, 61), TMC(19, 63),
   TMC(19, 64), TMC(19, 66), TMC(19, 68), TMC(19, 65), TMC(19, 69),
   TMC(19, 70), TMC(20, 72), TMC(21, 72), TMC(22, 74), TMC(22, 77),
   TMC(22, 80), TMC(23, 82), TMC(24, 5), TMC(25, 83), TMC(26, 84),
   TMC(26, 86), TMC(26, 88), TMC(26, 89), TMC(26, 91), TMC(26, 93),
   TMC(26, 94), TMC(26, 95), TMC(26, 82), TMC(26, 97), TMC(26, 99),
   TMC(26, 101), TMC(26, 103), TMC(26, 83), TMC(26, 105), TMC(26, 106),
   TMC(27, 82), TMC(28, 83), TMC(29, 56), TMC(29, 58), TMC(29, 108),
   TMC(29, 110), TMC(30, 24), TMC(30, 23), TMC(30, 26), TMC(30, 3),
   TMC(30, 1), TMC(30, 29), TMC(30, 4), TMC(31, 40), TMC(32, 39),
   TMC(33, 71), TMC(34, 71), TMC(35, 42), TMC(36, 111), TMC(37, 114),
   TMC(38, 116), TMC(38, 124), TMC(38, 126), TMC(38, 128), TMC(42, 132),
   TMC(43, 81), TMC(44, 104), TMC(45, 35), TMC(46, 17), TMC(47, 35),
   TMC(48, 134), TMC(49, 136), TMC(50, 142), TMC(50, 145), TMC(50, 148),
   TMC(50, 150), TMC(50, 152), TMC(50, 154), TMC(50, 156), TMC(50, 160),
   TMC(50, 164), TMC(50, 166), TMC(50, 170), TMC(50, 179), TMC(50, 184),
   TMC(50, 185), TMC(50, 72), TMC(52, 35), TMC(53, 38), TMC(53, 122),
   TMC(53, 53), TMC(54, 71), TMC(55, 187), TMC(56, 188), TMC(57, 188),
   TMC(58, 188), TMC(59, 188), TMC(60, 71), TMC(61, 17), TMC(62, 189),
   TMC(63, 191), TMC(64, 5), TMC(65, 82), TMC(66, 192), TMC(67, 193),
   TMC(68, 177), TMC(69, 195), TMC(70, 197), TMC(71, 199), TMC(71, 201),
   TMC(72, 202), TMC(72, 203), TMC(73, 204), TMC(73, 205), TMC(74, 199),
   TMC(74, 201), TMC(75, 199), TMC(75, 201), TMC(76, 206), TMC(76, 207),
   TMC(77, 208), TMC(77, 209), TMC(78, 208), TMC(78, 209), TMC(79, 210),
   TMC(79, 211), TMC(80, 38), TMC(81, 212), TMC(82, 213), TMC(83, 215),
   TMC(84, 37), TMC(85, 34), TMC(86, 32), TMC(86, 218), TMC(86, 221),
   TMC(87, 25), TMC(88, 223), TMC(89, 224), TMC(90, 225), TMC(91, 226),
   TMC(92, 223), TMC(93, 223), TMC(94, 223), TMC(95, 224), TMC(96, 223),
   TMC(97, 223), TMC(98, 224), TMC(99, 223), TMC(100, 223), TMC(101, 225),
   TMC(102, 227), TMC(103, 5), TMC(104, 5), TMC(105, 5), TMC(106, 5),
   TMC(107, 5), TMC(108, 5), TMC(109, 121), TMC(110, 121), TMC(111, 121),
   TMC(112, 121), TMC(113, 5), TMC(114, 158), TMC(115, 228), TMC(116, 83),
   TMC(117, 96), TMC(118, 96), TMC(119, 24), TMC(120, 23), TMC(121, 20),
   TMC(122, 22), TMC(123, 20), TMC(124, 18), TMC(125, 18), TMC(126, 18),
   TMC(127, 96), TMC(128, 233), TMC(129, 16), TMC(129, 237), TMC(130, 238),
   TMC(130, 239), TMC(130, 240), TMC(130, 241), TMC(131, 177), TMC(132, 3),
   TMC(132, 1), TMC(133, 243), TMC(133, 246), TMC(134, 266), TMC(135, 158),
   TMC(135, 162), TMC(136, 5), TMC(137, 3), TMC(137, 1), TMC(138, 1),
   TMC(139, 81)]
  end
  local
  val DT = Thm.disk_thm val read = Term.read_raw tmvector
  in
  fun op is_valid_abi_aarch64_relocation_operator_def x = x
    val op is_valid_abi_aarch64_relocation_operator_def =
    DT(((("abis",0),[]),[]),
       [read"%71%39%89%226$0@@%245$0@%155@%125@%125@%155@%155@%155@%155@%155@%155@%155@%155@%155@%155@%155@%125@%125@%125@%125@%125@%125@%125@@|@"])
  fun op is_valid_abi_aarch64_relocation_operator2_def x = x
    val op is_valid_abi_aarch64_relocation_operator2_def =
    DT(((("abis",1),[]),[]), [read"%72%40%89%227$0@@%155@|@"])
  fun op is_valid_abi_amd64_relocation_operator_def x = x
    val op is_valid_abi_amd64_relocation_operator_def =
    DT(((("abis",2),[]),[]),
       [read"%71%39%89%228$0@@%245$0@%125@%125@%125@%125@%125@%125@%125@%125@%125@%125@%125@%125@%125@%155@%125@%125@%125@%125@%125@%125@%125@@|@"])
  fun op is_valid_abi_amd64_relocation_operator2_def x = x
    val op is_valid_abi_amd64_relocation_operator2_def =
    DT(((("abis",3),[]),[]), [read"%61%38%89%229$0@@%125@|@"])
  fun op is_valid_abi_power64_relocation_operator_def x = x
    val op is_valid_abi_power64_relocation_operator_def =
    DT(((("abis",4),[]),[]), [read"%61%38%89%230$0@@%125@|@"])
  fun op is_valid_abi_power64_relocation_operator2_def x = x
    val op is_valid_abi_power64_relocation_operator2_def =
    DT(((("abis",5),[]),[]), [read"%61%38%89%231$0@@%125@|@"])
  fun op any_abi_feature_TY_DEF x = x
    val op any_abi_feature_TY_DEF =
    DT(((("abis",6),[("bool",[26])]),["DISK_THM"]),
       [read"%102%44%156%10%68%0%97%70%10%97%159%100%5%96$1@%5%121%79@%75$0@%105@@%37%114|@|$0@@|@@%99%4%96$1@%4%121%154%79@@%75%108@$0@@%37%114|@|$0@@|@@@$1$0@@|@@$0$1@@|@|@$0@|@"])
  fun op any_abi_feature_case_def x = x
    val op any_abi_feature_case_def =
    DT(((("abis",12),
        [("abis",[7,8,9,10,11]),("bool",[26,181]),("ind_type",[33,34]),
         ("pair",[8,9])]),["DISK_THM"]),
       [read"%78%63%5%66%26%65%30%81%189%111$2@@$1@$0@@$1$2@@|@|@|@@%62%4%66%26%65%30%81%189%110$2@@$1@$0@@$0$2@@|@|@|@@"])
  fun op any_abi_feature_size_def x = x
    val op any_abi_feature_size_def =
    DT(((("abis",13),
        [("abis",[7,8,9,10,11]),("bool",[26,181]),("ind_type",[33,34]),
         ("pair",[8,9])]),["DISK_THM"]),
       [read"%78%63%5%94%192%111$0@@@%74%148%112%158@@@%185$0@@@|@@%62%4%94%192%110$0@@@%74%148%112%158@@@%161$0@@@|@@"])
  fun op anyAbiFeatureToNaturalList_def x = x
    val op anyAbiFeatureToNaturalList_def =
    DT(((("abis",21),[]),[]),
       [read"%64%25%93%188$0@@%190$0@%13%120%79@%184$0@@|@%14%120%148%112%158@@@%160$0@@|@@|@"])
  fun op instance_Memory_image_ToNaturalList_Abis_any_abi_feature_dict_def
    x = x
    val
    op instance_Memory_image_ToNaturalList_Abis_any_abi_feature_dict_def =
    DT(((("abis",22),[]),[]), [read"%83%225@%157%134%188@@%104@@"])
  fun op anyAbiFeatureCompare_def x = x
    val op anyAbiFeatureCompare_def =
    DT(((("abis",23),[]),[]),
       [read||||@||@%18%163$1@$0@|@|@||@@@||@||@||@@|@|@"])
  fun op instance_Basic_classes_Ord_Abis_any_abi_feature_dict_def x = x
    val op instance_Basic_classes_Ord_Abis_any_abi_feature_dict_def =
    DT(((("abis",24),[]),[]),
       [read"%82%224@%149%133%187@@%153%132%29%32%95%187$1@$0@@%144@||@@%152%132%29%32%127%187$1@$0@@%128%144@%128%124@%123@@@||@@%151%132%29%32%95%187$1@$0@@%126@||@@%150%132%29%32%127%187$1@$0@@%128%126@%128%124@%123@@@||@@%103@@@@@@"])
  fun op make_elf64_header_def x = x
    val op make_elf64_header_def =
    DT(((("abis",25),[]),[]),
       [read"%69%20%69%41%69%12%69%36%69%50%61%22%69%47%69%43%69%42%69%46%69%48%90%234$10@$9@$8@$7@$6@$5@$4@$3@$2@$1@$0@@%196%142%118%214@%118%215@%118%216@%118%217@%118%239%208@@%118%239$10@@%118%239%210@@%118%239$9@@%118%239$8@@%118%239%79@@%118%239%79@@%118%239%79@@%118%239%79@@%118%239%79@@%118%239%79@@%118%239%79@@%146@@@@@@@@@@@@@@@@@@%205%131%238$6@@@%197%131%238$7@@@%206%130%237%210@@@%194%129%236%79@@@%200%129%236$3@@@%203%129%236$4@@@%195%130%237%79@@@%193%131%238%148%113%112%112%112%112%112%158@@@@@@@@@@%198%131%238%148%113%112%112%113%113%158@@@@@@@@@%199%131%238$2@@@%201%131%238%148%113%112%112%112%112%112%158@@@@@@@@@@%202%131%238$1@@@%204%131%238$0@@@%109@@@@@@@@@@@@@@@|@|@|@|@|@|@|@|@|@|@|@"])
  fun op null_abi_def x = x
    val op null_abi_def =
    DT(((("abis",26),[]),[]),
       [read"%85%241@%167%135%232@@%169%139%235%209@%218@%79@%212@@@%175%140%240@@%179%136%219@@%177%136%45%23%125|||@@%106@@@@@@@@@@"])
  fun op sysv_amd64_std_abi_def x = x
    val op sysv_amd64_std_abi_def =
    DT(((("abis",27),[]),[]),
       [read"%86%251@%168%135%223@@%170%139%235%209@%218@%79@%213@@@%176%141%186%224@%225@@@%180%137%247@@%178%137%45%24%221%248@%207$1@@|||@@%107@@@@@@@@@@"])
  fun op sysv_aarch64_le_std_abi_def x = x
    val op sysv_aarch64_le_std_abi_def =
    DT(((("abis",28),[]),[]),
       [read"%85%249@%167%135%222@@%169%139%235%209@%218@%79@%211@@@%175%140%162@@%179%136%246@@%177%136%21%6%125||@@%171%143%73%73%148%113%158@@@%148%113%112%112%112%112%112%112%112%158@@@@@@@@@@@%148%113%112%112%112%112%112%112%112%112%112%112%112%158@@@@@@@@@@@@@@@@%173%143%148%113%112%112%112%112%112%112%112%112%112%158@@@@@@@@@@@@@%165%143%148%113%112%112%112%112%112%112%112%112%112%112%112%158@@@@@@@@@@@@@@@%181%138%49%92$0@%119%115%148%112%112%112%112%112%113%158@@@@@@@@@%119%115%148%112%112%112%113%112%112%158@@@@@@@@@%119%115%148%113%112%113%113%112%112%158@@@@@@@@@%119%115%148%112%112%112%112%113%112%158@@@@@@@@@%119%115%148%113%113%112%112%112%112%158@@@@@@@@@%119%115%148%112%113%112%112%112%112%158@@@@@@@@@%119%115%148%113%112%113%113%112%112%158@@@@@@@@@%119%115%148%112%112%112%112%112%113%158@@@@@@@@@%119%115%148%112%112%112%112%113%112%158@@@@@@@@@%119%115%148%113%113%113%112%112%112%158@@@@@@@@@%119%115%148%113%113%113%112%112%112%158@@@@@@@@@%119%115%148%112%112%113%112%113%112%158@@@@@@@@@%119%115%148%112%113%113%112%112%112%158@@@@@@@@@%119%115%148%113%112%113%112%113%112%158@@@@@@@@@%119%115%148%112%112%112%112%112%113%158@@@@@@@@@%119%115%148%113%112%113%112%113%112%158@@@@@@@@@%119%115%148%112%113%112%112%112%112%158@@@@@@@@@%119%115%148%113%113%112%112%112%112%158@@@@@@@@@%119%115%148%113%112%113%113%112%112%158@@@@@@@@@%119%115%148%112%113%113%112%112%112%158@@@@@@@@@%119%115%148%112%112%112%112%112%113%158@@@@@@@@@%147@@@@@@@@@@@@@@@@@@@@@@|@@%106@@@@@@@@@@"])
  fun op all_abis_def x = x
    val op all_abis_def =
    DT(((("abis",29),[]),[]),
       [read"%91%183@%117%251@%117%250@%117%242@%145@@@@"])
  fun op datatype_any_abi_feature x = x
    val op datatype_any_abi_feature =
    DT(((("abis",14),[("bool",[25,171])]),["DISK_THM"]),
       [read"%122%19%111@%110@@"])
  fun op any_abi_feature_11 x = x
    val op any_abi_feature_11 =
    DT(((("abis",15),
        [("abis",[7,8,9,10,11]),("bool",[26,56,63,181]),
         ("ind_type",[33,34]),("pair",[8,9])]),["DISK_THM"]),
       [read"%78%63%5%63%9%89%88%111$1@@%111$0@@@%87$1@$0@@|@|@@%62%4%62%8%89%88%110$1@@%110$0@@@%84$1@$0@@|@|@@"])
  fun op any_abi_feature_distinct x = x
    val op any_abi_feature_distinct =
    DT(((("abis",16),
        [("abis",[7,8,9,10,11]),("bool",[25,26,47,54,63,181]),
         ("ind_type",[33,34]),("pair",[8,9])]),["DISK_THM"]),
       [read"%62%8%63%5%252%88%111$0@@%110$1@@@|@|@"])
  fun op any_abi_feature_case_cong x = x
    val op any_abi_feature_case_cong =
    DT(((("abis",17),
        [("abis",[7,8,9,10,11,12]),("bool",[26,181])]),["DISK_THM"]),
       [read"%64%1%64%2%66%26%65%30%97%78%88$3@$2@@%78%63%5%97%88$3@%111$0@@@%81$2$0@@%27$0@@@|@@%62%4%97%88$3@%110$0@@@%81$1$0@@%31$0@@@|@@@@%81%189$3@$1@$0@@%189$2@%27@%31@@@|@|@|@|@"])
  fun op any_abi_feature_nchotomy x = x
    val op any_abi_feature_nchotomy =
    DT(((("abis",18),
        [("abis",[7,8,9,10,11]),("bool",[26,181])]),["DISK_THM"]),
       [read"%64%11%159%100%5%88$1@%111$0@@|@@%99%4%88$1@%110$0@@|@@|@"])
  fun op any_abi_feature_Axiom x = x
    val op any_abi_feature_Axiom =
    DT(((("abis",19),
        [("abis",[7,8,9,10,11]),("bool",[26,181]),("ind_type",[33,34]),
         ("pair",[8,9])]),["DISK_THM"]),
       [read"%66%28%65%30%101%33%78%63%5%81$1%111$0@@@$3$0@@|@@%62%4%81$1%110$0@@@$2$0@@|@@|@|@|@"])
  fun op any_abi_feature_induction x = x
    val op any_abi_feature_induction =
    DT(((("abis",20),[("abis",[7,8,9,10,11]),("bool",[26])]),["DISK_THM"]),
       [read"%67%3%97%78%63%5$1%111$0@@|@@%62%4$1%110$0@@|@@@%64%7$1$0@|@@|@"])
  end
  val _ = DB.bindl "abis"
  [("is_valid_abi_aarch64_relocation_operator_def",
    is_valid_abi_aarch64_relocation_operator_def,
    DB.Def),
   ("is_valid_abi_aarch64_relocation_operator2_def",
    is_valid_abi_aarch64_relocation_operator2_def,
    DB.Def),
   ("is_valid_abi_amd64_relocation_operator_def",
    is_valid_abi_amd64_relocation_operator_def,
    DB.Def),
   ("is_valid_abi_amd64_relocation_operator2_def",
    is_valid_abi_amd64_relocation_operator2_def,
    DB.Def),
   ("is_valid_abi_power64_relocation_operator_def",
    is_valid_abi_power64_relocation_operator_def,
    DB.Def),
   ("is_valid_abi_power64_relocation_operator2_def",
    is_valid_abi_power64_relocation_operator2_def,
    DB.Def), ("any_abi_feature_TY_DEF",any_abi_feature_TY_DEF,DB.Def),
   ("any_abi_feature_case_def",any_abi_feature_case_def,DB.Def),
   ("any_abi_feature_size_def",any_abi_feature_size_def,DB.Def),
   ("anyAbiFeatureToNaturalList_def",
    anyAbiFeatureToNaturalList_def,
    DB.Def),
   ("instance_Memory_image_ToNaturalList_Abis_any_abi_feature_dict_def",
    instance_Memory_image_ToNaturalList_Abis_any_abi_feature_dict_def,
    DB.Def), ("anyAbiFeatureCompare_def",anyAbiFeatureCompare_def,DB.Def),
   ("instance_Basic_classes_Ord_Abis_any_abi_feature_dict_def",
    instance_Basic_classes_Ord_Abis_any_abi_feature_dict_def,
    DB.Def), ("make_elf64_header_def",make_elf64_header_def,DB.Def),
   ("null_abi_def",null_abi_def,DB.Def),
   ("sysv_amd64_std_abi_def",sysv_amd64_std_abi_def,DB.Def),
   ("sysv_aarch64_le_std_abi_def",sysv_aarch64_le_std_abi_def,DB.Def),
   ("all_abis_def",all_abis_def,DB.Def),
   ("datatype_any_abi_feature",datatype_any_abi_feature,DB.Thm),
   ("any_abi_feature_11",any_abi_feature_11,DB.Thm),
   ("any_abi_feature_distinct",any_abi_feature_distinct,DB.Thm),
   ("any_abi_feature_case_cong",any_abi_feature_case_cong,DB.Thm),
   ("any_abi_feature_nchotomy",any_abi_feature_nchotomy,DB.Thm),
   ("any_abi_feature_Axiom",any_abi_feature_Axiom,DB.Thm),
   ("any_abi_feature_induction",any_abi_feature_induction,DB.Thm)]

  local open Portable GrammarSpecials Parse
    fun UTOFF f = Feedback.trace("Parse.unicode_trace_off_complaints",0)f
  in
  val _ = mk_local_grms [("abi_power64_relocationTheory.abi_power64_relocation_grammars",
                          abi_power64_relocationTheory.abi_power64_relocation_grammars),
                         ("abi_power64Theory.abi_power64_grammars",
                          abi_power64Theory.abi_power64_grammars),
                         ("abi_amd64Theory.abi_amd64_grammars",
                          abi_amd64Theory.abi_amd64_grammars),
                         ("abi_aarch64_leTheory.abi_aarch64_le_grammars",
                          abi_aarch64_leTheory.abi_aarch64_le_grammars)]
  val _ = List.app (update_grms reveal) []
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("is_valid_abi_aarch64_relocation_operator", (Term.prim_mk_const { Name = "is_valid_abi_aarch64_relocation_operator", Thy = "abis"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("is_valid_abi_aarch64_relocation_operator", (Term.prim_mk_const { Name = "is_valid_abi_aarch64_relocation_operator", Thy = "abis"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("is_valid_abi_aarch64_relocation_operator2", (Term.prim_mk_const { Name = "is_valid_abi_aarch64_relocation_operator2", Thy = "abis"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("is_valid_abi_aarch64_relocation_operator2", (Term.prim_mk_const { Name = "is_valid_abi_aarch64_relocation_operator2", Thy = "abis"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("is_valid_abi_amd64_relocation_operator", (Term.prim_mk_const { Name = "is_valid_abi_amd64_relocation_operator", Thy = "abis"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("is_valid_abi_amd64_relocation_operator", (Term.prim_mk_const { Name = "is_valid_abi_amd64_relocation_operator", Thy = "abis"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("is_valid_abi_amd64_relocation_operator2", (Term.prim_mk_const { Name = "is_valid_abi_amd64_relocation_operator2", Thy = "abis"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("is_valid_abi_amd64_relocation_operator2", (Term.prim_mk_const { Name = "is_valid_abi_amd64_relocation_operator2", Thy = "abis"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("is_valid_abi_power64_relocation_operator", (Term.prim_mk_const { Name = "is_valid_abi_power64_relocation_operator", Thy = "abis"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("is_valid_abi_power64_relocation_operator", (Term.prim_mk_const { Name = "is_valid_abi_power64_relocation_operator", Thy = "abis"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("is_valid_abi_power64_relocation_operator2", (Term.prim_mk_const { Name = "is_valid_abi_power64_relocation_operator2", Thy = "abis"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("is_valid_abi_power64_relocation_operator2", (Term.prim_mk_const { Name = "is_valid_abi_power64_relocation_operator2", Thy = "abis"}))
  val _ = update_grms temp_add_type "any_abi_feature"
  val _ = update_grms temp_add_type "any_abi_feature"






  val _ = update_grms
       (UTOFF temp_overload_on)
       ("Amd64AbiFeature", (Term.prim_mk_const { Name = "Amd64AbiFeature", Thy = "abis"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("Amd64AbiFeature", (Term.prim_mk_const { Name = "Amd64AbiFeature", Thy = "abis"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("Aarch64LeAbiFeature", (Term.prim_mk_const { Name = "Aarch64LeAbiFeature", Thy = "abis"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("Aarch64LeAbiFeature", (Term.prim_mk_const { Name = "Aarch64LeAbiFeature", Thy = "abis"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("any_abi_feature_CASE", (Term.prim_mk_const { Name = "any_abi_feature_CASE", Thy = "abis"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("any_abi_feature_size", (Term.prim_mk_const { Name = "any_abi_feature_size", Thy = "abis"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("anyAbiFeatureToNaturalList", (Term.prim_mk_const { Name = "anyAbiFeatureToNaturalList", Thy = "abis"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("anyAbiFeatureToNaturalList", (Term.prim_mk_const { Name = "anyAbiFeatureToNaturalList", Thy = "abis"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("instance_Memory_image_ToNaturalList_Abis_any_abi_feature_dict", (Term.prim_mk_const { Name = "instance_Memory_image_ToNaturalList_Abis_any_abi_feature_dict", Thy = "abis"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("instance_Memory_image_ToNaturalList_Abis_any_abi_feature_dict", (Term.prim_mk_const { Name = "instance_Memory_image_ToNaturalList_Abis_any_abi_feature_dict", Thy = "abis"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("anyAbiFeatureCompare", (Term.prim_mk_const { Name = "anyAbiFeatureCompare", Thy = "abis"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("anyAbiFeatureCompare", (Term.prim_mk_const { Name = "anyAbiFeatureCompare", Thy = "abis"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("instance_Basic_classes_Ord_Abis_any_abi_feature_dict", (Term.prim_mk_const { Name = "instance_Basic_classes_Ord_Abis_any_abi_feature_dict", Thy = "abis"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("instance_Basic_classes_Ord_Abis_any_abi_feature_dict", (Term.prim_mk_const { Name = "instance_Basic_classes_Ord_Abis_any_abi_feature_dict", Thy = "abis"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("make_elf64_header", (Term.prim_mk_const { Name = "make_elf64_header", Thy = "abis"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("make_elf64_header", (Term.prim_mk_const { Name = "make_elf64_header", Thy = "abis"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("null_abi", (Term.prim_mk_const { Name = "null_abi", Thy = "abis"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("null_abi", (Term.prim_mk_const { Name = "null_abi", Thy = "abis"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("sysv_amd64_std_abi", (Term.prim_mk_const { Name = "sysv_amd64_std_abi", Thy = "abis"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("sysv_amd64_std_abi", (Term.prim_mk_const { Name = "sysv_amd64_std_abi", Thy = "abis"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("sysv_aarch64_le_std_abi", (Term.prim_mk_const { Name = "sysv_aarch64_le_std_abi", Thy = "abis"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("sysv_aarch64_le_std_abi", (Term.prim_mk_const { Name = "sysv_aarch64_le_std_abi", Thy = "abis"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("all_abis", (Term.prim_mk_const { Name = "all_abis", Thy = "abis"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("all_abis", (Term.prim_mk_const { Name = "all_abis", Thy = "abis"}))
  val abis_grammars = Parse.current_lgrms()
  end


  val _ =
    TypeBase.write [
      let
        open TypeBasePure
        val tyinfo0 = mk_datatype_info
          {ax=ORIG any_abi_feature_Axiom,
           case_def=any_abi_feature_case_def,
           case_cong=any_abi_feature_case_cong,
           induction=ORIG any_abi_feature_induction,
           nchotomy=any_abi_feature_nchotomy,
           size=SOME(Parse.Term`(abis$any_abi_feature_size) :(abis$any_abi_feature) -> (num$num)`,
                     ORIG any_abi_feature_size_def),
           encode = NONE,
           lift=NONE,
           one_one=SOME any_abi_feature_11,
           distinct=SOME any_abi_feature_distinct,
           fields=let fun T t s A = mk_thy_type{Thy=t,Tyop=s,Args=A}
    val U = mk_vartype
in
[] end,
           accessors=[],
           updates=[],
           recognizers=[],
           destructors=[]}
        val tyinfo0 = tyinfo0
        val () = computeLib.write_datatype_info tyinfo0
      in
        tyinfo0
      end
    ];
  val _ = Theory.LoadableThyData.temp_encoded_update {
    thy = "abis",
    thydataty = "compute",
    data =
        "abis.is_valid_abi_aarch64_relocation_operator_def abis.sysv_aarch64_le_std_abi_def abis.all_abis_def abis.sysv_amd64_std_abi_def abis.make_elf64_header_def abis.null_abi_def abis.is_valid_abi_power64_relocation_operator2_def abis.instance_Basic_classes_Ord_Abis_any_abi_feature_dict_def abis.anyAbiFeatureCompare_def abis.instance_Memory_image_ToNaturalList_Abis_any_abi_feature_dict_def abis.anyAbiFeatureToNaturalList_def abis.is_valid_abi_power64_relocation_operator_def abis.is_valid_abi_amd64_relocation_operator2_def abis.is_valid_abi_amd64_relocation_operator_def abis.is_valid_abi_aarch64_relocation_operator2_def"
  }

val _ = if !Globals.print_thy_loads then print "done\n" else ()
val _ = Theory.load_complete "abis"
end
