(*Generated by Lem from abis/abis.lem.*)
open HolKernel Parse boolLib bossLib;
open lem_numTheory lem_listTheory lem_basic_classesTheory lem_boolTheory lem_maybeTheory lem_assert_extraTheory elf_headerTheory elf_interpreted_sectionTheory elf_fileTheory memory_imageTheory abi_utilitiesTheory abi_aarch64_relocationTheory abi_amd64_relocationTheory abi_amd64Theory abi_aarch64_leTheory abi_power64Theory abi_power64_relocationTheory;

val _ = numLib.prefer_num();



val _ = new_theory "abis"

(** The [abis] module is the top-level module for all ABI related code, including
  * some generic functionality that works across all ABIs, and a primitive attempt
  * at abstracting over ABIs for purposes of linking.
  *)

(*open import Basic_classes*)
(*open import Bool*)
(*open import Num*)
(*open import Maybe*)
(*open import List*)
(*open import Assert_extra*)

(*open import Elf_file*)
(*open import Elf_header*)
(*open import Elf_interpreted_section*)
(*open import Memory_image*)

(*open import Abi_amd64*)
(*open import Abi_amd64_relocation*)

(*open import Abi_aarch64_le*)
(*open import Abi_aarch64_relocation*)

(*open import Abi_power64*)
(*open import Abi_power64_relocation*)

(*open import Abi_utilities*)

(** Relocation operators and their validity on a given platform *)

(*val is_valid_abi_aarch64_relocation_operator : relocation_operator -> bool*)
val _ = Define `
 (is_valid_abi_aarch64_relocation_operator op =  
((case op of
      Page => T
    | G => T
    | GDat => T
    | GLDM => T
    | DTPRel => T
    | GTPRel => T
    | TPRel => T
    | GTLSDesc => T
    | Delta => T
    | LDM => T
    | TLSDesc => T
    | Indirect => T
    | _ => F
  )))`;

  
(*val is_valid_abi_aarch64_relocation_operator2 : relocation_operator2 -> bool*)
val _ = Define `
 (is_valid_abi_aarch64_relocation_operator2 op =  
((case op of
      GTLSIdx => T
  )))`;


(*val is_valid_abi_amd64_relocation_operator : relocation_operator -> bool*)
val _ = Define `
 (is_valid_abi_amd64_relocation_operator op =  
((case op of
      Indirect => T
    | _ => F (* XXX: not sure about this? *)
  )))`;

  
(*val is_valid_abi_amd64_relocation_operator2 : relocation_operator2 -> bool*)
val _ = Define `
 (is_valid_abi_amd64_relocation_operator2 op =  
((case op of
      _ => F
  )))`;


(*val is_valid_abi_power64_relocation_operator : relocation_operator -> bool*)
val _ = Define `
 (is_valid_abi_power64_relocation_operator op = F)`;
 (* TODO *)

(*val is_valid_abi_power64_relocation_operator2 : relocation_operator2 -> bool*)
val _ = Define `
 (is_valid_abi_power64_relocation_operator2 op =  
((case op of
      _ => F
  )))`;


(** Misc. ABI related stuff *)

val _ = Hol_datatype `
 any_abi_feature = Amd64AbiFeature of amd64_abi_feature
                     | Aarch64LeAbiFeature of aarch64_le_abi_feature`;


(*val anyAbiFeatureToNaturalList : any_abi_feature -> list natural*)
val _ = Define `
 (anyAbiFeatureToNaturalList f = ((case f of
    Amd64AbiFeature(af) => 0 :: (amd64AbiFeatureConstructorToNaturalList af)
    | Aarch64LeAbiFeature(af) => 1 :: (aarch64LeAbiFeatureConstructorToNaturalList af)
)))`;


val _ = Define `
(instance_Memory_image_ToNaturalList_Abis_any_abi_feature_dict =(<|

  toNaturalList_method := anyAbiFeatureToNaturalList|>))`;


(*val anyAbiFeatureCompare : any_abi_feature -> any_abi_feature -> Basic_classes.ordering*)
val _ = Define `
 (anyAbiFeatureCompare f1 f2 =    
 ((case (anyAbiFeatureToNaturalList f1, anyAbiFeatureToNaturalList f2) of
        ([], []) => failwith "impossible: any-ABI feature has empty natural list (case 0)"
    |   (_, [])  => failwith "impossible: any-ABI feature has empty natural list (case 1)"
    |   ([], _)  => failwith "impossible: any-ABI feature has empty natural list (case 2)"
    |   ((hd1 :: tl1), (hd2 :: tl2)) => 
            if hd1 < hd2 then LT else if hd1 > hd2 then GT else
                (case (f1, f2) of
                    (Amd64AbiFeature(af1), Amd64AbiFeature(af2)) => abi_amd64$abiFeatureCompare0 af1 af2
                   |(Aarch64LeAbiFeature(af1), Aarch64LeAbiFeature(af2)) => abiFeatureCompare af1 af2
                   | _ => failwith "impossible: tag constructors not equal but natural list heads were equal"
                )
    )))`;


val _ = Define `
(instance_Basic_classes_Ord_Abis_any_abi_feature_dict =(<|

  compare_method := anyAbiFeatureCompare;

  isLess_method := (\ f1 .  (\ f2 .  (anyAbiFeatureCompare f1 f2 = LT)));

  isLessEqual_method := (\ f1 .  (\ f2 .  (IN) (anyAbiFeatureCompare f1 f2) ({LT; EQ})));

  isGreater_method := (\ f1 .  (\ f2 .  (anyAbiFeatureCompare f1 f2 = GT)));

  isGreaterEqual_method := (\ f1 .  (\ f2 .  (IN) (anyAbiFeatureCompare f1 f2) ({GT; EQ})))|>))`;


(* null_abi captures ABI details common to all ELF-based, System V-based systems. *)
(*val null_abi : abi any_abi_feature*) 
val _ = Define `
(null_abi = (<|
      is_valid_elf_header := is_valid_elf64_header
    ; reloc := noop_reloc
    ; section_is_special := elf_section_is_special
    ; section_is_large := (\ s .  (\ f .  F))
    ; maxpagesize :=(( 2 * 256) * 4096) (* 2MB; bit of a guess, based on gdb and prelink code *)
    ; minpagesize :=( 1024) (* bit of a guess again *)
    ; commonpagesize :=( 4096)
    ; symbol_is_generated_by_linker := (\ symname .  symname = "_GLOBAL_OFFSET_TABLE_")
    |>))`;


(*val sysv_amd64_std_abi : abi any_abi_feature*)
val _ = Define `
 (sysv_amd64_std_abi =   
 (<| is_valid_elf_header := header_is_amd64
    ; reloc := (amd64_reloc instance_Basic_classes_Ord_Abis_any_abi_feature_dict
    instance_Memory_image_ToNaturalList_Abis_any_abi_feature_dict)
    ; section_is_special := section_is_special0
    ; section_is_large := (\ s .  (\ f .  flag_is_set shf_x86_64_large s.elf64_section_flags))
    ; maxpagesize :=( 65536)
    ; minpagesize :=( 4096)
    ; commonpagesize :=( 4096)
    ; symbol_is_generated_by_linker := null_abi.symbol_is_generated_by_linker
    |>))`;


(*val sysv_aarch64_le_std_abi : abi any_abi_feature*)
val _ = Define `
 (sysv_aarch64_le_std_abi =   
 (<| is_valid_elf_header := header_is_aarch64_le
    ; reloc := aarch64_le_reloc
    ; section_is_special := section_is_special0
    ; section_is_large := (\e .  
  (case (e ) of ( _ ) => (\a .  (case (a ) of ( _ ) => F )) ))
    ; maxpagesize := null_abi.maxpagesize
    ; minpagesize := null_abi.minpagesize
    ; commonpagesize := null_abi.commonpagesize
    ; symbol_is_generated_by_linker := null_abi.symbol_is_generated_by_linker
    |>))`;


(*val all_abis : list (abi any_abi_feature)*)
val _ = Define `
 (all_abis = ([sysv_amd64_std_abi; sysv_aarch64_le_std_abi; null_abi]))`;


val _ = export_theory()

