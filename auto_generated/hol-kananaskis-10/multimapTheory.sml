structure multimapTheory :> multimapTheory =
struct
  val _ = if !Globals.print_thy_loads then print "Loading multimapTheory ... " else ()
  open Type Term Thm
  infixr -->

  fun C s t ty = mk_thy_const{Name=s,Thy=t,Ty=ty}
  fun T s t A = mk_thy_type{Tyop=s, Thy=t,Args=A}
  fun V s q = mk_var(s,q)
  val U     = mk_vartype
  (*  Parents *)
  local open lem_set_extraTheory missing_pervasivesTheory
  in end;
  val _ = Theory.link_parents
          ("multimap",
          Arbnum.fromString "1445346206",
          Arbnum.fromString "55115")
          [("missing_pervasives",
           Arbnum.fromString "1445345863",
           Arbnum.fromString "394757"),
           ("lem_set_extra",
           Arbnum.fromString "1445005635",
           Arbnum.fromString "681037")];
  val _ = Theory.incorporate_types "multimap" [];

  val idvector = 
    let fun ID(thy,oth) = {Thy = thy, Other = oth}
    in Vector.fromList
  [ID("min", "fun"), ID("min", "bool"), ID("num", "num"),
   ID("list", "list"), ID("pair", "prod"),
   ID("lem_basic_classes", "Ord_class"), ID("option", "option"),
   ID("bool", "!"), ID("pair", ","), ID("bool", "/\\"),
   ID("prim_rec", "<"), ID("arithmetic", "<="), ID("min", "="),
   ID("min", "==>"), ID("arithmetic", ">"), ID("arithmetic", ">="),
   ID("min", "@"), ID("list", "APPEND"), ID("arithmetic", "BIT1"),
   ID("arithmetic", "BIT2"), ID("string", "CHR"), ID("string", "char"),
   ID("bool", "COND"), ID("list", "CONS"), ID("bool", "F"),
   ID("combin", "I"), ID("bool", "LET"), ID("list", "NIL"),
   ID("option", "NONE"), ID("arithmetic", "NUMERAL"),
   ID("lem_basic_classes", "Ord_class_isGreater_method"),
   ID("lem_basic_classes", "Ord_class_isLess_method"),
   ID("lem_set", "SET_SPLIT"), ID("list", "SET_TO_LIST"),
   ID("option", "SOME"), ID("bool", "T"), ID("pair", "UNCURRY"),
   ID("relation", "WF"), ID("relation", "WFREC"), ID("arithmetic", "ZERO"),
   ID("lem_set_extra", "chooseAndSplit"), ID("lem", "failwith"),
   ID("multimap", "findHighestEquiv"),
   ID("multimap", "findHighestEquiv_tupled"),
   ID("multimap", "findHighestEquiv_tupled_aux"),
   ID("multimap", "findLowestEquiv"),
   ID("multimap", "findLowestEquiv_tupled"),
   ID("multimap", "findLowestEquiv_tupled_aux"),
   ID("lem_basic_classes", "instance_Basic_classes_Ord_tup2_dict"),
   ID("multimap", "lookupBy0"), ID("option", "option_CASE"),
   ID("lem_basic_classes", "pairLess"), ID("pair", "pair_CASE"),
   ID("multimap", "testEquiv"), ID("bool", "~")]
  end;
  local open SharingTables
  in
  val tyvector = build_type_vector idvector
  [TYOP [1], TYOP [2], TYOP [0, 1, 0], TYOP [0, 1, 2], TYV "'v", TYV "'k",
   TYOP [4, 5, 4], TYOP [3, 6], TYOP [0, 6, 0], TYOP [0, 8, 7],
   TYOP [0, 5, 9], TYOP [0, 5, 0], TYOP [0, 5, 11], TYOP [0, 12, 10],
   TYOP [5, 4], TYOP [0, 14, 13], TYOP [5, 5], TYOP [0, 16, 15],
   TYOP [6, 6], TYOP [4, 8, 18], TYOP [4, 12, 19], TYOP [4, 5, 20],
   TYOP [4, 12, 21], TYOP [4, 14, 22], TYOP [4, 16, 23], TYOP [0, 24, 18],
   TYOP [0, 24, 0], TYOP [0, 24, 26], TYOP [0, 27, 25], TYOP [0, 18, 18],
   TYOP [0, 8, 29], TYOP [0, 12, 30], TYOP [0, 5, 31], TYOP [0, 12, 32],
   TYOP [0, 14, 33], TYOP [0, 16, 34], TYOP [0, 18, 0], TYOP [0, 8, 36],
   TYOP [0, 12, 37], TYOP [0, 5, 38], TYOP [0, 12, 39], TYOP [0, 14, 40],
   TYOP [0, 16, 41], TYOP [4, 6, 8], TYOP [4, 8, 43], TYOP [0, 11, 0],
   TYOP [0, 4, 0], TYOP [0, 46, 0], TYOP [0, 16, 0], TYOP [0, 48, 0],
   TYOP [0, 14, 0], TYOP [0, 50, 0], TYOP [0, 12, 0], TYOP [0, 52, 0],
   TYOP [0, 42, 0], TYOP [0, 54, 0], TYOP [0, 8, 0], TYOP [0, 56, 0],
   TYOP [0, 27, 0], TYOP [0, 58, 0], TYOP [0, 2, 0], TYOP [0, 36, 0],
   TYOP [0, 44, 0], TYOP [0, 62, 0], TYOP [0, 43, 0], TYOP [0, 64, 0],
   TYOP [0, 4, 6], TYOP [0, 5, 66], TYOP [0, 20, 21], TYOP [0, 5, 68],
   TYOP [0, 23, 24], TYOP [0, 16, 70], TYOP [0, 22, 23], TYOP [0, 14, 72],
   TYOP [0, 21, 22], TYOP [0, 12, 74], TYOP [0, 19, 20], TYOP [0, 12, 76],
   TYOP [0, 18, 19], TYOP [0, 8, 78], TYOP [0, 43, 44], TYOP [0, 8, 80],
   TYOP [0, 8, 43], TYOP [0, 6, 82], TYOP [0, 0, 0], TYOP [0, 0, 84],
   TYOP [0, 25, 0], TYOP [0, 25, 86], TYOP [0, 7, 0], TYOP [0, 7, 88],
   TYOP [0, 18, 36], TYOP [6, 44], TYOP [0, 91, 0], TYOP [0, 91, 92],
   TYOP [0, 6, 8], TYOP [0, 44, 62], TYOP [0, 43, 64], TYOP [0, 58, 27],
   TYOP [0, 7, 7], TYOP [0, 7, 98], TYOP [0, 1, 1], TYOP [21],
   TYOP [0, 1, 101], TYOP [0, 0, 85], TYOP [0, 0, 99], TYOP [0, 18, 29],
   TYOP [0, 0, 105], TYOP [0, 6, 6], TYOP [0, 6, 107], TYOP [0, 0, 108],
   TYOP [3, 101], TYOP [0, 110, 110], TYOP [0, 101, 111], TYOP [0, 6, 98],
   TYOP [0, 29, 29], TYOP [0, 6, 7], TYOP [0, 115, 115], TYOP [0, 6, 18],
   TYOP [0, 117, 117], TYOP [4, 8, 8], TYOP [0, 119, 7],
   TYOP [0, 120, 120], TYOP [0, 16, 12], TYOP [0, 8, 119],
   TYOP [0, 6, 123], TYOP [5, 6], TYOP [0, 125, 124], TYOP [0, 44, 91],
   TYOP [0, 4, 18], TYOP [0, 5, 128], TYOP [0, 129, 117], TYOP [0, 8, 9],
   TYOP [0, 131, 120], TYOP [0, 25, 25], TYOP [0, 133, 25],
   TYOP [0, 27, 134], TYOP [0, 8, 91], TYOP [0, 125, 136],
   TYOP [0, 110, 6], TYOP [0, 14, 125], TYOP [0, 16, 139],
   TYOP [0, 115, 7], TYOP [0, 7, 141], TYOP [0, 18, 142],
   TYOP [0, 117, 18], TYOP [0, 18, 144], TYOP [0, 18, 145],
   TYOP [0, 107, 6], TYOP [0, 6, 147], TYOP [0, 18, 148], TYOP [0, 44, 18],
   TYOP [0, 150, 18], TYOP [0, 18, 151], TYOP [0, 91, 152],
   TYOP [0, 16, 94], TYOP [0, 14, 154], TYOP [0, 129, 18],
   TYOP [0, 6, 156], TYOP [0, 67, 6], TYOP [0, 6, 158], TYOP [0, 20, 18],
   TYOP [0, 5, 160], TYOP [0, 161, 18], TYOP [0, 21, 162],
   TYOP [0, 23, 18], TYOP [0, 16, 164], TYOP [0, 165, 18],
   TYOP [0, 24, 166], TYOP [0, 22, 18], TYOP [0, 14, 168],
   TYOP [0, 169, 18], TYOP [0, 23, 170], TYOP [0, 21, 18],
   TYOP [0, 12, 172], TYOP [0, 173, 18], TYOP [0, 22, 174],
   TYOP [0, 19, 18], TYOP [0, 12, 176], TYOP [0, 177, 18],
   TYOP [0, 20, 178], TYOP [0, 30, 18], TYOP [0, 19, 180],
   TYOP [0, 43, 18], TYOP [0, 8, 182], TYOP [0, 183, 18],
   TYOP [0, 44, 184], TYOP [0, 8, 18], TYOP [0, 6, 186], TYOP [0, 187, 18],
   TYOP [0, 43, 188]]
  end
  val _ = Theory.incorporate_consts "multimap" tyvector
     [("testEquiv", 3), ("lookupBy0", 17),
      ("findLowestEquiv_tupled_aux", 28), ("findLowestEquiv_tupled", 25),
      ("findLowestEquiv", 35), ("findHighestEquiv_tupled_aux", 28),
      ("findHighestEquiv_tupled", 25), ("findHighestEquiv", 35)];

  local open SharingTables
  in
  val tmvector = build_term_vector idvector tyvector
  [TMV("P", 42), TMV("R", 27), TMV("a", 24), TMV("bestK", 5),
   TMV("bestV", 4), TMV("chosenK", 5), TMV("chosenV", 4),
   TMV("currentBestK", 5), TMV("currentBestV", 4),
   TMV("dict_Basic_classes_Ord_k", 16),
   TMV("dict_Basic_classes_Ord_v", 14), TMV("equiv", 12),
   TMV("findHighestEquiv_tupled", 25), TMV("findLowestEquiv_tupled", 25),
   TMV("foundHigherBest", 18), TMV("foundHigherK", 5),
   TMV("foundHigherV", 4), TMV("foundLowerBest", 18),
   TMV("foundLowerK", 5), TMV("foundLowerV", 4), TMV("greaterThan", 12),
   TMV("highEnough", 8), TMV("higher", 8), TMV("highestEquiv", 6),
   TMV("k", 5), TMV("lessThan", 12), TMV("lower", 8),
   TMV("lowerThanLow", 8), TMV("lowestEquiv", 6), TMV("m", 8),
   TMV("maybeBest", 18), TMV("subSet", 8), TMV("tooHigh", 8), TMV("v", 16),
   TMV("v", 6), TMV("v", 44), TMV("v'", 44), TMV("v1", 14), TMV("v1", 23),
   TMV("v2", 12), TMV("v2", 43), TMV("v3", 5), TMV("v3", 6), TMV("v3", 22),
   TMV("v4", 12), TMV("v5", 8), TMV("v5", 21), TMV("v6", 18),
   TMV("v7", 20), TMV("v9", 19), TMV("wanted", 8), TMV("x", 16),
   TMV("x", 1), TMV("x1", 14), TMV("x2", 12), TMV("x3", 5), TMV("x4", 12),
   TMV("x5", 8), TMV("x6", 18), TMV("y", 1), TMC(7, 45), TMC(7, 47),
   TMC(7, 49), TMC(7, 51), TMC(7, 53), TMC(7, 55), TMC(7, 57), TMC(7, 59),
   TMC(7, 60), TMC(7, 61), TMC(7, 56), TMC(7, 63), TMC(7, 65), TMC(8, 67),
   TMC(8, 69), TMC(8, 71), TMC(8, 73), TMC(8, 75), TMC(8, 77), TMC(8, 79),
   TMC(8, 81), TMC(8, 83), TMC(9, 85), TMC(10, 3), TMC(11, 3), TMC(12, 85),
   TMC(12, 87), TMC(12, 89), TMC(12, 90), TMC(12, 93), TMC(12, 94),
   TMC(12, 95), TMC(12, 96), TMC(13, 85), TMC(14, 3), TMC(15, 3),
   TMC(16, 97), TMC(17, 99), TMC(18, 100), TMC(19, 100), TMC(20, 102),
   TMC(22, 103), TMC(22, 104), TMC(22, 106), TMC(22, 109), TMC(23, 112),
   TMC(23, 113), TMC(24, 0), TMC(25, 29), TMC(26, 114), TMC(26, 116),
   TMC(26, 118), TMC(26, 121), TMC(27, 110), TMC(27, 7), TMC(28, 18),
   TMC(29, 100), TMC(30, 122), TMC(31, 122), TMC(32, 126), TMC(33, 9),
   TMC(34, 117), TMC(34, 127), TMC(35, 0), TMC(36, 130), TMC(36, 132),
   TMC(37, 58), TMC(38, 135), TMC(39, 1), TMC(40, 137), TMC(41, 138),
   TMC(42, 35), TMC(43, 25), TMC(44, 28), TMC(45, 35), TMC(46, 25),
   TMC(47, 28), TMC(48, 140), TMC(49, 17), TMC(50, 143), TMC(50, 146),
   TMC(50, 149), TMC(50, 153), TMC(51, 155), TMC(52, 157), TMC(52, 159),
   TMC(52, 163), TMC(52, 167), TMC(52, 171), TMC(52, 175), TMC(52, 179),
   TMC(52, 181), TMC(52, 185), TMC(52, 189), TMC(53, 3), TMC(54, 84)]
  end
  local
  val DT = Thm.disk_thm val read = Term.read_raw tmvector
  in
  fun op findLowestEquiv_tupled_AUX_def x = x
    val op findLowestEquiv_tupled_AUX_def =
    DT(((("multimap",0),[]),[]),
       [read"%67%1%86%136$0@@%127$0@%13%2%147$0@%9%38%148$0@%10%43%149$0@%11%46%146$0@%24%48%150$0@%25%49%151$0@%31%30%108%142%129%137$11@$9@@$1@@$0@%35%152$0@%26%40%153$0@%42%22%144$1@%5%6%103$14$12@$1@@%111%124%3%4%109%17%140$0@%121%73$2@$1@@@%34%144$0@%18%19%103$16$7@$1@@$26%75$24@%76$22@%77$20@%74$18@%78$16@%79$11@%121%73$7@$6@@@@@@@@@@$26%75$24@%76$22@%77$20@%74$18@%78$16@%79$11@$3@@@@@@@@||@|@|@$22%75$20@%76$18@%77$16@%74$14@%78$12@%79$7@%121%73$1@$0@@@@@@@@@@||@@%141$7@%73$1@$0@@%34%145$0@%7%8%104$13$4@$1@@%73$4@$3@@%73$1@$0@@||@|@@@%103$10$12@$1@@$20%75$18@%76$16@%77$14@%74$12@%78$10@%79$5@$7@@@@@@@@$20%75$18@%76$16@%77$14@%74$12@%78$10@%79$2@$7@@@@@@@@@||@||@||@|@@||@||@||@||@||@||@||@@|@"])
  fun op findLowestEquiv_tupled_primitive_def x = x
    val op findLowestEquiv_tupled_primitive_def =
    DT(((("multimap",1),[]),[]),
       [read"%86%135@%136%96%1%82%126$0@@%82%64%25%69%30%60%24%64%11%66%31%63%10%62%9%71%35%66%26%72%40%70%42%66%22%60%5%61%6%60%3%61%4%69%17%70%34%60%18%61%19%93%82%89%129%137$13@$14@@$15@@%122$12@@@%82%91$12@%80$11@$10@@@%82%92$10@%81$9@$8@@@%82%90$9@%73$7@$6@@@%82$16$17@$7@@%82%90%73$5@$4@@%141$18@%73$7@$6@@%34%145$0@%7%8%104$22$10@$1@@%73$10@$9@@%73$1@$0@@||@|@@@%82%88$3@%136$20@%75$13@%76$14@%77$16@%74$17@%78$19@%79$11@%121%73$5@$4@@@@@@@@@@@%82%88$3@%121$2@@@%82%90$2@%73$1@$0@@@%155$19$7@$1@@@@@@@@@@@@$20%75$13@%76$14@%77$16@%74$17@%78$19@%79$11@$3@@@@@@@%75$13@%76$14@%77$16@%74$17@%78$19@%79$15@$18@@@@@@@@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@@%82%64%25%69%30%60%24%64%11%66%31%63%10%62%9%71%35%66%26%72%40%70%42%66%22%60%5%61%6%60%3%61%4%69%17%70%34%60%18%61%19%93%82%89%129%137$13@$14@@$15@@%122$12@@@%82%91$12@%80$11@$10@@@%82%92$10@%81$9@$8@@@%82%90$9@%73$7@$6@@@%82$16$17@$7@@%82%90%73$5@$4@@%141$18@%73$7@$6@@%34%145$0@%7%8%104$22$10@$1@@%73$10@$9@@%73$1@$0@@||@|@@@%82%88$3@%136$20@%75$13@%76$14@%77$16@%74$17@%78$19@%79$11@%121%73$5@$4@@@@@@@@@@@%82%88$3@%121$2@@@%82%90$2@%73$1@$0@@@$19$7@$1@@@@@@@@@@@$20%75$13@%76$14@%77$16@%74$17@%78$19@%79$11@%121%73$7@$6@@@@@@@@@%75$13@%76$14@%77$16@%74$17@%78$19@%79$15@$18@@@@@@@@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@@%82%64%25%69%30%60%24%64%11%66%31%63%10%62%9%71%35%66%26%72%40%70%42%66%22%60%5%61%6%60%3%61%4%93%82%89%129%137$9@$10@@$11@@%122$8@@@%82%91$8@%80$7@$6@@@%82%92$6@%81$5@$4@@@%82%90$5@%73$3@$2@@@%82$12$13@$3@@%90%73$1@$0@@%141$14@%73$3@$2@@%34%145$0@%7%8%104$18$6@$1@@%73$6@$5@@%73$1@$0@@||@|@@@@@@@@$16%75$9@%76$10@%77$12@%74$13@%78$15@%79$7@%121%73$1@$0@@@@@@@@@%75$9@%76$10@%77$12@%74$13@%78$15@%79$11@$14@@@@@@@@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@@%82%69%30%64%25%60%24%64%11%66%31%63%10%62%9%71%35%66%26%72%40%70%42%66%22%60%5%61%6%93%82%89%129%137$7@$8@@$9@@%122$6@@@%82%91$6@%80$5@$4@@@%82%92$4@%81$3@$2@@@%82%90$3@%73$1@$0@@@%82%155$10$11@$1@@@%155$12$11@$1@@@@@@@@$14%75$7@%76$8@%77$10@%74$11@%78$12@%79$2@$13@@@@@@@%75$7@%76$8@%77$10@%74$11@%78$12@%79$9@$13@@@@@@@@|@|@|@|@|@|@|@|@|@|@|@|@|@|@@%69%30%64%25%60%24%64%11%66%31%63%10%62%9%71%35%66%26%72%40%70%42%66%22%60%5%61%6%93%82%89%129%137$7@$8@@$9@@%122$6@@@%82%91$6@%80$5@$4@@@%82%92$4@%81$3@$2@@@%82%90$3@%73$1@$0@@@%82%155$10$11@$1@@@$12$11@$1@@@@@@@$14%75$7@%76$8@%77$10@%74$11@%78$12@%79$5@$13@@@@@@@%75$7@%76$8@%77$10@%74$11@%78$12@%79$9@$13@@@@@@@@|@|@|@|@|@|@|@|@|@|@|@|@|@|@@@@@@|@@@"])
  fun op findLowestEquiv_curried_def x = x
    val op findLowestEquiv_curried_def =
    DT(((("multimap",2),[]),[]),
       [read"%62%51%63%53%64%54%60%55%64%56%66%57%69%58%88%134$6@$5@$4@$3@$2@$1@$0@@%135%75$6@%76$5@%77$4@%74$3@%78$2@%79$1@$0@@@@@@@@|@|@|@|@|@|@|@"])
  fun op testEquiv_def x = x
    val op testEquiv_def =
    DT(((("multimap",5),[]),[]),
       [read"%68%52%68%59%85%154$1@$0@@%101%82%95$1@%116%98%98%128@@@@@%82%83$1@%116%98%99%128@@@@@%82%95$0@%116%98%98%128@@@@@%84$0@%116%98%99%128@@@@@@@@%123@%101%82%83$1@%116%98%98%128@@@@@%83$0@%116%98%98%128@@@@@@%123@%101%82%94$1@%116%98%99%128@@@@@%94$0@%116%98%99%128@@@@@@%123@%107@@@@|@|@"])
  fun op findHighestEquiv_tupled_AUX_def x = x
    val op findHighestEquiv_tupled_AUX_def =
    DT(((("multimap",6),[]),[]),
       [read"%67%1%86%133$0@@%127$0@%12%2%147$0@%9%38%148$0@%10%43%149$0@%11%46%146$0@%24%48%150$0@%20%49%151$0@%31%30%108%142%129%137$11@$9@@$1@@$0@%35%152$0@%26%40%153$0@%42%22%144$1@%5%6%103$14$12@$1@@%111%124%3%4%109%14%140$0@%121%73$2@$1@@@%34%144$0@%15%16%103$16$7@$1@@$26%75$24@%76$22@%77$20@%74$18@%78$16@%79$8@%121%73$7@$6@@@@@@@@@@$26%75$24@%76$22@%77$20@%74$18@%78$16@%79$8@$3@@@@@@@@||@|@|@$22%75$20@%76$18@%77$16@%74$14@%78$12@%79$4@%121%73$1@$0@@@@@@@@@@||@@%141$7@%73$1@$0@@%34%145$0@%7%8%104$13$4@$1@@%73$4@$3@@%73$1@$0@@||@|@@@%103$10$12@$1@@$20%75$18@%76$16@%77$14@%74$12@%78$10@%79$2@$7@@@@@@@@$20%75$18@%76$16@%77$14@%74$12@%78$10@%79$5@$7@@@@@@@@@||@||@||@|@@||@||@||@||@||@||@||@@|@"])
  fun op findHighestEquiv_tupled_primitive_def x = x
    val op findHighestEquiv_tupled_primitive_def =
    DT(((("multimap",7),[]),[]),
       [read"%86%132@%133%96%1%82%126$0@@%82%64%20%69%30%60%24%64%11%66%31%63%10%62%9%71%35%66%26%72%40%70%42%66%22%60%5%61%6%60%3%61%4%69%14%70%34%60%15%61%16%93%82%89%129%137$13@$14@@$15@@%122$12@@@%82%91$12@%80$11@$10@@@%82%92$10@%81$9@$8@@@%82%90$9@%73$7@$6@@@%82$16$17@$7@@%82%90%73$5@$4@@%141$18@%73$7@$6@@%34%145$0@%7%8%104$22$10@$1@@%73$10@$9@@%73$1@$0@@||@|@@@%82%88$3@%133$20@%75$13@%76$14@%77$16@%74$17@%78$19@%79$8@%121%73$5@$4@@@@@@@@@@@%82%88$3@%121$2@@@%82%90$2@%73$1@$0@@@%155$19$7@$1@@@@@@@@@@@@$20%75$13@%76$14@%77$16@%74$17@%78$19@%79$8@$3@@@@@@@%75$13@%76$14@%77$16@%74$17@%78$19@%79$15@$18@@@@@@@@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@@%82%64%20%69%30%60%24%64%11%66%31%63%10%62%9%71%35%66%26%72%40%70%42%66%22%60%5%61%6%60%3%61%4%69%14%70%34%60%15%61%16%93%82%89%129%137$13@$14@@$15@@%122$12@@@%82%91$12@%80$11@$10@@@%82%92$10@%81$9@$8@@@%82%90$9@%73$7@$6@@@%82$16$17@$7@@%82%90%73$5@$4@@%141$18@%73$7@$6@@%34%145$0@%7%8%104$22$10@$1@@%73$10@$9@@%73$1@$0@@||@|@@@%82%88$3@%133$20@%75$13@%76$14@%77$16@%74$17@%78$19@%79$8@%121%73$5@$4@@@@@@@@@@@%82%88$3@%121$2@@@%82%90$2@%73$1@$0@@@$19$7@$1@@@@@@@@@@@$20%75$13@%76$14@%77$16@%74$17@%78$19@%79$8@%121%73$7@$6@@@@@@@@@%75$13@%76$14@%77$16@%74$17@%78$19@%79$15@$18@@@@@@@@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@@%82%64%20%69%30%60%24%64%11%66%31%63%10%62%9%71%35%66%26%72%40%70%42%66%22%60%5%61%6%60%3%61%4%93%82%89%129%137$9@$10@@$11@@%122$8@@@%82%91$8@%80$7@$6@@@%82%92$6@%81$5@$4@@@%82%90$5@%73$3@$2@@@%82$12$13@$3@@%90%73$1@$0@@%141$14@%73$3@$2@@%34%145$0@%7%8%104$18$6@$1@@%73$6@$5@@%73$1@$0@@||@|@@@@@@@@$16%75$9@%76$10@%77$12@%74$13@%78$15@%79$4@%121%73$1@$0@@@@@@@@@%75$9@%76$10@%77$12@%74$13@%78$15@%79$11@$14@@@@@@@@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@@%82%69%30%64%20%60%24%64%11%66%31%63%10%62%9%71%35%66%26%72%40%70%42%66%22%60%5%61%6%93%82%89%129%137$7@$8@@$9@@%122$6@@@%82%91$6@%80$5@$4@@@%82%92$4@%81$3@$2@@@%82%90$3@%73$1@$0@@@%82%155$10$11@$1@@@%155$12$11@$1@@@@@@@@$14%75$7@%76$8@%77$10@%74$11@%78$12@%79$5@$13@@@@@@@%75$7@%76$8@%77$10@%74$11@%78$12@%79$9@$13@@@@@@@@|@|@|@|@|@|@|@|@|@|@|@|@|@|@@%69%30%64%20%60%24%64%11%66%31%63%10%62%9%71%35%66%26%72%40%70%42%66%22%60%5%61%6%93%82%89%129%137$7@$8@@$9@@%122$6@@@%82%91$6@%80$5@$4@@@%82%92$4@%81$3@$2@@@%82%90$3@%73$1@$0@@@%82%155$10$11@$1@@@$12$11@$1@@@@@@@$14%75$7@%76$8@%77$10@%74$11@%78$12@%79$2@$13@@@@@@@%75$7@%76$8@%77$10@%74$11@%78$12@%79$9@$13@@@@@@@@|@|@|@|@|@|@|@|@|@|@|@|@|@|@@@@@@|@@@"])
  fun op findHighestEquiv_curried_def x = x
    val op findHighestEquiv_curried_def =
    DT(((("multimap",8),[]),[]),
       [read"%62%51%63%53%64%54%60%55%64%56%66%57%69%58%88%131$6@$5@$4@$3@$2@$1@$0@@%132%75$6@%76$5@%77$4@%74$3@%78$2@%79$1@$0@@@@@@@@|@|@|@|@|@|@|@"])
  fun op lookupBy0_def x = x
    val op lookupBy0_def =
    DT(((("multimap",11),[]),[]),
       [read"%62%9%63%10%64%11%60%24%66%29%87%138$4@$3@$2@$1@$0@@%139%134$4@$3@$2@$1@%118$4@@$0@%115@@%114@%28%110%23%112%125%27%21%112%125%50%32%97%106$5@%120$1@@@%102%143$9@$10@$5@$4@@%106$4@%114@@%114@@||@@%119%137$8@$7@@$2@$0@@||@@%119%137$6@$5@@$1@$2@@|@%141%131$5@$4@$3@$2@%117$5@@$1@%115@@%130%105%100%116%98%99%98%99%98%99%128@@@@@@@@@%105%100%116%98%99%99%99%98%99%128@@@@@@@@@%105%100%116%99%98%98%98%99%99%128@@@@@@@@@%105%100%116%98%98%98%98%99%99%128@@@@@@@@@%105%100%116%98%98%99%98%99%99%128@@@@@@@@@%105%100%116%98%98%99%98%99%99%128@@@@@@@@@%105%100%116%98%99%98%99%98%99%128@@@@@@@@@%105%100%116%99%99%98%98%98%99%128@@@@@@@@@%105%100%116%99%98%99%99%98%99%128@@@@@@@@@%105%100%116%98%99%99%98%98%99%128@@@@@@@@@%105%100%116%99%99%98%99%99%128@@@@@@@@%105%100%116%99%98%98%98%98%128@@@@@@@@%105%100%116%99%98%99%99%98%99%128@@@@@@@@@%105%100%116%98%98%98%98%99%99%128@@@@@@@@@%105%100%116%98%98%98%99%99%99%128@@@@@@@@@%105%100%116%98%99%99%98%98%99%128@@@@@@@@@%105%100%116%98%98%99%98%99%99%128@@@@@@@@@%105%100%116%99%98%99%98%99%99%128@@@@@@@@@%105%100%116%99%98%98%98%98%128@@@@@@@@%105%100%116%98%99%99%98%98%99%128@@@@@@@@@%105%100%116%98%99%98%98%99%99%128@@@@@@@@@%105%100%116%98%99%99%98%99%99%128@@@@@@@@@%105%100%116%98%99%98%99%98%99%128@@@@@@@@@%105%100%116%99%99%99%98%99%99%128@@@@@@@@@%105%100%116%99%98%98%98%98%128@@@@@@@@%105%100%116%99%99%98%98%98%99%128@@@@@@@@@%105%100%116%98%99%99%98%99%99%128@@@@@@@@@%105%100%116%99%98%99%98%99%99%128@@@@@@@@@%105%100%116%99%98%98%98%98%128@@@@@@@@%105%100%116%99%99%99%99%98%99%128@@@@@@@@@%105%100%116%98%98%98%98%99%99%128@@@@@@@@@%105%100%116%99%98%98%98%98%128@@@@@@@@%105%100%116%99%98%98%99%98%99%128@@@@@@@@@%105%100%116%98%99%98%99%98%99%128@@@@@@@@@%105%100%116%98%98%98%99%98%99%128@@@@@@@@@%105%100%116%99%98%98%99%98%99%128@@@@@@@@@%105%100%116%98%99%99%98%98%99%128@@@@@@@@@%105%100%116%98%98%99%98%99%99%128@@@@@@@@@%105%100%116%99%98%99%98%99%99%128@@@@@@@@@%105%100%116%99%98%98%98%98%128@@@@@@@@%105%100%116%98%99%99%98%98%99%128@@@@@@@@@%105%100%116%98%99%98%98%99%99%128@@@@@@@@@%105%100%116%98%99%99%98%99%99%128@@@@@@@@@%105%100%116%98%99%98%99%98%99%128@@@@@@@@@%105%100%116%99%99%99%98%99%99%128@@@@@@@@@%113@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%23$0|@@|@@|@|@|@|@|@"])
  fun op findLowestEquiv_ind x = x
    val op findLowestEquiv_ind =
    DT(((("multimap",3),
        [("bool",[15,25,26,27,53,54,58,63]),("multimap",[1,2]),
         ("pair",[5,16]),("relation",[101]),
         ("sat",[1,3,5,6,7,11,15])]),["DISK_THM"]),
       [read"%65%0%93%62%9%63%10%64%11%60%24%64%25%66%31%69%30%93%82%71%36%66%26%72%40%70%42%66%22%60%5%61%6%60%3%61%4%69%17%70%34%60%18%61%19%93%82%89%129%137$19@$18@@$14@@%122$12@@@%82%91$12@%80$11@$10@@@%82%92$10@%81$9@$8@@@%82%90$9@%73$7@$6@@@%82$17$16@$7@@%82%90%73$5@$4@@%141$13@%73$7@$6@@%34%145$0@%7%8%104$18$10@$1@@%73$10@$9@@%73$1@$0@@||@|@@@%82%88$3@%134$19@$18@$17@$16@$15@$11@%121%73$5@$4@@@@@%82%88$3@%121$2@@@%82%90$2@%73$1@$0@@@%155$15$7@$1@@@@@@@@@@@@$20$19@$18@$17@$16@$15@$11@$3@@|@|@|@|@|@|@|@|@|@|@|@|@|@@%82%71%36%66%26%72%40%70%42%66%22%60%5%61%6%60%3%61%4%69%17%70%34%60%18%61%19%93%82%89%129%137$19@$18@@$14@@%122$12@@@%82%91$12@%80$11@$10@@@%82%92$10@%81$9@$8@@@%82%90$9@%73$7@$6@@@%82$17$16@$7@@%82%90%73$5@$4@@%141$13@%73$7@$6@@%34%145$0@%7%8%104$18$10@$1@@%73$10@$9@@%73$1@$0@@||@|@@@%82%88$3@%134$19@$18@$17@$16@$15@$11@%121%73$5@$4@@@@@%82%88$3@%121$2@@@%82%90$2@%73$1@$0@@@$15$7@$1@@@@@@@@@@@$20$19@$18@$17@$16@$15@$11@%121%73$7@$6@@@@|@|@|@|@|@|@|@|@|@|@|@|@|@@%82%71%35%66%26%72%40%70%42%66%22%60%5%61%6%60%3%61%4%93%82%89%129%137$15@$14@@$10@@%122$8@@@%82%91$8@%80$7@$6@@@%82%92$6@%81$5@$4@@@%82%90$5@%73$3@$2@@@%82$13$12@$3@@%90%73$1@$0@@%141$9@%73$3@$2@@%34%145$0@%7%8%104$14$6@$1@@%73$6@$5@@%73$1@$0@@||@|@@@@@@@@$16$15@$14@$13@$12@$11@$7@%121%73$1@$0@@@@|@|@|@|@|@|@|@|@|@@%82%71%35%66%26%72%40%70%42%66%22%60%5%61%6%93%82%89%129%137$13@$12@@$8@@%122$6@@@%82%91$6@%80$5@$4@@@%82%92$4@%81$3@$2@@@%82%90$3@%73$1@$0@@@%82%155$11$10@$1@@@%155$9$10@$1@@@@@@@@$14$13@$12@$11@$10@$9@$2@$7@@|@|@|@|@|@|@|@@%71%35%66%26%72%40%70%42%66%22%60%5%61%6%93%82%89%129%137$13@$12@@$8@@%122$6@@@%82%91$6@%80$5@$4@@@%82%92$4@%81$3@$2@@@%82%90$3@%73$1@$0@@@%82%155$11$10@$1@@@$9$10@$1@@@@@@@$14$13@$12@$11@$10@$9@$5@$7@@|@|@|@|@|@|@|@@@@@@$7$6@$5@$4@$3@$2@$1@$0@@|@|@|@|@|@|@|@@%62%33%63%37%64%39%60%41%64%44%66%45%69%47$7$6@$5@$4@$3@$2@$1@$0@|@|@|@|@|@|@|@@|@",
        read"%64%25%69%30%60%24%64%11%66%31%63%10%62%9%71%35%66%26%72%40%70%42%66%22%60%5%61%6%60%3%61%4%69%17%70%34%60%18%61%19%93%82%89%129%137$13@$14@@$15@@%122$12@@@%82%91$12@%80$11@$10@@@%82%92$10@%81$9@$8@@@%82%90$9@%73$7@$6@@@%82$16$17@$7@@%82%90%73$5@$4@@%141$18@%73$7@$6@@%34%145$0@%7%8%104$22$10@$1@@%73$10@$9@@%73$1@$0@@||@|@@@%82%88$3@%136%1@%75$13@%76$14@%77$16@%74$17@%78$19@%79$11@%121%73$5@$4@@@@@@@@@@@%82%88$3@%121$2@@@%82%90$2@%73$1@$0@@@%155$19$7@$1@@@@@@@@@@@@%1%75$13@%76$14@%77$16@%74$17@%78$19@%79$11@$3@@@@@@@%75$13@%76$14@%77$16@%74$17@%78$19@%79$15@$18@@@@@@@@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@",
        read"%64%25%69%30%60%24%64%11%66%31%63%10%62%9%71%35%66%26%72%40%70%42%66%22%60%5%61%6%60%3%61%4%69%17%70%34%60%18%61%19%93%82%89%129%137$13@$14@@$15@@%122$12@@@%82%91$12@%80$11@$10@@@%82%92$10@%81$9@$8@@@%82%90$9@%73$7@$6@@@%82$16$17@$7@@%82%90%73$5@$4@@%141$18@%73$7@$6@@%34%145$0@%7%8%104$22$10@$1@@%73$10@$9@@%73$1@$0@@||@|@@@%82%88$3@%136%1@%75$13@%76$14@%77$16@%74$17@%78$19@%79$11@%121%73$5@$4@@@@@@@@@@@%82%88$3@%121$2@@@%82%90$2@%73$1@$0@@@$19$7@$1@@@@@@@@@@@%1%75$13@%76$14@%77$16@%74$17@%78$19@%79$11@%121%73$7@$6@@@@@@@@@%75$13@%76$14@%77$16@%74$17@%78$19@%79$15@$18@@@@@@@@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@",
        read"%64%25%69%30%60%24%64%11%66%31%63%10%62%9%71%35%66%26%72%40%70%42%66%22%60%5%61%6%60%3%61%4%93%82%89%129%137$9@$10@@$11@@%122$8@@@%82%91$8@%80$7@$6@@@%82%92$6@%81$5@$4@@@%82%90$5@%73$3@$2@@@%82$12$13@$3@@%90%73$1@$0@@%141$14@%73$3@$2@@%34%145$0@%7%8%104$18$6@$1@@%73$6@$5@@%73$1@$0@@||@|@@@@@@@@%1%75$9@%76$10@%77$12@%74$13@%78$15@%79$7@%121%73$1@$0@@@@@@@@@%75$9@%76$10@%77$12@%74$13@%78$15@%79$11@$14@@@@@@@@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@",
        read"%69%30%64%25%60%24%64%11%66%31%63%10%62%9%71%35%66%26%72%40%70%42%66%22%60%5%61%6%93%82%89%129%137$7@$8@@$9@@%122$6@@@%82%91$6@%80$5@$4@@@%82%92$4@%81$3@$2@@@%82%90$3@%73$1@$0@@@%82%155$10$11@$1@@@%155$12$11@$1@@@@@@@@%1%75$7@%76$8@%77$10@%74$11@%78$12@%79$2@$13@@@@@@@%75$7@%76$8@%77$10@%74$11@%78$12@%79$9@$13@@@@@@@@|@|@|@|@|@|@|@|@|@|@|@|@|@|@",
        read"%69%30%64%25%60%24%64%11%66%31%63%10%62%9%71%35%66%26%72%40%70%42%66%22%60%5%61%6%93%82%89%129%137$7@$8@@$9@@%122$6@@@%82%91$6@%80$5@$4@@@%82%92$4@%81$3@$2@@@%82%90$3@%73$1@$0@@@%82%155$10$11@$1@@@$12$11@$1@@@@@@@%1%75$7@%76$8@%77$10@%74$11@%78$12@%79$5@$13@@@@@@@%75$7@%76$8@%77$10@%74$11@%78$12@%79$9@$13@@@@@@@@|@|@|@|@|@|@|@|@|@|@|@|@|@|@",
        read"%126%1@"])
  fun op findLowestEquiv_def x = x
    val op findLowestEquiv_def =
    DT(((("multimap",4),
        [("bool",[15,58,123,129]),("combin",[19]),("multimap",[0,1,2]),
         ("option",[64]),("pair",[7,16,49,51]),
         ("relation",[121,126])]),["DISK_THM"]),
       [read"%66%31%69%30%64%25%60%24%64%11%63%10%62%9%88%134$0@$1@$2@$3@$4@$6@$5@@%142%129%137$0@$1@@$6@@$5@%35%152$0@%26%40%153$0@%42%22%144$1@%5%6%103$9$10@$1@@%111%124%3%4%109%17%140$0@%121%73$2@$1@@@%34%144$0@%18%19%103$17$7@$1@@%134$13@$14@$15@$16@$17@$11@%121%73$7@$6@@@@%134$13@$14@$15@$16@$17@$11@$3@@||@|@|@%134$9@$10@$11@$12@$13@$7@%121%73$1@$0@@@@||@@%141$12@%73$1@$0@@%34%145$0@%7%8%104$14$4@$1@@%73$4@$3@@%73$1@$0@@||@|@@@%103$11$10@$1@@%134$7@$8@$9@$10@$11@$5@$12@@%134$7@$8@$9@$10@$11@$2@$12@@@||@||@||@|@@|@|@|@|@|@|@|@",
        read"%64%25%69%30%60%24%64%11%66%31%63%10%62%9%71%35%66%26%72%40%70%42%66%22%60%5%61%6%60%3%61%4%69%17%70%34%60%18%61%19%93%82%89%129%137$13@$14@@$15@@%122$12@@@%82%91$12@%80$11@$10@@@%82%92$10@%81$9@$8@@@%82%90$9@%73$7@$6@@@%82$16$17@$7@@%82%90%73$5@$4@@%141$18@%73$7@$6@@%34%145$0@%7%8%104$22$10@$1@@%73$10@$9@@%73$1@$0@@||@|@@@%82%88$3@%136%1@%75$13@%76$14@%77$16@%74$17@%78$19@%79$11@%121%73$5@$4@@@@@@@@@@@%82%88$3@%121$2@@@%82%90$2@%73$1@$0@@@%155$19$7@$1@@@@@@@@@@@@%1%75$13@%76$14@%77$16@%74$17@%78$19@%79$11@$3@@@@@@@%75$13@%76$14@%77$16@%74$17@%78$19@%79$15@$18@@@@@@@@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@",
        read"%64%25%69%30%60%24%64%11%66%31%63%10%62%9%71%35%66%26%72%40%70%42%66%22%60%5%61%6%60%3%61%4%69%17%70%34%60%18%61%19%93%82%89%129%137$13@$14@@$15@@%122$12@@@%82%91$12@%80$11@$10@@@%82%92$10@%81$9@$8@@@%82%90$9@%73$7@$6@@@%82$16$17@$7@@%82%90%73$5@$4@@%141$18@%73$7@$6@@%34%145$0@%7%8%104$22$10@$1@@%73$10@$9@@%73$1@$0@@||@|@@@%82%88$3@%136%1@%75$13@%76$14@%77$16@%74$17@%78$19@%79$11@%121%73$5@$4@@@@@@@@@@@%82%88$3@%121$2@@@%82%90$2@%73$1@$0@@@$19$7@$1@@@@@@@@@@@%1%75$13@%76$14@%77$16@%74$17@%78$19@%79$11@%121%73$7@$6@@@@@@@@@%75$13@%76$14@%77$16@%74$17@%78$19@%79$15@$18@@@@@@@@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@",
        read"%64%25%69%30%60%24%64%11%66%31%63%10%62%9%71%35%66%26%72%40%70%42%66%22%60%5%61%6%60%3%61%4%93%82%89%129%137$9@$10@@$11@@%122$8@@@%82%91$8@%80$7@$6@@@%82%92$6@%81$5@$4@@@%82%90$5@%73$3@$2@@@%82$12$13@$3@@%90%73$1@$0@@%141$14@%73$3@$2@@%34%145$0@%7%8%104$18$6@$1@@%73$6@$5@@%73$1@$0@@||@|@@@@@@@@%1%75$9@%76$10@%77$12@%74$13@%78$15@%79$7@%121%73$1@$0@@@@@@@@@%75$9@%76$10@%77$12@%74$13@%78$15@%79$11@$14@@@@@@@@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@",
        read"%69%30%64%25%60%24%64%11%66%31%63%10%62%9%71%35%66%26%72%40%70%42%66%22%60%5%61%6%93%82%89%129%137$7@$8@@$9@@%122$6@@@%82%91$6@%80$5@$4@@@%82%92$4@%81$3@$2@@@%82%90$3@%73$1@$0@@@%82%155$10$11@$1@@@%155$12$11@$1@@@@@@@@%1%75$7@%76$8@%77$10@%74$11@%78$12@%79$2@$13@@@@@@@%75$7@%76$8@%77$10@%74$11@%78$12@%79$9@$13@@@@@@@@|@|@|@|@|@|@|@|@|@|@|@|@|@|@",
        read"%69%30%64%25%60%24%64%11%66%31%63%10%62%9%71%35%66%26%72%40%70%42%66%22%60%5%61%6%93%82%89%129%137$7@$8@@$9@@%122$6@@@%82%91$6@%80$5@$4@@@%82%92$4@%81$3@$2@@@%82%90$3@%73$1@$0@@@%82%155$10$11@$1@@@$12$11@$1@@@@@@@%1%75$7@%76$8@%77$10@%74$11@%78$12@%79$5@$13@@@@@@@%75$7@%76$8@%77$10@%74$11@%78$12@%79$9@$13@@@@@@@@|@|@|@|@|@|@|@|@|@|@|@|@|@|@",
        read"%126%1@"])
  fun op findHighestEquiv_ind x = x
    val op findHighestEquiv_ind =
    DT(((("multimap",9),
        [("bool",[15,25,26,27,53,54,58,63]),("multimap",[7,8]),
         ("pair",[5,16]),("relation",[101]),
         ("sat",[1,3,5,6,7,11,15])]),["DISK_THM"]),
       [read"%65%0%93%62%9%63%10%64%11%60%24%64%20%66%31%69%30%93%82%71%36%66%26%72%40%70%42%66%22%60%5%61%6%60%3%61%4%69%14%70%34%60%15%61%16%93%82%89%129%137$19@$18@@$14@@%122$12@@@%82%91$12@%80$11@$10@@@%82%92$10@%81$9@$8@@@%82%90$9@%73$7@$6@@@%82$17$16@$7@@%82%90%73$5@$4@@%141$13@%73$7@$6@@%34%145$0@%7%8%104$18$10@$1@@%73$10@$9@@%73$1@$0@@||@|@@@%82%88$3@%131$19@$18@$17@$16@$15@$8@%121%73$5@$4@@@@@%82%88$3@%121$2@@@%82%90$2@%73$1@$0@@@%155$15$7@$1@@@@@@@@@@@@$20$19@$18@$17@$16@$15@$8@$3@@|@|@|@|@|@|@|@|@|@|@|@|@|@@%82%71%36%66%26%72%40%70%42%66%22%60%5%61%6%60%3%61%4%69%14%70%34%60%15%61%16%93%82%89%129%137$19@$18@@$14@@%122$12@@@%82%91$12@%80$11@$10@@@%82%92$10@%81$9@$8@@@%82%90$9@%73$7@$6@@@%82$17$16@$7@@%82%90%73$5@$4@@%141$13@%73$7@$6@@%34%145$0@%7%8%104$18$10@$1@@%73$10@$9@@%73$1@$0@@||@|@@@%82%88$3@%131$19@$18@$17@$16@$15@$8@%121%73$5@$4@@@@@%82%88$3@%121$2@@@%82%90$2@%73$1@$0@@@$15$7@$1@@@@@@@@@@@$20$19@$18@$17@$16@$15@$8@%121%73$7@$6@@@@|@|@|@|@|@|@|@|@|@|@|@|@|@@%82%71%35%66%26%72%40%70%42%66%22%60%5%61%6%60%3%61%4%93%82%89%129%137$15@$14@@$10@@%122$8@@@%82%91$8@%80$7@$6@@@%82%92$6@%81$5@$4@@@%82%90$5@%73$3@$2@@@%82$13$12@$3@@%90%73$1@$0@@%141$9@%73$3@$2@@%34%145$0@%7%8%104$14$6@$1@@%73$6@$5@@%73$1@$0@@||@|@@@@@@@@$16$15@$14@$13@$12@$11@$4@%121%73$1@$0@@@@|@|@|@|@|@|@|@|@|@@%82%71%35%66%26%72%40%70%42%66%22%60%5%61%6%93%82%89%129%137$13@$12@@$8@@%122$6@@@%82%91$6@%80$5@$4@@@%82%92$4@%81$3@$2@@@%82%90$3@%73$1@$0@@@%82%155$11$10@$1@@@%155$9$10@$1@@@@@@@@$14$13@$12@$11@$10@$9@$5@$7@@|@|@|@|@|@|@|@@%71%35%66%26%72%40%70%42%66%22%60%5%61%6%93%82%89%129%137$13@$12@@$8@@%122$6@@@%82%91$6@%80$5@$4@@@%82%92$4@%81$3@$2@@@%82%90$3@%73$1@$0@@@%82%155$11$10@$1@@@$9$10@$1@@@@@@@$14$13@$12@$11@$10@$9@$2@$7@@|@|@|@|@|@|@|@@@@@@$7$6@$5@$4@$3@$2@$1@$0@@|@|@|@|@|@|@|@@%62%33%63%37%64%39%60%41%64%44%66%45%69%47$7$6@$5@$4@$3@$2@$1@$0@|@|@|@|@|@|@|@@|@",
        read"%64%20%69%30%60%24%64%11%66%31%63%10%62%9%71%35%66%26%72%40%70%42%66%22%60%5%61%6%60%3%61%4%69%14%70%34%60%15%61%16%93%82%89%129%137$13@$14@@$15@@%122$12@@@%82%91$12@%80$11@$10@@@%82%92$10@%81$9@$8@@@%82%90$9@%73$7@$6@@@%82$16$17@$7@@%82%90%73$5@$4@@%141$18@%73$7@$6@@%34%145$0@%7%8%104$22$10@$1@@%73$10@$9@@%73$1@$0@@||@|@@@%82%88$3@%133%1@%75$13@%76$14@%77$16@%74$17@%78$19@%79$8@%121%73$5@$4@@@@@@@@@@@%82%88$3@%121$2@@@%82%90$2@%73$1@$0@@@%155$19$7@$1@@@@@@@@@@@@%1%75$13@%76$14@%77$16@%74$17@%78$19@%79$8@$3@@@@@@@%75$13@%76$14@%77$16@%74$17@%78$19@%79$15@$18@@@@@@@@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@",
        read"%64%20%69%30%60%24%64%11%66%31%63%10%62%9%71%35%66%26%72%40%70%42%66%22%60%5%61%6%60%3%61%4%69%14%70%34%60%15%61%16%93%82%89%129%137$13@$14@@$15@@%122$12@@@%82%91$12@%80$11@$10@@@%82%92$10@%81$9@$8@@@%82%90$9@%73$7@$6@@@%82$16$17@$7@@%82%90%73$5@$4@@%141$18@%73$7@$6@@%34%145$0@%7%8%104$22$10@$1@@%73$10@$9@@%73$1@$0@@||@|@@@%82%88$3@%133%1@%75$13@%76$14@%77$16@%74$17@%78$19@%79$8@%121%73$5@$4@@@@@@@@@@@%82%88$3@%121$2@@@%82%90$2@%73$1@$0@@@$19$7@$1@@@@@@@@@@@%1%75$13@%76$14@%77$16@%74$17@%78$19@%79$8@%121%73$7@$6@@@@@@@@@%75$13@%76$14@%77$16@%74$17@%78$19@%79$15@$18@@@@@@@@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@",
        read"%64%20%69%30%60%24%64%11%66%31%63%10%62%9%71%35%66%26%72%40%70%42%66%22%60%5%61%6%60%3%61%4%93%82%89%129%137$9@$10@@$11@@%122$8@@@%82%91$8@%80$7@$6@@@%82%92$6@%81$5@$4@@@%82%90$5@%73$3@$2@@@%82$12$13@$3@@%90%73$1@$0@@%141$14@%73$3@$2@@%34%145$0@%7%8%104$18$6@$1@@%73$6@$5@@%73$1@$0@@||@|@@@@@@@@%1%75$9@%76$10@%77$12@%74$13@%78$15@%79$4@%121%73$1@$0@@@@@@@@@%75$9@%76$10@%77$12@%74$13@%78$15@%79$11@$14@@@@@@@@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@",
        read"%69%30%64%20%60%24%64%11%66%31%63%10%62%9%71%35%66%26%72%40%70%42%66%22%60%5%61%6%93%82%89%129%137$7@$8@@$9@@%122$6@@@%82%91$6@%80$5@$4@@@%82%92$4@%81$3@$2@@@%82%90$3@%73$1@$0@@@%82%155$10$11@$1@@@%155$12$11@$1@@@@@@@@%1%75$7@%76$8@%77$10@%74$11@%78$12@%79$5@$13@@@@@@@%75$7@%76$8@%77$10@%74$11@%78$12@%79$9@$13@@@@@@@@|@|@|@|@|@|@|@|@|@|@|@|@|@|@",
        read"%69%30%64%20%60%24%64%11%66%31%63%10%62%9%71%35%66%26%72%40%70%42%66%22%60%5%61%6%93%82%89%129%137$7@$8@@$9@@%122$6@@@%82%91$6@%80$5@$4@@@%82%92$4@%81$3@$2@@@%82%90$3@%73$1@$0@@@%82%155$10$11@$1@@@$12$11@$1@@@@@@@%1%75$7@%76$8@%77$10@%74$11@%78$12@%79$2@$13@@@@@@@%75$7@%76$8@%77$10@%74$11@%78$12@%79$9@$13@@@@@@@@|@|@|@|@|@|@|@|@|@|@|@|@|@|@",
        read"%126%1@"])
  fun op findHighestEquiv_def x = x
    val op findHighestEquiv_def =
    DT(((("multimap",10),
        [("bool",[15,58,123,129]),("combin",[19]),("multimap",[6,7,8]),
         ("option",[64]),("pair",[7,16,49,51]),
         ("relation",[121,126])]),["DISK_THM"]),
       [read"%66%31%69%30%60%24%64%20%64%11%63%10%62%9%88%131$0@$1@$2@$4@$3@$6@$5@@%142%129%137$0@$1@@$6@@$5@%35%152$0@%26%40%153$0@%42%22%144$1@%5%6%103$9$11@$1@@%111%124%3%4%109%14%140$0@%121%73$2@$1@@@%34%144$0@%15%16%103$16$7@$1@@%131$13@$14@$15@$17@$16@$8@%121%73$7@$6@@@@%131$13@$14@$15@$17@$16@$8@$3@@||@|@|@%131$9@$10@$11@$13@$12@$4@%121%73$1@$0@@@@||@@%141$12@%73$1@$0@@%34%145$0@%7%8%104$13$4@$1@@%73$4@$3@@%73$1@$0@@||@|@@@%103$10$11@$1@@%131$7@$8@$9@$11@$10@$2@$12@@%131$7@$8@$9@$11@$10@$5@$12@@@||@||@||@|@@|@|@|@|@|@|@|@",
        read"%64%20%69%30%60%24%64%11%66%31%63%10%62%9%71%35%66%26%72%40%70%42%66%22%60%5%61%6%60%3%61%4%69%14%70%34%60%15%61%16%93%82%89%129%137$13@$14@@$15@@%122$12@@@%82%91$12@%80$11@$10@@@%82%92$10@%81$9@$8@@@%82%90$9@%73$7@$6@@@%82$16$17@$7@@%82%90%73$5@$4@@%141$18@%73$7@$6@@%34%145$0@%7%8%104$22$10@$1@@%73$10@$9@@%73$1@$0@@||@|@@@%82%88$3@%133%1@%75$13@%76$14@%77$16@%74$17@%78$19@%79$8@%121%73$5@$4@@@@@@@@@@@%82%88$3@%121$2@@@%82%90$2@%73$1@$0@@@%155$19$7@$1@@@@@@@@@@@@%1%75$13@%76$14@%77$16@%74$17@%78$19@%79$8@$3@@@@@@@%75$13@%76$14@%77$16@%74$17@%78$19@%79$15@$18@@@@@@@@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@",
        read"%64%20%69%30%60%24%64%11%66%31%63%10%62%9%71%35%66%26%72%40%70%42%66%22%60%5%61%6%60%3%61%4%69%14%70%34%60%15%61%16%93%82%89%129%137$13@$14@@$15@@%122$12@@@%82%91$12@%80$11@$10@@@%82%92$10@%81$9@$8@@@%82%90$9@%73$7@$6@@@%82$16$17@$7@@%82%90%73$5@$4@@%141$18@%73$7@$6@@%34%145$0@%7%8%104$22$10@$1@@%73$10@$9@@%73$1@$0@@||@|@@@%82%88$3@%133%1@%75$13@%76$14@%77$16@%74$17@%78$19@%79$8@%121%73$5@$4@@@@@@@@@@@%82%88$3@%121$2@@@%82%90$2@%73$1@$0@@@$19$7@$1@@@@@@@@@@@%1%75$13@%76$14@%77$16@%74$17@%78$19@%79$8@%121%73$7@$6@@@@@@@@@%75$13@%76$14@%77$16@%74$17@%78$19@%79$15@$18@@@@@@@@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@",
        read"%64%20%69%30%60%24%64%11%66%31%63%10%62%9%71%35%66%26%72%40%70%42%66%22%60%5%61%6%60%3%61%4%93%82%89%129%137$9@$10@@$11@@%122$8@@@%82%91$8@%80$7@$6@@@%82%92$6@%81$5@$4@@@%82%90$5@%73$3@$2@@@%82$12$13@$3@@%90%73$1@$0@@%141$14@%73$3@$2@@%34%145$0@%7%8%104$18$6@$1@@%73$6@$5@@%73$1@$0@@||@|@@@@@@@@%1%75$9@%76$10@%77$12@%74$13@%78$15@%79$4@%121%73$1@$0@@@@@@@@@%75$9@%76$10@%77$12@%74$13@%78$15@%79$11@$14@@@@@@@@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@|@",
        read"%69%30%64%20%60%24%64%11%66%31%63%10%62%9%71%35%66%26%72%40%70%42%66%22%60%5%61%6%93%82%89%129%137$7@$8@@$9@@%122$6@@@%82%91$6@%80$5@$4@@@%82%92$4@%81$3@$2@@@%82%90$3@%73$1@$0@@@%82%155$10$11@$1@@@%155$12$11@$1@@@@@@@@%1%75$7@%76$8@%77$10@%74$11@%78$12@%79$5@$13@@@@@@@%75$7@%76$8@%77$10@%74$11@%78$12@%79$9@$13@@@@@@@@|@|@|@|@|@|@|@|@|@|@|@|@|@|@",
        read"%69%30%64%20%60%24%64%11%66%31%63%10%62%9%71%35%66%26%72%40%70%42%66%22%60%5%61%6%93%82%89%129%137$7@$8@@$9@@%122$6@@@%82%91$6@%80$5@$4@@@%82%92$4@%81$3@$2@@@%82%90$3@%73$1@$0@@@%82%155$10$11@$1@@@$12$11@$1@@@@@@@%1%75$7@%76$8@%77$10@%74$11@%78$12@%79$2@$13@@@@@@@%75$7@%76$8@%77$10@%74$11@%78$12@%79$9@$13@@@@@@@@|@|@|@|@|@|@|@|@|@|@|@|@|@|@",
        read"%126%1@"])
  end
  val _ = DB.bindl "multimap"
  [("findLowestEquiv_tupled_AUX_def",
    findLowestEquiv_tupled_AUX_def,
    DB.Def),
   ("findLowestEquiv_tupled_primitive_def",
    findLowestEquiv_tupled_primitive_def,
    DB.Def),
   ("findLowestEquiv_curried_def",findLowestEquiv_curried_def,DB.Def),
   ("testEquiv_def",testEquiv_def,DB.Def),
   ("findHighestEquiv_tupled_AUX_def",
    findHighestEquiv_tupled_AUX_def,
    DB.Def),
   ("findHighestEquiv_tupled_primitive_def",
    findHighestEquiv_tupled_primitive_def,
    DB.Def),
   ("findHighestEquiv_curried_def",findHighestEquiv_curried_def,DB.Def),
   ("lookupBy0_def",lookupBy0_def,DB.Def),
   ("findLowestEquiv_ind",findLowestEquiv_ind,DB.Thm),
   ("findLowestEquiv_def",findLowestEquiv_def,DB.Thm),
   ("findHighestEquiv_ind",findHighestEquiv_ind,DB.Thm),
   ("findHighestEquiv_def",findHighestEquiv_def,DB.Thm)]

  local open Portable GrammarSpecials Parse
    fun UTOFF f = Feedback.trace("Parse.unicode_trace_off_complaints",0)f
  in
  val _ = mk_local_grms [("missing_pervasivesTheory.missing_pervasives_grammars",
                          missing_pervasivesTheory.missing_pervasives_grammars),
                         ("lem_set_extraTheory.lem_set_extra_grammars",
                          lem_set_extraTheory.lem_set_extra_grammars)]
  val _ = List.app (update_grms reveal) []
  val _ = update_grms
       temp_thytype_abbrev
       ({Thy="multimap",Name="multimap"}, (T"prod" "pair" [U"'k", U"'v"] --> bool))
  val _ = update_grms
       temp_thytype_abbrev
       ({Thy="multimap",Name="key_equiv"}, (U"'k" --> (U"'k" --> bool)))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("findLowestEquiv_tupled_aux", (Term.prim_mk_const { Name = "findLowestEquiv_tupled_aux", Thy = "multimap"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("findLowestEquiv_tupled_aux", (Term.prim_mk_const { Name = "findLowestEquiv_tupled_aux", Thy = "multimap"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("findLowestEquiv_tupled", (Term.prim_mk_const { Name = "findLowestEquiv_tupled", Thy = "multimap"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("findLowestEquiv_tupled", (Term.prim_mk_const { Name = "findLowestEquiv_tupled", Thy = "multimap"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("findLowestEquiv", (Term.prim_mk_const { Name = "findLowestEquiv", Thy = "multimap"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("findLowestEquiv", (Term.prim_mk_const { Name = "findLowestEquiv", Thy = "multimap"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("testEquiv", (Term.prim_mk_const { Name = "testEquiv", Thy = "multimap"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("testEquiv", (Term.prim_mk_const { Name = "testEquiv", Thy = "multimap"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("findHighestEquiv_tupled_aux", (Term.prim_mk_const { Name = "findHighestEquiv_tupled_aux", Thy = "multimap"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("findHighestEquiv_tupled_aux", (Term.prim_mk_const { Name = "findHighestEquiv_tupled_aux", Thy = "multimap"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("findHighestEquiv_tupled", (Term.prim_mk_const { Name = "findHighestEquiv_tupled", Thy = "multimap"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("findHighestEquiv_tupled", (Term.prim_mk_const { Name = "findHighestEquiv_tupled", Thy = "multimap"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("findHighestEquiv", (Term.prim_mk_const { Name = "findHighestEquiv", Thy = "multimap"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("findHighestEquiv", (Term.prim_mk_const { Name = "findHighestEquiv", Thy = "multimap"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("lookupBy0", (Term.prim_mk_const { Name = "lookupBy0", Thy = "multimap"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("lookupBy0", (Term.prim_mk_const { Name = "lookupBy0", Thy = "multimap"}))
  val multimap_grammars = Parse.current_lgrms()
  end
  val _ = Theory.LoadableThyData.temp_encoded_update {
    thy = "multimap",
    thydataty = "compute",
    data = "multimap.testEquiv_def multimap.lookupBy0_def"
  }

val _ = if !Globals.print_thy_loads then print "done\n" else ()
val _ = Theory.load_complete "multimap"
end
