structure byte_sequenceTheory :> byte_sequenceTheory =
struct
  val _ = if !Globals.print_thy_loads then print "Loading byte_sequenceTheory ... " else ()
  open Type Term Thm
  infixr -->

  fun C s t ty = mk_thy_const{Name=s,Thy=t,Ty=ty}
  fun T s t A = mk_thy_type{Tyop=s, Thy=t,Args=A}
  fun V s q = mk_var(s,q)
  val U     = mk_vartype
  (*  Parents *)
  local open errorTheory missing_pervasivesTheory
  in end;
  val _ = Theory.link_parents
          ("byte_sequence",
          Arbnum.fromString "1445438726",
          Arbnum.fromString "742620")
          [("missing_pervasives",
           Arbnum.fromString "1445345863",
           Arbnum.fromString "394757"),
           ("error",
           Arbnum.fromString "1445345851",
           Arbnum.fromString "664208")];
  val _ = Theory.incorporate_types "byte_sequence" [("byte_sequence", 0)];

  val idvector = 
    let fun ID(thy,oth) = {Thy = thy, Other = oth}
    in Vector.fromList
  [ID("min", "fun"), ID("byte_sequence", "byte_sequence"),
   ID("num", "num"), ID("error", "error"), ID("list", "list"),
   ID("string", "char"), ID("pair", "prod"), ID("fcp", "cart"),
   ID("fcp", "bit0"), ID("one", "one"), ID("min", "bool"),
   ID("lem_basic_classes", "Ord_class"),
   ID("lem_basic_classes", "ordering"), ID("ind_type", "recspace"),
   ID("bool", "!"), ID("arithmetic", "+"), ID("pair", ","),
   ID("arithmetic", "-"), ID("bool", "/\\"), ID("num", "0"),
   ID("min", "="), ID("min", "==>"), ID("arithmetic", ">="),
   ID("bool", "?"), ID("min", "@"), ID("list", "APPEND"),
   ID("bool", "ARB"), ID("arithmetic", "BIT1"), ID("arithmetic", "BIT2"),
   ID("ind_type", "BOTTOM"), ID("string", "CHR"), ID("bool", "COND"),
   ID("list", "CONS"), ID("ind_type", "CONSTR"), ID("bool", "DATATYPE"),
   ID("lem_basic_classes", "EQ"), ID("bool", "F"), ID("list", "FLAT"),
   ID("lem_basic_classes", "GT"), ID("combin", "I"),
   ID("string", "IMPLODE"), ID("combin", "K"), ID("list", "LENGTH"),
   ID("bool", "LET"), ID("lem_basic_classes", "LT"), ID("list", "MAP"),
   ID("list", "NIL"), ID("arithmetic", "NUMERAL"),
   ID("lem_basic_classes", "Ord_class_compare_method_fupd"),
   ID("lem_basic_classes", "Ord_class_isGreaterEqual_method_fupd"),
   ID("lem_basic_classes", "Ord_class_isGreater_method_fupd"),
   ID("lem_basic_classes", "Ord_class_isLessEqual_method_fupd"),
   ID("lem_basic_classes", "Ord_class_isLess_method_fupd"),
   ID("num", "SUC"), ID("byte_sequence", "Sequence"), ID("bool", "T"),
   ID("bool", "TYPE_DEFINITION"), ID("pair", "UNCURRY"),
   ID("relation", "WF"), ID("relation", "WFREC"), ID("arithmetic", "ZERO"),
   ID("bool", "\\/"), ID("byte_sequence", "byte_list_of_byte_sequence"),
   ID("byte_sequence", "byte_sequence_CASE"),
   ID("byte_sequence", "byte_sequence_size"),
   ID("missing_pervasives", "compare_byte"),
   ID("byte_sequence", "compare_byte_sequence"),
   ID("byte_sequence", "concat0"), ID("byte_sequence", "create"),
   ID("byte_sequence", "dropbytes"),
   ID("byte_sequence", "dropbytes_tupled"), ID("byte_sequence", "empty"),
   ID("byte_sequence", "equal"), ID("byte_sequence", "equal_tupled"),
   ID("error", "error_bind"), ID("error", "fail0"),
   ID("byte_sequence", "from_byte_lists"), ID("missing_pervasives", "id"),
   ID("byte_sequence", "instance_Basic_classes_Ord_Byte_sequence_byte_sequence_dict"),
   ID("missing_pervasives", "length"), ID("byte_sequence", "length0"),
   ID("lem_list", "lexicographic_compare"), ID("list", "list_CASE"),
   ID("list", "list_size"),
   ID("missing_pervasives", "list_take_with_accum"), ID("words", "n2w"),
   ID("missing_pervasives", "naturalZero"), ID("arithmetic", "num_CASE"),
   ID("combin", "o"), ID("byte_sequence", "offset_and_cut"),
   ID("pair", "pair_CASE"), ID("byte_sequence", "partition0"),
   ID("byte_sequence", "partition_with_length"),
   ID("byte_sequence", "read_2_bytes_be"),
   ID("byte_sequence", "read_2_bytes_le"),
   ID("byte_sequence", "read_4_bytes_be"),
   ID("byte_sequence", "read_4_bytes_le"),
   ID("byte_sequence", "read_8_bytes_be"),
   ID("byte_sequence", "read_8_bytes_le"),
   ID("byte_sequence", "read_char"), ID("byte_sequence", "repeat"),
   ID("byte_sequence", "repeat_tupled"), ID("error", "return"),
   ID("byte_sequence", "string_of_byte_sequence"),
   ID("byte_sequence", "takebytes"),
   ID("byte_sequence", "takebytes_r_with_length"),
   ID("byte_sequence", "takebytes_with_length"), ID("words", "w2n"),
   ID("byte_sequence", "zero_pad_to_length"), ID("byte_sequence", "zeros"),
   ID("bool", "~")]
  end;
  local open SharingTables
  in
  val tyvector = build_type_vector idvector
  [TYOP [1], TYOP [2], TYOP [0, 1, 0], TYOP [0, 0, 0], TYOP [0, 1, 3],
   TYOP [3, 0], TYOP [0, 0, 5], TYOP [0, 1, 6], TYOP [0, 1, 7], TYOP [5],
   TYOP [4, 9], TYOP [0, 0, 10], TYV "'a", TYOP [4, 12], TYOP [6, 1, 12],
   TYOP [0, 14, 13], TYOP [0, 12, 13], TYOP [0, 1, 16], TYOP [9],
   TYOP [8, 18], TYOP [8, 19], TYOP [8, 20], TYOP [10], TYOP [7, 22, 21],
   TYOP [6, 23, 0], TYOP [3, 24], TYOP [0, 0, 25], TYOP [6, 23, 23],
   TYOP [6, 23, 27], TYOP [6, 23, 28], TYOP [6, 23, 29], TYOP [6, 23, 30],
   TYOP [6, 23, 31], TYOP [6, 23, 32], TYOP [6, 33, 0], TYOP [3, 34],
   TYOP [0, 0, 35], TYOP [6, 29, 0], TYOP [3, 37], TYOP [0, 0, 38],
   TYOP [6, 27, 0], TYOP [3, 40], TYOP [0, 0, 41], TYOP [6, 0, 0],
   TYOP [3, 43], TYOP [0, 0, 44], TYOP [0, 1, 45], TYOP [0, 1, 46],
   TYOP [0, 0, 1], TYOP [11, 0], TYOP [4, 23], TYOP [4, 50],
   TYOP [0, 51, 0], TYOP [0, 43, 22], TYOP [0, 0, 22], TYOP [0, 0, 54],
   TYOP [6, 1, 0], TYOP [0, 56, 5], TYOP [0, 23, 0], TYOP [0, 1, 58],
   TYOP [4, 0], TYOP [0, 60, 0], TYOP [12], TYOP [0, 0, 62],
   TYOP [0, 0, 63], TYOP [0, 50, 12], TYOP [0, 65, 12], TYOP [0, 0, 66],
   TYOP [0, 0, 50], TYOP [0, 50, 0], TYOP [13, 50], TYOP [0, 70, 22],
   TYOP [0, 60, 22], TYOP [0, 12, 22], TYOP [0, 1, 73], TYOP [0, 1, 54],
   TYOP [0, 60, 72], TYOP [0, 43, 53], TYOP [0, 14, 22], TYOP [0, 14, 78],
   TYOP [0, 56, 22], TYOP [0, 56, 80], TYOP [0, 69, 22], TYOP [0, 0, 12],
   TYOP [0, 0, 70], TYOP [0, 73, 22], TYOP [0, 54, 22], TYOP [0, 23, 22],
   TYOP [0, 87, 22], TYOP [0, 86, 22], TYOP [0, 55, 22], TYOP [0, 90, 22],
   TYOP [0, 72, 22], TYOP [0, 92, 22], TYOP [0, 65, 22], TYOP [0, 94, 22],
   TYOP [0, 74, 22], TYOP [0, 96, 22], TYOP [0, 75, 22], TYOP [0, 98, 22],
   TYOP [0, 71, 22], TYOP [0, 100, 22], TYOP [0, 50, 22],
   TYOP [0, 102, 22], TYOP [0, 51, 22], TYOP [0, 104, 22], TYOP [0, 1, 22],
   TYOP [0, 106, 22], TYOP [0, 1, 1], TYOP [0, 1, 108], TYOP [0, 0, 43],
   TYOP [0, 0, 110], TYOP [0, 0, 24], TYOP [0, 23, 112], TYOP [0, 23, 27],
   TYOP [0, 23, 114], TYOP [0, 27, 28], TYOP [0, 23, 116],
   TYOP [0, 28, 29], TYOP [0, 23, 118], TYOP [0, 29, 30],
   TYOP [0, 23, 120], TYOP [0, 30, 31], TYOP [0, 23, 122],
   TYOP [0, 31, 32], TYOP [0, 23, 124], TYOP [0, 32, 33],
   TYOP [0, 23, 126], TYOP [0, 12, 14], TYOP [0, 1, 128], TYOP [0, 0, 56],
   TYOP [0, 1, 130], TYOP [0, 0, 40], TYOP [0, 27, 132], TYOP [0, 0, 37],
   TYOP [0, 29, 134], TYOP [0, 0, 34], TYOP [0, 33, 136], TYOP [0, 22, 22],
   TYOP [0, 22, 138], TYOP [0, 12, 73], TYOP [0, 49, 22],
   TYOP [0, 49, 141], TYOP [0, 23, 87], TYOP [0, 5, 22], TYOP [0, 5, 144],
   TYOP [0, 44, 22], TYOP [0, 44, 146], TYOP [0, 25, 22],
   TYOP [0, 25, 148], TYOP [0, 41, 22], TYOP [0, 41, 150],
   TYOP [0, 38, 22], TYOP [0, 38, 152], TYOP [0, 35, 22],
   TYOP [0, 35, 154], TYOP [0, 61, 22], TYOP [0, 61, 156],
   TYOP [0, 53, 22], TYOP [0, 53, 158], TYOP [0, 15, 22],
   TYOP [0, 15, 160], TYOP [0, 57, 22], TYOP [0, 57, 162],
   TYOP [0, 13, 22], TYOP [0, 13, 164], TYOP [0, 50, 102],
   TYOP [0, 10, 22], TYOP [0, 10, 167], TYOP [0, 1, 106], TYOP [0, 62, 22],
   TYOP [0, 62, 170], TYOP [0, 70, 71], TYOP [0, 83, 22],
   TYOP [0, 173, 22], TYOP [0, 84, 22], TYOP [0, 175, 22],
   TYOP [0, 76, 22], TYOP [0, 177, 76], TYOP [0, 77, 22],
   TYOP [0, 179, 77], TYOP [0, 79, 22], TYOP [0, 181, 79],
   TYOP [0, 81, 22], TYOP [0, 183, 81], TYOP [0, 50, 50],
   TYOP [0, 50, 185], TYOP [0, 1, 9], TYOP [0, 0, 3], TYOP [0, 22, 188],
   TYOP [0, 5, 5], TYOP [0, 5, 190], TYOP [0, 22, 191], TYOP [0, 13, 13],
   TYOP [0, 12, 193], TYOP [0, 60, 60], TYOP [0, 0, 195],
   TYOP [0, 23, 185], TYOP [0, 10, 10], TYOP [0, 9, 198], TYOP [0, 1, 70],
   TYOP [0, 200, 70], TYOP [0, 50, 201], TYOP [0, 1, 202],
   TYOP [0, 51, 50], TYOP [0, 55, 55], TYOP [0, 55, 205], TYOP [0, 64, 64],
   TYOP [0, 64, 207], TYOP [0, 50, 1], TYOP [0, 190, 190],
   TYOP [0, 198, 198], TYOP [0, 2, 2], TYOP [0, 170, 170],
   TYOP [0, 50, 10], TYOP [0, 23, 9], TYOP [0, 215, 214], TYOP [0, 49, 49],
   TYOP [0, 207, 217], TYOP [0, 205, 217], TYOP [0, 71, 175],
   TYOP [0, 24, 41], TYOP [0, 23, 42], TYOP [0, 222, 221],
   TYOP [0, 24, 38], TYOP [0, 23, 39], TYOP [0, 225, 224],
   TYOP [0, 24, 35], TYOP [0, 23, 36], TYOP [0, 228, 227],
   TYOP [0, 61, 61], TYOP [0, 230, 61], TYOP [0, 76, 231],
   TYOP [0, 53, 53], TYOP [0, 233, 53], TYOP [0, 77, 234],
   TYOP [0, 15, 15], TYOP [0, 236, 15], TYOP [0, 79, 237],
   TYOP [0, 57, 57], TYOP [0, 239, 57], TYOP [0, 81, 240],
   TYOP [0, 0, 103], TYOP [0, 69, 0], TYOP [0, 0, 243], TYOP [0, 50, 5],
   TYOP [0, 245, 5], TYOP [0, 0, 246], TYOP [0, 185, 50], TYOP [0, 0, 248],
   TYOP [0, 23, 62], TYOP [0, 23, 250], TYOP [0, 6, 5], TYOP [0, 5, 252],
   TYOP [0, 45, 44], TYOP [0, 5, 254], TYOP [0, 221, 41],
   TYOP [0, 25, 256], TYOP [0, 224, 38], TYOP [0, 25, 258],
   TYOP [0, 227, 35], TYOP [0, 25, 260], TYOP [0, 10, 5], TYOP [0, 10, 25],
   TYOP [0, 50, 62], TYOP [0, 50, 264], TYOP [0, 251, 265],
   TYOP [0, 0, 61], TYOP [0, 267, 0], TYOP [0, 0, 268], TYOP [0, 60, 269],
   TYOP [0, 23, 102], TYOP [0, 271, 22], TYOP [0, 22, 272],
   TYOP [0, 50, 273], TYOP [0, 23, 245], TYOP [0, 275, 5],
   TYOP [0, 5, 276], TYOP [0, 50, 277], TYOP [0, 50, 25],
   TYOP [0, 23, 279], TYOP [0, 280, 25], TYOP [0, 25, 281],
   TYOP [0, 50, 282], TYOP [0, 23, 1], TYOP [0, 284, 209],
   TYOP [0, 1, 186], TYOP [0, 1, 23], TYOP [0, 1, 13], TYOP [0, 288, 13],
   TYOP [0, 13, 289], TYOP [0, 1, 290], TYOP [0, 284, 215],
   TYOP [0, 187, 292], TYOP [0, 43, 90], TYOP [0, 17, 13],
   TYOP [0, 14, 295], TYOP [0, 7, 5], TYOP [0, 56, 297], TYOP [0, 23, 50],
   TYOP [0, 1, 299], TYOP [0, 43, 44], TYOP [0, 24, 25], TYOP [0, 40, 41],
   TYOP [0, 37, 38], TYOP [0, 34, 35]]
  end
  val _ = Theory.incorporate_consts "byte_sequence" tyvector
     [("zeros", 2), ("zero_pad_to_length", 4),
      ("takebytes_with_length", 8), ("takebytes_r_with_length", 8),
      ("takebytes", 7), ("string_of_byte_sequence", 11),
      ("repeat_tupled", 15), ("repeat", 17), ("read_char", 26),
      ("read_8_bytes_le", 36), ("read_8_bytes_be", 36),
      ("read_4_bytes_le", 39), ("read_4_bytes_be", 39),
      ("read_2_bytes_le", 42), ("read_2_bytes_be", 42),
      ("partition_with_length", 47), ("partition0", 46),
      ("offset_and_cut", 8), ("length0", 48),
      ("instance_Basic_classes_Ord_Byte_sequence_byte_sequence_dict", 49),
      ("from_byte_lists", 52), ("equal_tupled", 53), ("equal", 55),
      ("empty", 0), ("dropbytes_tupled", 57), ("dropbytes", 7),
      ("create", 59), ("concat0", 61), ("compare_byte_sequence", 64),
      ("byte_sequence_size", 48), ("byte_sequence_CASE", 67),
      ("byte_list_of_byte_sequence", 68), ("Sequence", 69)];

  local open SharingTables
  in
  val tmvector = build_term_vector idvector tyvector
  [TMV("'byte_sequence'", 71), TMV("M", 0), TMV("M'", 0), TMV("P", 54),
   TMV("P", 55), TMV("P", 72), TMV("P", 74), TMV("P", 75), TMV("R", 76),
   TMV("R", 77), TMV("R", 79), TMV("R", 81), TMV("a", 50), TMV("a", 43),
   TMV("a", 14), TMV("a", 56), TMV("a'", 50), TMV("a0", 70), TMV("b", 0),
   TMV("b0", 23), TMV("b1", 23), TMV("b2", 23), TMV("b3", 23),
   TMV("b4", 23), TMV("b5", 23), TMV("b6", 23), TMV("b7", 23),
   TMV("bb", 0), TMV("bs", 0), TMV("bs0", 0), TMV("bs0_length", 1),
   TMV("bs1", 0), TMV("bs2", 0), TMV("bs3", 0), TMV("bs4", 0),
   TMV("bs5", 0), TMV("bs6", 0), TMV("bs7", 0), TMV("bs8", 0),
   TMV("byte_sequence", 82), TMV("c", 12), TMV("c", 23),
   TMV("concat0", 61), TMV("count1", 1), TMV("cs", 10), TMV("curlen", 1),
   TMV("cut", 1), TMV("dropbytes_tupled", 57), TMV("equal_tupled", 53),
   TMV("f", 65), TMV("f'", 65), TMV("f1", 0), TMV("f2", 0), TMV("fn", 83),
   TMV("idx", 1), TMV("l", 0), TMV("l", 50), TMV("left", 0), TMV("len", 1),
   TMV("m", 1), TMV("n", 1), TMV("off", 1), TMV("r", 0), TMV("rep", 84),
   TMV("repeat_tupled", 15), TMV("res", 0), TMV("result", 5),
   TMV("result", 62), TMV("right", 0), TMV("s1", 0), TMV("s2", 0),
   TMV("tail", 50), TMV("ts", 60), TMV("ts", 50), TMV("ts", 51),
   TMV("ts_length", 1), TMV("v", 0), TMV("v", 23), TMV("v", 60),
   TMV("v", 1), TMV("v1", 12), TMV("v1", 0), TMV("v1", 1), TMV("v12", 23),
   TMV("v13", 50), TMV("v3", 50), TMV("v5", 50), TMV("x", 0), TMV("x", 23),
   TMV("x", 50), TMV("x", 1), TMV("x1", 12), TMV("x1", 0), TMV("xs", 60),
   TMV("xs", 50), TMV("y", 23), TMV("ys", 50), TMC(14, 85), TMC(14, 86),
   TMC(14, 88), TMC(14, 89), TMC(14, 91), TMC(14, 93), TMC(14, 95),
   TMC(14, 97), TMC(14, 99), TMC(14, 101), TMC(14, 92), TMC(14, 103),
   TMC(14, 105), TMC(14, 107), TMC(14, 100), TMC(15, 109), TMC(16, 111),
   TMC(16, 113), TMC(16, 115), TMC(16, 117), TMC(16, 119), TMC(16, 121),
   TMC(16, 123), TMC(16, 125), TMC(16, 127), TMC(16, 129), TMC(16, 131),
   TMC(16, 133), TMC(16, 135), TMC(16, 137), TMC(17, 109), TMC(18, 139),
   TMC(19, 1), TMC(20, 140), TMC(20, 142), TMC(20, 139), TMC(20, 55),
   TMC(20, 143), TMC(20, 145), TMC(20, 147), TMC(20, 149), TMC(20, 151),
   TMC(20, 153), TMC(20, 155), TMC(20, 157), TMC(20, 159), TMC(20, 161),
   TMC(20, 163), TMC(20, 165), TMC(20, 76), TMC(20, 166), TMC(20, 168),
   TMC(20, 169), TMC(20, 171), TMC(20, 77), TMC(20, 172), TMC(21, 139),
   TMC(22, 169), TMC(23, 174), TMC(23, 176), TMC(23, 103), TMC(24, 178),
   TMC(24, 180), TMC(24, 182), TMC(24, 184), TMC(25, 186), TMC(26, 49),
   TMC(27, 108), TMC(28, 108), TMC(29, 70), TMC(30, 187), TMC(31, 189),
   TMC(31, 192), TMC(32, 194), TMC(32, 196), TMC(32, 197), TMC(32, 199),
   TMC(33, 203), TMC(34, 138), TMC(35, 62), TMC(36, 22), TMC(37, 204),
   TMC(38, 62), TMC(39, 138), TMC(39, 3), TMC(39, 190), TMC(39, 193),
   TMC(40, 198), TMC(41, 206), TMC(41, 208), TMC(42, 209), TMC(43, 210),
   TMC(43, 211), TMC(43, 212), TMC(43, 213), TMC(44, 62), TMC(45, 216),
   TMC(46, 13), TMC(46, 60), TMC(46, 50), TMC(46, 10), TMC(47, 108),
   TMC(48, 218), TMC(49, 219), TMC(50, 219), TMC(51, 219), TMC(52, 219),
   TMC(53, 108), TMC(54, 69), TMC(55, 22), TMC(56, 220), TMC(57, 223),
   TMC(57, 226), TMC(57, 229), TMC(58, 177), TMC(58, 179), TMC(58, 181),
   TMC(58, 183), TMC(59, 232), TMC(59, 235), TMC(59, 238), TMC(59, 241),
   TMC(60, 1), TMC(61, 139), TMC(62, 68), TMC(63, 67), TMC(63, 242),
   TMC(63, 244), TMC(63, 247), TMC(63, 249), TMC(64, 48), TMC(65, 251),
   TMC(66, 64), TMC(67, 61), TMC(68, 59), TMC(69, 7), TMC(70, 57),
   TMC(71, 0), TMC(72, 55), TMC(73, 53), TMC(74, 253), TMC(74, 255),
   TMC(74, 257), TMC(74, 259), TMC(74, 261), TMC(75, 262), TMC(75, 263),
   TMC(76, 52), TMC(77, 108), TMC(78, 49), TMC(79, 209), TMC(80, 48),
   TMC(81, 266), TMC(82, 270), TMC(82, 274), TMC(82, 278), TMC(82, 283),
   TMC(83, 285), TMC(84, 286), TMC(85, 287), TMC(86, 1), TMC(87, 291),
   TMC(88, 293), TMC(89, 8), TMC(90, 294), TMC(90, 296), TMC(90, 298),
   TMC(91, 46), TMC(92, 47), TMC(93, 42), TMC(94, 42), TMC(95, 39),
   TMC(96, 39), TMC(97, 36), TMC(98, 36), TMC(99, 26), TMC(100, 17),
   TMC(100, 300), TMC(101, 15), TMC(102, 6), TMC(102, 301), TMC(102, 302),
   TMC(102, 303), TMC(102, 304), TMC(102, 305), TMC(103, 11), TMC(104, 7),
   TMC(105, 8), TMC(106, 8), TMC(107, 284), TMC(108, 4), TMC(109, 2),
   TMC(110, 138)]
  end
  local
  val DT = Thm.disk_thm val read = Term.read_raw tmvector
  in
  fun op byte_sequence_TY_DEF x = x
    val op byte_sequence_TY_DEF =
    DT(((("byte_sequence",0),[("bool",[26])]),["DISK_THM"]),
       [read"%156%63%207%17%106%0%153%111%17%153%157%12%152$1@%12%174%129@$0@%60%166|@|$0@@|@@$1$0@@|@@$0$1@@|@|@$0@|@"])
  fun op byte_sequence_case_def x = x
    val op byte_sequence_case_def =
    DT(((("byte_sequence",4),
        [("bool",[26,181]),("byte_sequence",[1,2,3]),
         ("ind_type",[33,34])]),["DISK_THM"]),
       [read"%108%12%103%49%130%222%205$1@@$0@@$0$1@@|@|@"])
  fun op byte_sequence_size_def x = x
    val op byte_sequence_size_def =
    DT(((("byte_sequence",5),
        [("bool",[26,181]),("byte_sequence",[1,2,3]),
         ("ind_type",[33,34])]),["DISK_THM"]),
       [read"%108%12%149%227%205$0@@@%112%198%164%219@@@%254%77%129|@$0@@@|@"])
  fun op byte_list_of_byte_sequence_def x = x
    val op byte_list_of_byte_sequence_def =
    DT(((("byte_sequence",12),[]),[]),
       [read"%98%29%147%221$0@@%226$0@%94$0|@@|@"])
  fun op compare_byte_sequence_def x = x
    val op compare_byte_sequence_def =
    DT(((("byte_sequence",13),[]),[]),
       [read"%98%69%98%70%150%229$1@$0@@%249%228@%221$1@@%221$0@@@|@|@"])
  fun op instance_Basic_classes_Ord_Byte_sequence_byte_sequence_dict_def
    x = x
    val op instance_Basic_classes_Ord_Byte_sequence_byte_sequence_dict_def
    =
    DT(((("byte_sequence",14),[]),[]),
       [read"%131%246@%199%186%229@@%203%185%51%52%150%229$1@$0@@%192@||@@%202%185%51%52%191%67%220%150$0@%192@@%150$0@%176@@|@%229$1@$0@@||@@%201%185%51%52%150%229$1@$0@@%179@||@@%200%185%51%52%191%67%220%150$0@%179@@%150$0@%176@@|@%229$1@$0@@||@@%163@@@@@@"])
  fun op empty_def x = x
    val op empty_def =
    DT(((("byte_sequence",15),[]),[]), [read"%133%234@%205%196@@"])
  fun op read_char_def x = x
    val op read_char_def =
    DT(((("byte_sequence",16),
        [("bool",[26,181]),("byte_sequence",[1,2,3]),
         ("ind_type",[33,34])]),["DISK_THM"]),
       [read||@@|@"])
  fun op repeat_tupled_primitive_def x = x
    val op repeat_tupled_primitive_def =
    DT(((("byte_sequence",17),[]),[]),
       [read"%143%275@%217%160%10%128%213$0@@%97%40%110%43%110%82%153%149$1@%204$0@@@$3%122%127$1@%198%164%219@@@@$2@@%122$1@$2@@@|@|@|@@|@@%64%14%262$0@%43%40%183%258$1@%194@%82%170$1@$4%122%127$2@%198%164%219@@@@$1@@@|@@||@||@@"])
  fun op repeat_curried_def x = x
    val op repeat_curried_def =
    DT(((("byte_sequence",18),[]),[]),
       [read"%110%90%97%91%145%273$1@$0@@%275%122$1@$0@@@|@|@"])
  fun op create_def x = x
    val op create_def =
    DT(((("byte_sequence",21),[]),[]),
       [read"%110%43%99%41%133%231$1@$0@@%205%274$1@$0@@@|@|@"])
  fun op zeros_def x = x
    val op zeros_def =
    DT(((("byte_sequence",22),[]),[]),
       [read"%110%59%133%288$0@@%231$0@%256%129@@@|@"])
  fun op length0_def x = x
    val op length0_def =
    DT(((("byte_sequence",23),
        [("bool",[26,181]),("byte_sequence",[1,2,3]),
         ("ind_type",[33,34])]),["DISK_THM"]),
       [read"%108%73%149%248%205$0@@@%187$0@@|@"])
  fun op concat0_primitive_def x = x
    val op concat0_primitive_def =
    DT(((("byte_sequence",24),[]),[]),
       [read"%141%230@%215%158%8%128%211$0@@%107%72%98%76%107%93%108%89%153%128%146$3@%171$2@$1@@@%133$2@%205$0@@@@$4$1@$3@@|@|@|@|@@|@@%42%72%181%250$0@%205%196@@%76%93%224$1@%89%224$4$1@@%71%205%162$1@$0@@|@|@||@@||@@"])
  fun op zero_pad_to_length_def x = x
    val op zero_pad_to_length_def =
    DT(((("byte_sequence",27),[]),[]),
       [read"%110%58%98%28%133%287$1@$0@@%190%45%168%154$0@$2@@$1@%230%171$1@%171%288%127$2@$0@@@%195@@@@|@%248$0@@@|@|@"])
  fun op from_byte_lists_def x = x
    val op from_byte_lists_def =
    DT(((("byte_sequence",28),[]),[]),
       [read"%109%74%133%244$0@@%205%178$0@@@|@"])
  fun op string_of_byte_sequence_def x = x
    val op string_of_byte_sequence_def =
    DT(((("byte_sequence",29),
        [("bool",[26,181]),("byte_sequence",[1,2,3]),
         ("ind_type",[33,34])]),["DISK_THM"]),
       [read"%108%73%148%282%205$0@@@%189%44%184$0@|@%193%259%167@%286@@$0@@@|@"])
  fun op equal_tupled_primitive_def x = x
    val op equal_tupled_primitive_def =
    DT(((("byte_sequence",30),[]),[]),
       [read"%142%236@%216%159%9%128%212$0@@%98%68%98%57%98%76%98%81%108%85%108%86%99%95%108%96%99%88%108%94%153%128%151%113$8@$9@@%113$7@$6@@@%128%133$7@%205$5@@@%128%133$6@%205$4@@@%128%147$4@%172$3@$2@@@%147$5@%172$1@$0@@@@@@@$10%113%205$0@@%205$2@@@%113$8@$9@@@|@|@|@|@|@|@|@|@|@|@@|@@%48%13%261$0@%57%68%180%261%113$1@$0@@%76%81%223$1@%85%223$1@%86%251$0@%251$1@%206@%83%84%177||@@%95%96%251$3@%177@%88%94%128%134$1@$3@@$11%113%205$0@@%205$2@@@@||@||@|@|@||@@||@||@@"])
  fun op equal_curried_def x = x
    val op equal_curried_def =
    DT(((("byte_sequence",31),[]),[]),
       [read"%98%87%98%92%132%235$1@$0@@%236%113$1@$0@@@|@|@"])
  fun op dropbytes_tupled_primitive_def x = x
    val op dropbytes_tupled_primitive_def =
    DT(((("byte_sequence",34),[]),[]),
       [read"%144%233@%218%161%11%128%214$0@@%108%73%110%43%99%88%108%94%153%128%289%149$2@%257@@@%147$3@%172$1@$0@@@@$4%123%127$2@%198%164%219@@@@%205$0@@@%123$2@%205$3@@@@|@|@|@|@@|||@@@|@||@||@@"])
  fun op dropbytes_curried_def x = x
    val op dropbytes_curried_def =
    DT(((("byte_sequence",35),[]),[]),
       [read"%110%90%98%92%135%232$1@$0@@%233%123$1@$0@@@|@|@"])
  fun op takebytes_r_with_length_def x = x
    val op takebytes_r_with_length_def =
    DT(((("byte_sequence",38),
        [("bool",[26,181]),("byte_sequence",[1,2,3]),
         ("ind_type",[33,34])]),["DISK_THM"]),
       [read"%110%43%110%75%108%73%135%284$2@$1@%205$0@@@%169%154$1@$2@@%276%205%255$2@%196@$0@@@@%242%173%167%198%165%164%165%164%165%165%219@@@@@@@@@%173%167%198%164%165%164%164%164%165%219@@@@@@@@@%173%167%198%164%164%165%165%164%165%219@@@@@@@@@%173%167%198%164%165%165%164%164%165%219@@@@@@@@@%173%167%198%165%165%164%164%164%165%219@@@@@@@@@%173%167%198%164%165%164%165%165%165%219@@@@@@@@@%173%167%198%165%164%165%164%165%165%219@@@@@@@@@%173%167%198%164%165%165%164%164%165%219@@@@@@@@@%173%167%198%164%164%165%164%165%165%219@@@@@@@@@%173%167%198%165%165%164%165%165%219@@@@@@@@%173%167%198%165%164%164%164%164%219@@@@@@@@%173%167%198%164%164%165%164%164%165%219@@@@@@@@@%173%167%198%164%165%164%164%164%165%219@@@@@@@@@%173%167%198%165%165%165%165%164%165%219@@@@@@@@@%173%167%198%165%165%165%165%164%165%219@@@@@@@@@%173%167%198%164%164%164%164%165%165%219@@@@@@@@@%173%167%198%165%164%165%164%165%165%219@@@@@@@@@%173%167%198%165%164%164%164%164%219@@@@@@@@%173%167%198%165%164%165%164%165%165%219@@@@@@@@@%173%167%198%164%165%164%164%164%165%219@@@@@@@@@%173%167%198%164%164%165%165%164%165%219@@@@@@@@@%173%167%198%164%165%165%164%164%165%219@@@@@@@@@%173%167%198%165%164%164%164%164%219@@@@@@@@%173%167%198%164%165%165%165%164%165%219@@@@@@@@@%173%167%198%164%164%164%164%165%165%219@@@@@@@@@%173%167%198%165%165%164%164%165%165%219@@@@@@@@@%173%167%198%164%165%165%164%164%165%219@@@@@@@@@%173%167%198%165%164%164%164%164%219@@@@@@@@%173%167%198%165%165%164%164%164%165%219@@@@@@@@@%173%167%198%164%165%164%165%165%165%219@@@@@@@@@%173%167%198%165%164%165%164%165%165%219@@@@@@@@@%173%167%198%164%165%165%164%164%165%219@@@@@@@@@%173%167%198%164%164%165%164%165%165%219@@@@@@@@@%173%167%198%165%164%164%164%164%219@@@@@@@@%173%167%198%165%164%165%164%165%165%219@@@@@@@@@%173%167%198%165%164%164%165%164%165%219@@@@@@@@@%173%167%198%164%165%164%164%164%165%219@@@@@@@@@%173%167%198%165%165%165%165%164%165%219@@@@@@@@@%173%167%198%165%164%164%164%164%219@@@@@@@@%173%167%198%164%165%164%164%164%165%219@@@@@@@@@%173%167%198%165%165%164%164%165%165%219@@@@@@@@@%173%167%198%164%165%165%164%164%165%219@@@@@@@@@%173%167%198%165%164%164%164%164%219@@@@@@@@%173%167%198%164%164%165%164%164%165%219@@@@@@@@@%173%167%198%164%164%164%164%165%165%219@@@@@@@@@%173%167%198%165%165%165%165%164%165%219@@@@@@@@@%173%167%198%165%164%165%164%165%165%219@@@@@@@@@%173%167%198%164%165%164%164%164%165%219@@@@@@@@@%173%167%198%164%165%164%165%164%165%219@@@@@@@@@%173%167%198%165%165%165%165%164%165%219@@@@@@@@@%173%167%198%164%165%165%164%164%165%219@@@@@@@@@%173%167%198%165%164%165%164%164%165%219@@@@@@@@@%173%167%198%165%164%164%164%164%219@@@@@@@@%173%167%198%164%165%164%165%164%165%219@@@@@@@@@%173%167%198%165%165%165%165%164%165%219@@@@@@@@@%173%167%198%165%164%164%164%164%219@@@@@@@@%173%167%198%164%164%165%164%165%165%219@@@@@@@@@%173%167%198%164%165%165%164%164%165%219@@@@@@@@@%173%167%198%164%165%164%164%165%165%219@@@@@@@@@%173%167%198%164%165%165%164%165%165%219@@@@@@@@@%173%167%198%164%165%165%164%164%165%219@@@@@@@@@%173%167%198%165%165%165%165%164%165%219@@@@@@@@@%173%167%198%164%164%165%164%164%165%219@@@@@@@@@%173%167%198%164%165%165%164%164%165%219@@@@@@@@@%197@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|@|@|@"])
  fun op takebytes_def x = x
    val op takebytes_def =
    DT(((("byte_sequence",39),
        [("bool",[26,181]),("byte_sequence",[1,2,3]),
         ("ind_type",[33,34])]),["DISK_THM"]),
       [read"%110%43%108%73%135%283$1@%205$0@@@%188%66$0|@%284%245$1@@%247$0@@%205$0@@@@|@|@"])
  fun op takebytes_with_length_def x = x
    val op takebytes_with_length_def =
    DT(((("byte_sequence",40),
        [("bool",[26,181]),("byte_sequence",[1,2,3]),
         ("ind_type",[33,34])]),["DISK_THM"]),
       [read"%110%43%110%75%108%73%135%285$2@$1@%205$0@@@%188%66$0|@%284%245$2@@$1@%205$0@@@@|@|@|@"])
  fun op read_2_bytes_le_def x = x
    val op read_2_bytes_le_def =
    DT(((("byte_sequence",41),[]),[]),
       [read"%98%29%138%267$0@@%239%272$0@@%208%19%31%239%272$0@@%208%20%32%279%124%115$1@$3@@$0@@||@@||@@@|@"])
  fun op read_2_bytes_be_def x = x
    val op read_2_bytes_be_def =
    DT(((("byte_sequence",42),[]),[]),
       [read"%98%29%138%266$0@@%239%272$0@@%208%19%31%239%272$0@@%208%20%32%279%124%115$3@$1@@$0@@||@@||@@@|@"])
  fun op read_4_bytes_le_def x = x
    val op read_4_bytes_le_def =
    DT(((("byte_sequence",43),[]),[]),
       [read"%98%29%139%269$0@@%240%272$0@@%209%19%31%240%272$0@@%209%20%32%240%272$0@@%209%21%33%240%272$0@@%209%22%34%280%125%117$1@%116$3@%115$5@$7@@@@$0@@||@@||@@||@@||@@@|@"])
  fun op read_4_bytes_be_def x = x
    val op read_4_bytes_be_def =
    DT(((("byte_sequence",44),[]),[]),
       [read"%98%29%139%268$0@@%240%272$0@@%209%19%31%240%272$0@@%209%20%32%240%272$0@@%209%21%33%240%272$0@@%209%22%34%280%125%117$7@%116$5@%115$3@$1@@@@$0@@||@@||@@||@@||@@@|@"])
  fun op read_8_bytes_le_def x = x
    val op read_8_bytes_le_def =
    DT(((("byte_sequence",45),[]),[]),
       [read"%98%29%140%271$0@@%241%272$0@@%210%19%31%241%272$0@@%210%20%32%241%272$0@@%210%21%33%241%272$0@@%210%22%34%241%272$0@@%210%23%35%241%272$0@@%210%24%36%241%272$0@@%210%25%37%241%272$0@@%210%26%38%281%126%121$1@%120$3@%119$5@%118$7@%117$9@%116$11@%115$13@$15@@@@@@@@$0@@||@@||@@||@@||@@||@@||@@||@@||@@@|@"])
  fun op read_8_bytes_be_def x = x
    val op read_8_bytes_be_def =
    DT(((("byte_sequence",46),[]),[]),
       [read"%98%29%140%270$0@@%241%272$0@@%210%19%31%241%272$0@@%210%20%32%241%272$0@@%210%21%33%241%272$0@@%210%22%34%241%272$0@@%210%23%35%241%272$0@@%210%24%36%241%272$0@@%210%25%37%241%272$0@@%210%26%38%281%126%121$15@%120$13@%119$11@%118$9@%117$7@%116$5@%115$3@$1@@@@@@@@$0@@||@@||@@||@@||@@||@@||@@||@@||@@@|@"])
  fun op partition0_def x = x
    val op partition0_def =
    DT(((("byte_sequence",47),[]),[]),
       [read"%110%54%98%29%136%264$1@$0@@%238%283$1@$0@@%55%238%232$2@$1@@%62%277%113$1@$0@@|@|@@|@|@"])
  fun op partition_with_length_def x = x
    val op partition_with_length_def =
    DT(((("byte_sequence",48),[]),[]),
       [read"%110%54%110%30%98%29%136%265$2@$1@$0@@%238%285$2@$1@$0@@%55%238%232$3@$1@@%62%277%113$1@$0@@|@|@@|@|@|@"])
  fun op offset_and_cut_def x = x
    val op offset_and_cut_def =
    DT(((("byte_sequence",49),[]),[]),
       [read"%110%61%110%46%98%29%135%260$2@$1@$0@@%237%232$2@$0@@%31%237%283$2@$0@@%65%276$0@|@|@@|@|@|@"])
  fun op datatype_byte_sequence x = x
    val op datatype_byte_sequence =
    DT(((("byte_sequence",6),[("bool",[25,171])]),["DISK_THM"]),
       [read"%175%39%205@@"])
  fun op byte_sequence_11 x = x
    val op byte_sequence_11 =
    DT(((("byte_sequence",7),
        [("bool",[26,56,63,181]),("byte_sequence",[1,2,3]),
         ("ind_type",[33,34])]),["DISK_THM"]),
       [read"%108%12%108%16%132%133%205$1@@%205$0@@@%147$1@$0@@|@|@"])
  fun op byte_sequence_case_cong x = x
    val op byte_sequence_case_cong =
    DT(((("byte_sequence",8),
        [("bool",[26,181]),("byte_sequence",[1,2,3,4])]),["DISK_THM"]),
       [read"%98%1%98%2%103%49%153%128%133$2@$1@@%108%12%153%133$2@%205$0@@@%130$1$0@@%50$0@@@|@@@%130%222$2@$0@@%222$1@%50@@@|@|@|@"])
  fun op byte_sequence_nchotomy x = x
    val op byte_sequence_nchotomy =
    DT(((("byte_sequence",9),
        [("bool",[26,181]),("byte_sequence",[1,2,3])]),["DISK_THM"]),
       [read"%98%27%157%56%133$1@%205$0@@|@|@"])
  fun op byte_sequence_Axiom x = x
    val op byte_sequence_Axiom =
    DT(((("byte_sequence",10),
        [("bool",[26,181]),("byte_sequence",[1,2,3]),
         ("ind_type",[33,34])]),["DISK_THM"]),
       [read"%103%49%155%53%108%12%130$1%205$0@@@$2$0@@|@|@|@"])
  fun op byte_sequence_induction x = x
    val op byte_sequence_induction =
    DT(((("byte_sequence",11),
        [("bool",[26]),("byte_sequence",[1,2,3])]),["DISK_THM"]),
       [read"%100%3%153%108%56$1%205$0@@|@@%98%18$1$0@|@@|@"])
  fun op repeat_ind x = x
    val op repeat_ind =
    DT(((("byte_sequence",19),
        [("bool",[25,27,53,54,63]),("pair",[5,16]),("relation",[101]),
         ("sat",[1,3,5,6,7,11,15])]),["DISK_THM"]),
       [read"%104%6%153%110%43%97%40%153%110%82%153%149$2@%204$0@@@$3%127$2@%198%164%219@@@@$1@@|@@$2$1@$0@@|@|@@%110%79%97%80$2$1@$0@|@|@@|@",
        read"%97%40%110%43%110%82%153%149$1@%204$0@@@%10%122%127$1@%198%164%219@@@@$2@@%122$1@$2@@@|@|@|@",
        read"%213%10@"])
  fun op repeat_def x = x
    val op repeat_def =
    DT(((("byte_sequence",20),
        [("arithmetic",[267]),("bool",[15,58]),("byte_sequence",[17,18]),
         ("combin",[19]),("pair",[49]),
         ("relation",[121,126])]),["DISK_THM"]),
       [read"%110%43%97%40%145%273$1@$0@@%258$1@%194@%82%170$1@%273%127$2@%198%164%219@@@@$1@@|@@|@|@",
        read"%97%40%110%43%110%82%153%149$1@%204$0@@@%10%122%127$1@%198%164%219@@@@$2@@%122$1@$2@@@|@|@|@",
        read"%213%10@"])
  fun op concat0_ind x = x
    val op concat0_ind =
    DT(((("byte_sequence",25),
        [("bool",[25,27,53,54,63]),("relation",[101]),
         ("sat",[1,3,5,6,7,11,15])]),["DISK_THM"]),
       [read"%102%5%153%107%72%153%98%76%107%93%108%89%153%128%146$3@%171$2@$1@@@%133$2@%205$0@@@@$4$1@@|@|@|@@$1$0@@|@@%107%78$1$0@|@@|@",
        read"%107%72%98%76%107%93%108%89%153%128%146$3@%171$2@$1@@@%133$2@%205$0@@@@%8$1@$3@@|@|@|@|@",
        read"%211%8@"])
  fun op concat0_def x = x
    val op concat0_def =
    DT(((("byte_sequence",26),
        [("bool",[15,26,181]),("byte_sequence",[1,2,3,4,24]),
         ("combin",[19]),("list",[11]),
         ("relation",[121,126])]),["DISK_THM"]),
       [read"%107%72%133%230$0@@%250$0@%205%196@@%76%93%224$1@%89%224%230$1@@%71%205%162$1@$0@@|@|@||@@|@",
        read"%107%72%98%76%107%93%108%89%153%128%146$3@%171$2@$1@@@%133$2@%205$0@@@@%8$1@$3@@|@|@|@|@",
        read"%211%8@"])
  fun op equal_ind x = x
    val op equal_ind =
    DT(((("byte_sequence",32),
        [("bool",[25,27,53,54,63]),("pair",[5,16]),("relation",[101]),
         ("sat",[1,3,5,6,7,11,15])]),["DISK_THM"]),
       [read"%101%4%153%98%57%98%68%153%98%76%98%81%108%85%108%86%99%95%108%96%99%88%108%94%153%128%151%113$9@$8@@%113$7@$6@@@%128%133$7@%205$5@@@%128%133$6@%205$4@@@%128%147$4@%172$3@$2@@@%147$5@%172$1@$0@@@@@@@$10%205$0@@%205$2@@@|@|@|@|@|@|@|@|@@$2$1@$0@@|@|@@%98%76%98%81$2$1@$0@|@|@@|@",
        read"%98%68%98%57%98%76%98%81%108%85%108%86%99%95%108%96%99%88%108%94%153%128%151%113$8@$9@@%113$7@$6@@@%128%133$7@%205$5@@@%128%133$6@%205$4@@@%128%147$4@%172$3@$2@@@%147$5@%172$1@$0@@@@@@@%9%113%205$0@@%205$2@@@%113$8@$9@@@|@|@|@|@|@|@|@|@|@|@",
        read"%212%9@"])
  fun op equal_def x = x
    val op equal_def =
    DT(((("byte_sequence",33),
        [("bool",[15,26,58,181]),("byte_sequence",[1,2,3,4,30,31]),
         ("combin",[19]),("list",[11]),("pair",[49,51]),
         ("relation",[121,126])]),["DISK_THM"]),
       [read"%98%68%98%57%132%235$0@$1@@%261%113$0@$1@@%76%81%223$1@%85%223$1@%86%251$0@%251$1@%206@%83%84%177||@@%95%96%251$3@%177@%88%94%128%134$1@$3@@%235%205$0@@%205$2@@@||@||@|@|@||@@|@|@",
        read"%98%68%98%57%98%76%98%81%108%85%108%86%99%95%108%96%99%88%108%94%153%128%151%113$8@$9@@%113$7@$6@@@%128%133$7@%205$5@@@%128%133$6@%205$4@@@%128%147$4@%172$3@$2@@@%147$5@%172$1@$0@@@@@@@%9%113%205$0@@%205$2@@@%113$8@$9@@@|@|@|@|@|@|@|@|@|@|@",
        read"%212%9@"])
  fun op dropbytes_ind x = x
    val op dropbytes_ind =
    DT(((("byte_sequence",36),
        [("bool",[25,26,27,53,54,63,181]),("byte_sequence",[1,2,3]),
         ("pair",[5,16]),("relation",[101]),
         ("sat",[1,3,5,6,7,11,15])]),["DISK_THM"]),
       [read"%105%7%153%110%43%108%73%153%99%88%108%94%153%128%289%149$3@%257@@@%147$2@%172$1@$0@@@@$4%127$3@%198%164%219@@@@%205$0@@@|@|@@$2$1@%205$0@@@|@|@@%110%79%98%81$2$1@$0@|@|@@|@",
        read"%108%73%110%43%99%88%108%94%153%128%289%149$2@%257@@@%147$3@%172$1@$0@@@@%11%123%127$2@%198%164%219@@@@%205$0@@@%123$2@%205$3@@@@|@|@|@|@",
        read"%214%11@"])
  fun op dropbytes_def x = x
    val op dropbytes_def =
    DT(((("byte_sequence",37),
        [("bool",[15,58,129]),("byte_sequence",[4,34,35]),("combin",[19]),
         ("list",[11]),("pair",[49]),
         ("relation",[121,126])]),["DISK_THM"]),
       [read||@@@|@|@",
        read"%108%73%110%43%99%88%108%94%153%128%289%149$2@%257@@@%147$3@%172$1@$0@@@@%11%123%127$2@%198%164%219@@@@%205$0@@@%123$2@%205$3@@@@|@|@|@|@",
        read"%214%11@"])
  end
  val _ = DB.bindl "byte_sequence"
  [("byte_sequence_TY_DEF",byte_sequence_TY_DEF,DB.Def),
   ("byte_sequence_case_def",byte_sequence_case_def,DB.Def),
   ("byte_sequence_size_def",byte_sequence_size_def,DB.Def),
   ("byte_list_of_byte_sequence_def",
    byte_list_of_byte_sequence_def,
    DB.Def),
   ("compare_byte_sequence_def",compare_byte_sequence_def,DB.Def),
   ("instance_Basic_classes_Ord_Byte_sequence_byte_sequence_dict_def",
    instance_Basic_classes_Ord_Byte_sequence_byte_sequence_dict_def,
    DB.Def), ("empty_def",empty_def,DB.Def),
   ("read_char_def",read_char_def,DB.Def),
   ("repeat_tupled_primitive_def",repeat_tupled_primitive_def,DB.Def),
   ("repeat_curried_def",repeat_curried_def,DB.Def),
   ("create_def",create_def,DB.Def), ("zeros_def",zeros_def,DB.Def),
   ("length0_def",length0_def,DB.Def),
   ("concat0_primitive_def",concat0_primitive_def,DB.Def),
   ("zero_pad_to_length_def",zero_pad_to_length_def,DB.Def),
   ("from_byte_lists_def",from_byte_lists_def,DB.Def),
   ("string_of_byte_sequence_def",string_of_byte_sequence_def,DB.Def),
   ("equal_tupled_primitive_def",equal_tupled_primitive_def,DB.Def),
   ("equal_curried_def",equal_curried_def,DB.Def),
   ("dropbytes_tupled_primitive_def",
    dropbytes_tupled_primitive_def,
    DB.Def), ("dropbytes_curried_def",dropbytes_curried_def,DB.Def),
   ("takebytes_r_with_length_def",takebytes_r_with_length_def,DB.Def),
   ("takebytes_def",takebytes_def,DB.Def),
   ("takebytes_with_length_def",takebytes_with_length_def,DB.Def),
   ("read_2_bytes_le_def",read_2_bytes_le_def,DB.Def),
   ("read_2_bytes_be_def",read_2_bytes_be_def,DB.Def),
   ("read_4_bytes_le_def",read_4_bytes_le_def,DB.Def),
   ("read_4_bytes_be_def",read_4_bytes_be_def,DB.Def),
   ("read_8_bytes_le_def",read_8_bytes_le_def,DB.Def),
   ("read_8_bytes_be_def",read_8_bytes_be_def,DB.Def),
   ("partition0_def",partition0_def,DB.Def),
   ("partition_with_length_def",partition_with_length_def,DB.Def),
   ("offset_and_cut_def",offset_and_cut_def,DB.Def),
   ("datatype_byte_sequence",datatype_byte_sequence,DB.Thm),
   ("byte_sequence_11",byte_sequence_11,DB.Thm),
   ("byte_sequence_case_cong",byte_sequence_case_cong,DB.Thm),
   ("byte_sequence_nchotomy",byte_sequence_nchotomy,DB.Thm),
   ("byte_sequence_Axiom",byte_sequence_Axiom,DB.Thm),
   ("byte_sequence_induction",byte_sequence_induction,DB.Thm),
   ("repeat_ind",repeat_ind,DB.Thm), ("repeat_def",repeat_def,DB.Thm),
   ("concat0_ind",concat0_ind,DB.Thm), ("concat0_def",concat0_def,DB.Thm),
   ("equal_ind",equal_ind,DB.Thm), ("equal_def",equal_def,DB.Thm),
   ("dropbytes_ind",dropbytes_ind,DB.Thm),
   ("dropbytes_def",dropbytes_def,DB.Thm)]

  local open Portable GrammarSpecials Parse
    fun UTOFF f = Feedback.trace("Parse.unicode_trace_off_complaints",0)f
  in
  val _ = mk_local_grms [("missing_pervasivesTheory.missing_pervasives_grammars",
                          missing_pervasivesTheory.missing_pervasives_grammars),
                         ("errorTheory.error_grammars",
                          errorTheory.error_grammars)]
  val _ = List.app (update_grms reveal) []
  val _ = update_grms temp_add_type "byte_sequence"
  val _ = update_grms temp_add_type "byte_sequence"




  val _ = update_grms
       (UTOFF temp_overload_on)
       ("Sequence", (Term.prim_mk_const { Name = "Sequence", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("Sequence", (Term.prim_mk_const { Name = "Sequence", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("byte_sequence_CASE", (Term.prim_mk_const { Name = "byte_sequence_CASE", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("byte_sequence_size", (Term.prim_mk_const { Name = "byte_sequence_size", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("byte_list_of_byte_sequence", (Term.prim_mk_const { Name = "byte_list_of_byte_sequence", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("byte_list_of_byte_sequence", (Term.prim_mk_const { Name = "byte_list_of_byte_sequence", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("compare_byte_sequence", (Term.prim_mk_const { Name = "compare_byte_sequence", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("compare_byte_sequence", (Term.prim_mk_const { Name = "compare_byte_sequence", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("instance_Basic_classes_Ord_Byte_sequence_byte_sequence_dict", (Term.prim_mk_const { Name = "instance_Basic_classes_Ord_Byte_sequence_byte_sequence_dict", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("instance_Basic_classes_Ord_Byte_sequence_byte_sequence_dict", (Term.prim_mk_const { Name = "instance_Basic_classes_Ord_Byte_sequence_byte_sequence_dict", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("empty", (Term.prim_mk_const { Name = "empty", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("empty", (Term.prim_mk_const { Name = "empty", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("read_char", (Term.prim_mk_const { Name = "read_char", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("repeat_tupled", (Term.prim_mk_const { Name = "repeat_tupled", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("repeat_tupled", (Term.prim_mk_const { Name = "repeat_tupled", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("repeat", (Term.prim_mk_const { Name = "repeat", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("repeat", (Term.prim_mk_const { Name = "repeat", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("create", (Term.prim_mk_const { Name = "create", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("create", (Term.prim_mk_const { Name = "create", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("zeros", (Term.prim_mk_const { Name = "zeros", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("zeros", (Term.prim_mk_const { Name = "zeros", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("length0", (Term.prim_mk_const { Name = "length0", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("concat0", (Term.prim_mk_const { Name = "concat0", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("concat0", (Term.prim_mk_const { Name = "concat0", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("zero_pad_to_length", (Term.prim_mk_const { Name = "zero_pad_to_length", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("zero_pad_to_length", (Term.prim_mk_const { Name = "zero_pad_to_length", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("from_byte_lists", (Term.prim_mk_const { Name = "from_byte_lists", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("from_byte_lists", (Term.prim_mk_const { Name = "from_byte_lists", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("string_of_byte_sequence", (Term.prim_mk_const { Name = "string_of_byte_sequence", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("equal_tupled", (Term.prim_mk_const { Name = "equal_tupled", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("equal_tupled", (Term.prim_mk_const { Name = "equal_tupled", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("equal", (Term.prim_mk_const { Name = "equal", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("equal", (Term.prim_mk_const { Name = "equal", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("dropbytes_tupled", (Term.prim_mk_const { Name = "dropbytes_tupled", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("dropbytes_tupled", (Term.prim_mk_const { Name = "dropbytes_tupled", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("dropbytes", (Term.prim_mk_const { Name = "dropbytes", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("dropbytes", (Term.prim_mk_const { Name = "dropbytes", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("takebytes_r_with_length", (Term.prim_mk_const { Name = "takebytes_r_with_length", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("takebytes", (Term.prim_mk_const { Name = "takebytes", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("takebytes_with_length", (Term.prim_mk_const { Name = "takebytes_with_length", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("read_2_bytes_le", (Term.prim_mk_const { Name = "read_2_bytes_le", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("read_2_bytes_le", (Term.prim_mk_const { Name = "read_2_bytes_le", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("read_2_bytes_be", (Term.prim_mk_const { Name = "read_2_bytes_be", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("read_2_bytes_be", (Term.prim_mk_const { Name = "read_2_bytes_be", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("read_4_bytes_le", (Term.prim_mk_const { Name = "read_4_bytes_le", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("read_4_bytes_le", (Term.prim_mk_const { Name = "read_4_bytes_le", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("read_4_bytes_be", (Term.prim_mk_const { Name = "read_4_bytes_be", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("read_4_bytes_be", (Term.prim_mk_const { Name = "read_4_bytes_be", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("read_8_bytes_le", (Term.prim_mk_const { Name = "read_8_bytes_le", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("read_8_bytes_le", (Term.prim_mk_const { Name = "read_8_bytes_le", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("read_8_bytes_be", (Term.prim_mk_const { Name = "read_8_bytes_be", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("read_8_bytes_be", (Term.prim_mk_const { Name = "read_8_bytes_be", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("partition0", (Term.prim_mk_const { Name = "partition0", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("partition0", (Term.prim_mk_const { Name = "partition0", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("partition_with_length", (Term.prim_mk_const { Name = "partition_with_length", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("partition_with_length", (Term.prim_mk_const { Name = "partition_with_length", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("offset_and_cut", (Term.prim_mk_const { Name = "offset_and_cut", Thy = "byte_sequence"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("offset_and_cut", (Term.prim_mk_const { Name = "offset_and_cut", Thy = "byte_sequence"}))
  val byte_sequence_grammars = Parse.current_lgrms()
  end


  val _ =
    TypeBase.write [
      let
        open TypeBasePure
        val tyinfo0 = mk_datatype_info
          {ax=ORIG byte_sequence_Axiom,
           case_def=byte_sequence_case_def,
           case_cong=byte_sequence_case_cong,
           induction=ORIG byte_sequence_induction,
           nchotomy=byte_sequence_nchotomy,
           size=SOME(Parse.Term`(byte_sequence$byte_sequence_size) :(byte_sequence$byte_sequence) -> (num$num)`,
                     ORIG byte_sequence_size_def),
           encode = NONE,
           lift=NONE,
           one_one=SOME byte_sequence_11,
           distinct=NONE,
           fields=let fun T t s A = mk_thy_type{Thy=t,Tyop=s,Args=A}
    val U = mk_vartype
in
[] end,
           accessors=[],
           updates=[],
           recognizers=[],
           destructors=[]}
        val tyinfo0 = tyinfo0
        val () = computeLib.write_datatype_info tyinfo0
      in
        tyinfo0
      end
    ];
  val _ = Theory.LoadableThyData.temp_encoded_update {
    thy = "byte_sequence",
    thydataty = "compute",
    data =
        "byte_sequence.byte_list_of_byte_sequence_def byte_sequence.takebytes_with_length_def byte_sequence.offset_and_cut_def byte_sequence.partition_with_length_def byte_sequence.partition0_def byte_sequence.read_8_bytes_be_def byte_sequence.read_8_bytes_le_def byte_sequence.read_4_bytes_be_def byte_sequence.read_4_bytes_le_def byte_sequence.read_2_bytes_be_def byte_sequence.read_2_bytes_le_def byte_sequence.string_of_byte_sequence_def byte_sequence.takebytes_def byte_sequence.takebytes_r_with_length_def byte_sequence.zero_pad_to_length_def byte_sequence.from_byte_lists_def byte_sequence.length0_def byte_sequence.read_char_def byte_sequence.zeros_def byte_sequence.create_def byte_sequence.compare_byte_sequence_def byte_sequence.empty_def byte_sequence.instance_Basic_classes_Ord_Byte_sequence_byte_sequence_dict_def"
  }

val _ = if !Globals.print_thy_loads then print "done\n" else ()
val _ = Theory.load_complete "byte_sequence"
end
