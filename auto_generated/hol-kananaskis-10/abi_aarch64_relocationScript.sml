(*Generated by Lem from abis/aarch64/abi_aarch64_relocation.lem.*)
open HolKernel Parse boolLib bossLib;
open lem_numTheory lem_basic_classesTheory lem_maybeTheory lem_stringTheory missing_pervasivesTheory errorTheory elf_types_native_uintTheory elf_headerTheory elf_symbol_tableTheory elf_fileTheory elf_relocationTheory memory_imageTheory abi_utilitiesTheory;

val _ = numLib.prefer_num();



val _ = new_theory "abi_aarch64_relocation"

(** [abi_aarch64_relocation] contains types and definitions relating to ABI
  * specific relocation functionality for the AArch64 ABI (little-endian case).
  *)

(*open import Basic_classes*)
(*open import Num*)
(*open import String*)
(*open import Maybe*)
(*open import Missing_pervasives*)

(*open import Error*)

(*open import Elf_types_native_uint*)
(*open import Elf_file*)
(*open import Elf_header*)
(*open import Elf_relocation*)
(*open import Elf_symbol_table*)

(*open import Abi_utilities*)
(*open import Memory_image*)

(** Relocations *)

val _ = Define `
 (r_aarch64_none : num= (I 0))`;

val _ = Define `
 (r_aarch64_withdrawn : num= (I 256))`;
  (** Treated as R_AARCH6_NONE *)

val _ = Define `
 (r_aarch64_abs64 : num= (I 257))`;

val _ = Define `
 (r_aarch64_abs32 : num= (I 258))`;

val _ = Define `
 (r_aarch64_abs16 : num= (I 259))`;

val _ = Define `
 (r_aarch64_prel64 : num= (I 260))`;

val _ = Define `
 (r_aarch64_prel32 : num= (I 261))`;

val _ = Define `
 (r_aarch64_prel16 : num= (I 262))`;


val _ = Define `
 (r_aarch64_movw_uabs_g0 : num= (I 263))`;

val _ = Define `
 (r_aarch64_movw_uabs_g0_nc : num= (I 264))`;

val _ = Define `
 (r_aarch64_movw_uabs_g1 : num= (I 265))`;

val _ = Define `
 (r_aarch64_movw_uabs_g1_nc : num= (I 266))`;

val _ = Define `
 (r_aarch64_movw_uabs_g2 : num= (I 267))`;

val _ = Define `
 (r_aarch64_movw_uabs_g2_nc : num= (I 268))`;

val _ = Define `
 (r_aarch64_movw_uabs_g3 : num= (I 269))`;


val _ = Define `
 (r_aarch64_movw_sabs_g0 : num= (I 270))`;

val _ = Define `
 (r_aarch64_movw_sabs_g1 : num= (I 271))`;

val _ = Define `
 (r_aarch64_movw_sabs_g2 : num= (I 272))`;


val _ = Define `
 (r_aarch64_ld_prel_lo19 : num= (I 273))`;

val _ = Define `
 (r_aarch64_adr_prel_lo21 : num= (I 274))`;

val _ = Define `
 (r_aarch64_adr_prel_pg_hi21 : num= (I 275))`;

val _ = Define `
 (r_aarch64_adr_prel_pg_hi21_nc : num= (I 276))`;

val _ = Define `
 (r_aarch64_add_abs_lo12_nc : num= (I 277))`;

val _ = Define `
 (r_aarch64_ldst8_abs_lo12_nc : num= (I 278))`;

val _ = Define `
 (r_aarch64_ldst16_abs_lo12_nc : num= (I 284))`;

val _ = Define `
 (r_aarch64_ldst32_abs_lo12_nc : num= (I 285))`;

val _ = Define `
 (r_aarch64_ldst64_abs_lo12_nc : num= (I 286))`;

val _ = Define `
 (r_aarch64_ldst128_abs_lo12_nc : num= (I 299))`;


val _ = Define `
 (r_aarch64_tstbr14 : num= (I 279))`;

val _ = Define `
 (r_aarch64_condbr19 : num= (I 280))`;

val _ = Define `
 (r_aarch64_jump26 : num= (I 282))`;

val _ = Define `
 (r_aarch64_call26 : num= (I 283))`;


val _ = Define `
 (r_aarch64_movw_prel_g0 : num= (I 287))`;

val _ = Define `
 (r_aarch64_movw_prel_g0_nc : num= (I 288))`;

val _ = Define `
 (r_aarch64_movw_prel_g1 : num= (I 289))`;

val _ = Define `
 (r_aarch64_movw_prel_g1_nc : num= (I 290))`;

val _ = Define `
 (r_aarch64_movw_prel_g2 : num= (I 291))`;

val _ = Define `
 (r_aarch64_movw_prel_g2_nc : num= (I 292))`;

val _ = Define `
 (r_aarch64_movw_prel_g3 : num= (I 293))`;


val _ = Define `
 (r_aarch64_movw_gotoff_g0 : num= (I 300))`;

val _ = Define `
 (r_aarch64_movw_gotoff_g0_nc : num= (I 301))`;

val _ = Define `
 (r_aarch64_movw_gotoff_g1 : num= (I 302))`;

val _ = Define `
 (r_aarch64_movw_gotoff_g1_nc : num= (I 303))`;

val _ = Define `
 (r_aarch64_movw_gotoff_g2 : num= (I 304))`;

val _ = Define `
 (r_aarch64_movw_gotoff_g2_nc : num= (I 305))`;

val _ = Define `
 (r_aarch64_movw_gotoff_g3 : num= (I 306))`;


val _ = Define `
 (r_aarch64_gotrel64 : num= (I 307))`;

val _ = Define `
 (r_aarch64_gotrel32 : num= (I 308))`;


val _ = Define `
 (r_aarch64_got_ld_prel19 : num= (I 309))`;

val _ = Define `
 (r_aarch64_got_ld64_gotoff_lo15 : num= (I 310))`;

val _ = Define `
 (r_aarch64_adr_got_page : num= (I 311))`;

val _ = Define `
 (r_aarch64_ld64_got_lo12_nc : num= (I 312))`;

val _ = Define `
 (r_aarch64_ld64_gotpage_lo15 : num= (I 313))`;


val _ = Define `
 (r_aarch64_tlsgd_adr_prel21 : num= (I 512))`;

val _ = Define `
 (r_aarch64_tlsgd_adr_page21 : num= (I 513))`;

val _ = Define `
 (r_aarch64_tlsgd_add_lo12_nc : num= (I 514))`;

val _ = Define `
 (r_aarch64_tlsgd_movw_g1 : num= (I 515))`;

val _ = Define `
 (r_aarch64_tlsgd_movw_g0_nc : num= (I 516))`;


val _ = Define `
 (r_aarch64_tlsld_adr_prel21 : num= (I 517))`;

val _ = Define `
 (r_aarch64_tlsld_adr_page21 : num= (I 518))`;

val _ = Define `
 (r_aarch64_tlsld_add_lo12_nc : num= (I 519))`;

val _ = Define `
 (r_aarch64_tlsld_movw_g1 : num= (I 520))`;

val _ = Define `
 (r_aarch64_tlsld_movw_g0_nc : num= (I 521))`;

val _ = Define `
 (r_aarch64_tlsld_ld_prel19 : num= (I 522))`;

val _ = Define `
 (r_aarch64_tlsld_movw_dtprel_g2 : num= (I 523))`;

val _ = Define `
 (r_aarch64_tlsld_movw_dtprel_g1 : num= (I 524))`;

val _ = Define `
 (r_aarch64_tlsld_movw_dtprel_g1_nc : num= (I 525))`;

val _ = Define `
 (r_aarch64_tlsld_movw_dtprel_g0 : num= (I 526))`;

val _ = Define `
 (r_aarch64_tlsld_movw_dtprel_g0_nc : num= (I 527))`;

val _ = Define `
 (r_aarch64_tlsld_add_dtprel_hi12 : num= (I 528))`;

val _ = Define `
 (r_aarch64_tlsld_add_dtprel_lo12 : num= (I 529))`;

val _ = Define `
 (r_aarch64_tlsld_add_dtprel_lo12_nc : num= (I 530))`;

val _ = Define `
 (r_aarch64_tlsld_ldst8_dtprel_lo12 : num= (I 531))`;

val _ = Define `
 (r_aarch64_tlsld_ldst8_dtprel_lo12_nc : num= (I 532))`;

val _ = Define `
 (r_aarch64_tlsld_ldst16_dtprel_lo12 : num= (I 533))`;

val _ = Define `
 (r_aarch64_tlsld_ldst16_dtprel_lo12_nc : num= (I 534))`;

val _ = Define `
 (r_aarch64_tlsld_ldst32_dtprel_lo12 : num= (I 535))`;

val _ = Define `
 (r_aarch64_tlsld_ldst32_dtprel_lo12_nc : num= (I 536))`;

val _ = Define `
 (r_aarch64_tlsld_ldst64_dtprel_lo12 : num= (I 537))`;

val _ = Define `
 (r_aarch64_tlsld_ldst64_dtprel_lo12_nc : num= (I 538))`;

val _ = Define `
 (r_aarch64_tlsld_ldst128_dtprel_lo12 : num= (I 572))`;

val _ = Define `
 (r_aarch64_tlsld_ldst128_dtprel_lo12_nc : num= (I 573))`;


val _ = Define `
 (r_aarch64_tlsie_movw_gottprel_g1 : num= (I 539))`;

val _ = Define `
 (r_aarch64_tlsie_movw_gottprel_g0_nc : num= (I 540))`;

val _ = Define `
 (r_aarch64_tlsie_movw_gottprel_page21 : num= (I 541))`;

val _ = Define `
 (r_aarch64_tlsie_movw_gottprel_lo12_nc : num= (I 542))`;

val _ = Define `
 (r_aarch64_tlsie_movw_gottprel_prel19 : num= (I 543))`;


val _ = Define `
 (r_aarch64_tlsle_movw_tprel_g2 : num= (I 544))`;

val _ = Define `
 (r_aarch64_tlsle_movw_tprel_g1 : num= (I 545))`;

val _ = Define `
 (r_aarch64_tlsle_movw_tprel_g1_nc : num= (I 546))`;

val _ = Define `
 (r_aarch64_tlsle_movw_tprel_g0 : num= (I 547))`;

val _ = Define `
 (r_aarch64_tlsle_movw_tprel_g0_nc : num= (I 548))`;

val _ = Define `
 (r_aarch64_add_tprel_hi12 : num= (I 549))`;

val _ = Define `
 (r_aarch64_add_tprel_lo12 : num= (I 550))`;

val _ = Define `
 (r_aarch64_add_tprel_lo12_nc : num= (I 551))`;

val _ = Define `
 (r_aarch64_ldst8_tprel_lo12 : num= (I 552))`;

val _ = Define `
 (r_aarch64_ldst8_tprel_lo12_nc : num= (I 553))`;

val _ = Define `
 (r_aarch64_ldst16_tprel_lo12 : num= (I 554))`;

val _ = Define `
 (r_aarch64_ldst16_tprel_lo12_nc : num= (I 555))`;

val _ = Define `
 (r_aarch64_ldst32_tprel_lo12 : num= (I 556))`;

val _ = Define `
 (r_aarch64_ldst32_tprel_lo12_nc : num= (I 557))`;

val _ = Define `
 (r_aarch64_ldst64_tprel_lo12 : num= (I 558))`;

val _ = Define `
 (r_aarch64_ldst64_tprel_lo12_nc : num= (I 559))`;

val _ = Define `
 (r_aarch64_ldst128_tprel_lo12 : num= (I 570))`;

val _ = Define `
 (r_aarch64_ldst128_tprel_lo12_nc : num= (I 571))`;


val _ = Define `
 (r_aarch64_tlsdesc_ld_prel19 : num= (I 560))`;

val _ = Define `
 (r_aarch64_tlsdesc_adr_prel21 : num= (I 561))`;

val _ = Define `
 (r_aarch64_tlsdesc_adr_page21 : num= (I 562))`;

val _ = Define `
 (r_aarch64_tlsdesc_ld64_lo12 : num= (I 563))`;

val _ = Define `
 (r_aarch64_tlsdesc_add_lo12 : num= (I 564))`;

val _ = Define `
 (r_aarch64_tlsdesc_off_g1 : num= (I 565))`;

val _ = Define `
 (r_aarch64_tlsdesc_off_g0_nc : num= (I 566))`;

val _ = Define `
 (r_aarch64_tlsdesc_ldr : num= (I 567))`;

val _ = Define `
 (r_aarch64_tlsdesc_add : num= (I 568))`;

val _ = Define `
 (r_aarch64_tlsdesc_call : num= (I 569))`;


val _ = Define `
 (r_aarch64_copy : num= (I 1024))`;

val _ = Define `
 (r_aarch64_glob_dat : num= (I 1025))`;

val _ = Define `
 (r_aarch64_jump_slot : num= (I 1026))`;

val _ = Define `
 (r_aarch64_relative : num= (I 1027))`;

val _ = Define `
 (r_aarch64_tls_dtprel64 : num= (I 1028))`;

val _ = Define `
 (r_aarch64_tls_dtpmod64 : num= (I 1029))`;

val _ = Define `
 (r_aarch64_tls_tprel64 : num= (I 1030))`;

val _ = Define `
 (r_aarch64_tlsdesc : num= (I 1031))`;

val _ = Define `
 (r_aarch64_irelative : num= (I 1032))`;


(** [string_of_aarch64_relocation_type m] produces a string representation of the
  * relocation type [m].
  *)
(*val string_of_aarch64_relocation_type : natural -> string*)

(*val aarch64_le_reloc : forall 'abifeature. reloc_fn 'abifeature*)
val _ = Define `
 (aarch64_le_reloc r=  
 (if r = r_aarch64_none then
    (F, (\ img .  (\ site_addr .  (\ rr .  (I 0, (\ s .  \ a .  \ e .  e))))))
  else
    (F, noop_reloc_apply)))`;

    
(** [abi_aarch64_apply_relocation rel s_val p_val got_val ef] produces an AST
  * of the relocation calculation for relocation type [rel] using [s_val], [p_val],
  * and [got_val] as primitive components.
  *
  * TODO: unclear from ABI spec. whether overflow check on relocations is
  * supposed to cause relocation to fail if not satisfied or whether there is
  * wrap-around.  Resolve.
  *)
(*val abi_aarch64_apply_relocation : elf64_relocation_a -> integer -> integer ->
  integer -> elf64_file ->
    error (Map.map elf64_addr (relocation_operator_expression integer * integer_bit_width * can_fail integer))*)
val _ = Define `
 (abi_aarch64_apply_relocation rel s_val p_val got_val ef=  
 (if is_elf64_relocatable_file ef.elf64_file_header then
    let rel_type = (get_elf64_relocation_a_type rel) in
    let a_val    = (w2i rel.elf64_ra_addend) in
      (** No width, no calculation *)
      if rel_type = r_aarch64_none then
        return FEMPTY
      (** No width, no calculation *)
      else if rel_type = r_aarch64_withdrawn then
        return FEMPTY
      (** Signed 64 bit width, calculation: S + A *)
      else if rel_type = r_aarch64_abs64 then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I64, CannotFail)))
      (** Signed 32 bit width, calculation: S + A *)
      else if rel_type = r_aarch64_abs32 then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CanFail)))
      (** Signed 16 bith width, calculation: S + A *)
      else if rel_type = r_aarch64_abs16 then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CanFail)))
      (** Signed 64 bit width, calculation: S + A - P *)
      else if rel_type = r_aarch64_prel64 then
      	let result = (Lift ((s_val + a_val) - p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I64, CannotFail)))
      (** Signed 32 bit width, calculation: S + A - P *)
      else if rel_type = r_aarch64_prel32 then
      	let result = (Lift ((s_val + a_val) - p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CanFail)))
      (** Signed 16 bit width, calculation: S + A - P *)
      else if rel_type = r_aarch64_prel16 then
      	let result = (Lift ((s_val + a_val) - p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CanFail)))
      else if rel_type = r_aarch64_movw_uabs_g0 then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U16, CanFail)))
      else if rel_type = r_aarch64_movw_uabs_g0_nc then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U16, CannotFail)))
      else if rel_type = r_aarch64_movw_uabs_g1 then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U32, CanFail)))
      else if rel_type = r_aarch64_movw_uabs_g1_nc then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U32, CannotFail)))
      else if rel_type = r_aarch64_movw_uabs_g2 then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U48, CanFail)))
      else if rel_type = r_aarch64_movw_uabs_g2_nc then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U48, CannotFail)))
      else if rel_type = r_aarch64_movw_uabs_g3 then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U64, CannotFail)))
      else if rel_type = r_aarch64_movw_sabs_g0 then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CanFail)))
      else if rel_type = r_aarch64_movw_sabs_g1 then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CanFail)))
      else if rel_type = r_aarch64_movw_sabs_g2 then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I48, CanFail)))
      else if rel_type = r_aarch64_ld_prel_lo19 then
      	let result = (Lift ((s_val + a_val) - p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I20, CanFail)))
      else if rel_type = r_aarch64_adr_prel_lo21 then
      	let result = (Lift ((s_val + a_val) - p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I20, CanFail)))
      else if rel_type = r_aarch64_adr_prel_pg_hi21 then
      	let result = (Minus(Apply(Page, Lift (s_val + a_val)), Apply(Page, Lift p_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CanFail)))
      else if rel_type = r_aarch64_adr_prel_pg_hi21_nc then
      	let result = (Minus (Apply(Page, Lift (s_val + a_val)), Apply(Page, Lift p_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CannotFail)))
      else if rel_type = r_aarch64_add_abs_lo12_nc then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CannotFail)))
      else if rel_type = r_aarch64_ldst8_abs_lo12_nc then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CannotFail)))
      else if rel_type = r_aarch64_ldst16_abs_lo12_nc then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CannotFail)))
      else if rel_type = r_aarch64_ldst32_abs_lo12_nc then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CannotFail)))
      else if rel_type = r_aarch64_ldst64_abs_lo12_nc then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CannotFail)))
      else if rel_type = r_aarch64_ldst128_abs_lo12_nc then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CannotFail)))
      else if rel_type = r_aarch64_tstbr14 then
      	let result = (Lift ((s_val + a_val) - p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I15, CanFail)))
      else if rel_type = r_aarch64_condbr19 then
      	let result = (Lift ((s_val + a_val) - p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I20, CanFail)))
      else if rel_type = r_aarch64_jump26 then
      	let result = (Lift ((s_val + a_val) - p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I27, CanFail)))
      else if rel_type = r_aarch64_call26 then
      	let result = (Lift ((s_val + a_val) - p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I27, CanFail)))
      else if rel_type = r_aarch64_movw_prel_g0 then
      	let result = (Lift ((s_val + a_val) - p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CanFail)))
      else if rel_type = r_aarch64_movw_prel_g0_nc then
      	let result = (Lift ((s_val + a_val) - p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      else if rel_type = r_aarch64_movw_prel_g1 then
      	let result = (Lift ((s_val + a_val) - p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CanFail)))
      else if rel_type = r_aarch64_movw_prel_g1_nc then
      	let result = (Lift ((s_val + a_val) - p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CannotFail)))
      else if rel_type = r_aarch64_movw_prel_g2 then
      	let result = (Lift ((s_val + a_val) - p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I48, CanFail)))
      else if rel_type = r_aarch64_movw_prel_g2_nc then
      	let result = (Lift ((s_val + a_val) - p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I48, CannotFail)))
      else if rel_type = r_aarch64_movw_prel_g3 then
      	let result = (Lift ((s_val + a_val) - p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I64, CannotFail)))
      else if rel_type = r_aarch64_movw_gotoff_g0 then
      	let result = (Minus (Apply(G, Apply(GDat, Lift (s_val + a_val))), Lift got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CanFail)))
      else if rel_type = r_aarch64_movw_gotoff_g0_nc then
      	let result = (Minus (Apply(G, Apply(GDat, Lift (s_val + a_val))), Lift got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      else if rel_type = r_aarch64_movw_gotoff_g1 then
      	let result = (Minus (Apply(G, Apply(GDat, Lift (s_val + a_val))), Lift got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CanFail)))
      else if rel_type = r_aarch64_movw_gotoff_g1_nc then
      	let result = (Minus (Apply(G, Apply(GDat, Lift (s_val + a_val))), Lift got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CannotFail)))
      else if rel_type = r_aarch64_movw_gotoff_g2 then
      	let result = (Minus (Apply(G, Apply(GDat, Lift (s_val + a_val))), Lift got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I48, CanFail)))
      else if rel_type = r_aarch64_movw_gotoff_g2_nc then
      	let result = (Minus (Apply(G, Apply(GDat, Lift (s_val + a_val))), Lift got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CannotFail)))
      else if rel_type = r_aarch64_movw_gotoff_g3 then
      	let result = (Minus (Apply(G, Apply(GDat, Lift (s_val + a_val))), Lift got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I64, CannotFail)))
      else if rel_type = r_aarch64_gotrel64 then
      	let result = (Lift ((s_val + a_val) - got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I64, CannotFail)))
      else if rel_type = r_aarch64_gotrel32 then
      	let result = (Lift ((s_val + a_val) - got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CanFail)))
      else if rel_type = r_aarch64_got_ld_prel19 then
      	let result = (Minus (Apply(G, Apply(GDat, Lift (s_val + a_val))), Lift p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I20, CanFail)))
      else if rel_type = r_aarch64_got_ld64_gotoff_lo15 then
      	let result = (Minus (Apply(G, Apply(GDat, Lift (s_val + a_val))), Lift got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U15, CanFail)))
      else if rel_type = r_aarch64_adr_got_page then
      	let result = (Minus (Apply(Page, Apply(G, Apply(GDat, Lift (s_val + a_val)))), Apply(Page, Lift p_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CanFail)))
      else if rel_type = r_aarch64_ld64_got_lo12_nc then
        (** requires ad hoc check *)
      	let result = (Apply(G, Apply(GDat, Lift (s_val + a_val)))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I20, CannotFail)))
      else if rel_type = r_aarch64_ld64_gotpage_lo15 then
        (** requires ad hoc check *)
      	let result = (Minus(Apply(G, Apply(GDat, Lift (s_val + a_val))), Apply(Page, Lift got_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U15, CanFail)))
      else if rel_type = r_aarch64_tlsgd_adr_prel21 then
      	let result = (Minus(Apply(G, Apply2(GTLSIdx, Lift s_val, Lift a_val)), Lift p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I20, CanFail)))
      else if rel_type = r_aarch64_tlsgd_adr_page21 then
      	let result = (Minus(Apply(Page, Apply(G, Apply2(GTLSIdx, Lift s_val, Lift a_val))), Apply(Page, Lift p_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CanFail)))
      else if rel_type = r_aarch64_tlsgd_add_lo12_nc then
      	let result = (Apply(G, Apply2(GTLSIdx, Lift s_val, Lift a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I12, CannotFail)))
      else if rel_type = r_aarch64_tlsgd_movw_g1 then
        (** requires ad hoc check *)
      	let result = (Minus(Apply(G, Apply2(GTLSIdx, Lift s_val, Lift a_val)), Lift got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      else if rel_type = r_aarch64_tlsgd_movw_g0_nc then
      	let result = (Minus(Apply(G, Apply2 (GTLSIdx, Lift s_val, Lift a_val)), Lift got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      else if rel_type = r_aarch64_tlsld_adr_prel21 then
        let result = (Minus(Apply(G, Apply(GLDM, Lift s_val)), Lift p_val)) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I20, CanFail)))
      else if rel_type = r_aarch64_tlsld_adr_page21 then
        let result = (Minus(Apply(G, Apply(GLDM, Lift s_val)), Apply(Page, Lift p_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CanFail)))
      else if rel_type = r_aarch64_tlsld_add_lo12_nc then
        let result = (Apply(G, Apply(GLDM, Lift s_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CannotFail)))
      else if rel_type = r_aarch64_tlsld_movw_g1 then
        let result = (Minus(Apply(G, Apply(GLDM, Lift s_val)), Lift got_val)) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I15, CanFail)))
      else if rel_type = r_aarch64_tlsld_movw_g0_nc then
        let result = (Minus(Apply(G, Apply(GLDM, Lift s_val)), Lift got_val)) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I15, CannotFail)))
      else if rel_type = r_aarch64_tlsld_ld_prel19 then
        let result = (Minus(Apply(G, Apply(GLDM, Lift s_val)), Lift p_val)) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I20, CanFail)))
      else if rel_type = r_aarch64_tlsld_movw_dtprel_g2 then
        let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I15, CanFail)))
      else if rel_type = r_aarch64_tlsld_movw_dtprel_g1 then
        let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I15, CanFail)))
      else if rel_type = r_aarch64_tlsld_movw_dtprel_g1_nc then
        let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I15, CannotFail)))
      else if rel_type = r_aarch64_tlsld_movw_dtprel_g0 then
        let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I15, CanFail)))
      else if rel_type = r_aarch64_tlsld_movw_dtprel_g0_nc then
        let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I15, CannotFail)))
      else if rel_type = r_aarch64_tlsld_add_dtprel_hi12 then
        let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U24, CanFail)))
      else if rel_type = r_aarch64_tlsld_add_dtprel_lo12 then
        let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CanFail)))
      else if rel_type = r_aarch64_tlsld_add_dtprel_lo12_nc then
        let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CannotFail)))
      else if rel_type = r_aarch64_tlsld_ldst8_dtprel_lo12 then
        let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CanFail)))
      else if rel_type = r_aarch64_tlsld_ldst8_dtprel_lo12_nc then
        let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CannotFail)))
      else if rel_type = r_aarch64_tlsld_ldst16_dtprel_lo12 then
        let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CanFail)))
      else if rel_type = r_aarch64_tlsld_ldst16_dtprel_lo12_nc then
        let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CannotFail)))
      else if rel_type = r_aarch64_tlsld_ldst32_dtprel_lo12 then
        let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CanFail)))
      else if rel_type = r_aarch64_tlsld_ldst32_dtprel_lo12_nc then
        let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CannotFail)))
      else if rel_type = r_aarch64_tlsld_ldst64_dtprel_lo12 then
        let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CanFail)))
      else if rel_type = r_aarch64_tlsld_ldst64_dtprel_lo12_nc then
        let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CannotFail)))
      else if rel_type = r_aarch64_tlsld_ldst128_dtprel_lo12 then
        let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CanFail)))
      else if rel_type = r_aarch64_tlsld_ldst128_dtprel_lo12_nc then
        let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CannotFail)))
      else if rel_type = r_aarch64_tlsie_movw_gottprel_g1 then
        let result = (Minus(Apply(G, Apply(GTPRel, Lift (s_val + a_val))), Lift got_val)) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I15, CanFail)))
      else if rel_type = r_aarch64_tlsie_movw_gottprel_g0_nc then
        let result = (Minus(Apply(G, Apply(GTPRel, Lift (s_val + a_val))), Lift got_val)) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I15, CannotFail)))
      else if rel_type = r_aarch64_tlsie_movw_gottprel_page21 then
        let result = (Minus(Apply(Page, Apply(G, Apply(GTPRel, Lift (s_val + a_val)))), Apply(Page, Lift p_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CanFail)))
      else if rel_type = r_aarch64_tlsie_movw_gottprel_lo12_nc then
        (** requires ad hoc check *)
        let result = (Apply(G, Apply(GTPRel, Lift (s_val + a_val)))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I8, CannotFail)))
      else if rel_type = r_aarch64_tlsie_movw_gottprel_prel19 then
        let result = (Minus(Apply(G, Apply(GTPRel, Lift (s_val + a_val))), Lift p_val)) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I20, CanFail)))
      else if rel_type = r_aarch64_tlsle_movw_tprel_g2 then
      	let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U16, CanFail)))
      else if rel_type = r_aarch64_tlsle_movw_tprel_g1 then
      	let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U16, CanFail)))
      else if rel_type = r_aarch64_tlsle_movw_tprel_g1_nc then
      	let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U16, CannotFail)))
      else if rel_type = r_aarch64_tlsle_movw_tprel_g0 then
      	let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U16, CanFail)))
      else if rel_type = r_aarch64_tlsle_movw_tprel_g0_nc then
      	let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U16, CannotFail)))
      else if rel_type = r_aarch64_add_tprel_hi12 then
      	let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U24, CanFail)))
      else if rel_type = r_aarch64_add_tprel_lo12 then
      	let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CanFail)))
      else if rel_type = r_aarch64_add_tprel_lo12_nc then
      	let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CannotFail)))
      else if rel_type = r_aarch64_ldst8_tprel_lo12 then
      	let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CanFail)))
      else if rel_type = r_aarch64_ldst8_tprel_lo12_nc then
      	let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CannotFail)))
      else if rel_type = r_aarch64_ldst16_tprel_lo12 then
      	let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CanFail)))
      else if rel_type = r_aarch64_ldst16_tprel_lo12_nc then
      	let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CannotFail)))
      else if rel_type = r_aarch64_ldst32_tprel_lo12 then
      	let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CanFail)))
      else if rel_type = r_aarch64_ldst32_tprel_lo12_nc then
      	let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CannotFail)))
      else if rel_type = r_aarch64_ldst64_tprel_lo12 then
      	let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CanFail)))
      else if rel_type = r_aarch64_ldst64_tprel_lo12_nc then
      	let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CannotFail)))
      else if rel_type = r_aarch64_ldst128_tprel_lo12 then
      	let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CanFail)))
      else if rel_type = r_aarch64_ldst128_tprel_lo12_nc then
      	let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CannotFail)))
      else if rel_type = r_aarch64_tlsdesc_ld_prel19 then
        (** requires ad hoc test *)
      	let result = (Minus(Apply(G, Apply(GTLSDesc, Lift (s_val + a_val))), Lift p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I20, CanFail)))
      else if rel_type = r_aarch64_tlsdesc_adr_prel21 then
      	let result = (Minus (Apply(G, Apply(GTLSDesc, Lift (s_val + a_val))), Lift p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I20, CanFail)))
      else if rel_type = r_aarch64_tlsdesc_adr_page21 then
      	let result = (Minus(Apply(Page, Apply(G, Apply(GTLSDesc, Lift(s_val + a_val)))), Apply(Page, Lift p_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CanFail)))
      else if rel_type = r_aarch64_tlsdesc_ld64_lo12 then
        (** requires ad hoc test *)
      	let result = (Apply(G, Apply(GTLSDesc, Lift (s_val + a_val)))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I20, CanFail)))
      else if rel_type = r_aarch64_tlsdesc_add_lo12 then
      	let result = (Apply(G, Apply(GTLSDesc, Lift (s_val + a_val)))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CannotFail)))
      else if rel_type = r_aarch64_tlsdesc_off_g1 then
      	let result = (Minus(Apply(G, Apply(GTLSDesc, Lift (s_val + a_val))), Lift got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CanFail)))
      else if rel_type = r_aarch64_tlsdesc_off_g0_nc then
      	let result = (Minus(Apply(G, Apply(GTLSDesc, Lift (s_val + a_val))), Lift got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CannotFail)))
      else if rel_type = r_aarch64_tlsdesc_ldr then
        return FEMPTY
      else if rel_type = r_aarch64_tlsdesc_add then
        return FEMPTY
      else if rel_type = r_aarch64_tlsdesc_call then
        return FEMPTY
      else if rel_type = r_aarch64_copy then
        fail0 "AARCH64_COPY"
      else if rel_type = r_aarch64_glob_dat then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I64, CannotFail)))
      else if rel_type = r_aarch64_jump_slot then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I64, CannotFail)))
      else if rel_type = r_aarch64_relative then
      	let result = (Plus(Apply(Delta, Lift s_val), Lift a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I64, CannotFail)))
      else if rel_type = r_aarch64_tls_dtprel64 then
      	let result = (Apply(DTPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I64, CannotFail)))
      else if rel_type = r_aarch64_tls_dtpmod64 then
      	let result = (Apply(LDM, Lift s_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I64, CannotFail)))
      else if rel_type = r_aarch64_tls_tprel64 then
      	let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I64, CannotFail)))
      else if rel_type = r_aarch64_tlsdesc then
      	let result = (Apply(TLSDesc, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I64, CannotFail)))
      else if rel_type = r_aarch64_irelative then
      	let result = (Apply(Indirect, Plus (Apply(Delta, Lift s_val), Lift a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I64, CannotFail)))
      else
        fail0 "Invalid AARCH64 relocation type"
  else
  	fail0 "abi_aarch64_apply_relocation: not a relocatable file"))`;

val _ = export_theory()

